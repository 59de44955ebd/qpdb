ArithmeticError() [class] Base class for arithmetic errors.
AssertionError() [class] Assertion failed.
AttributeError() [class] Attribute not found.
BaseException() [class] Common base class for all exceptions
BlockingIOError() [class] I/O operation would block.
BrokenPipeError() [class] Broken pipe.
BufferError() [class] Buffer error.
BytesWarning() [class] Base class for warnings about bytes and buffer related problems, mostly related to
ChildProcessError() [class] Child process error.
ConnectionAbortedError() [class] Connection aborted.
ConnectionError() [class] Connection error.
ConnectionRefusedError() [class] Connection refused.
ConnectionResetError() [class] Connection reset.
DeprecationWarning() [class] Base class for warnings about deprecated features.
EOFError() [class] Read beyond end of file.
Ellipsis
EnvironmentError() [class] Base class for I/O related errors.
Exception() [class] Common base class for all non-exit exceptions.
False
FileExistsError() [class] File already exists.
FileNotFoundError() [class] File not found.
FloatingPointError() [class] Floating point operation failed.
FutureWarning() [class] Base class for warnings about constructs that will change semantically in the future.
GeneratorExit() [class] Request that a generator exit.
IOError() [class] Base class for I/O related errors.
ImportError() [class] Import can't find module, or can't find name in module.
ImportWarning() [class] Base class for warnings about probable mistakes in module imports
IndentationError() [class] Improper indentation.
IndexError() [class] Sequence index out of range.
InterruptedError() [class] Interrupted by signal.
IsADirectoryError() [class] Operation doesn't work on directories.
KeyError() [class] Mapping key not found.
KeyboardInterrupt() [class] Program interrupted by user.
LookupError() [class] Base class for lookup errors.
MemoryError() [class] Out of memory.
ModuleNotFoundError() [class] Module not found.
NameError() [class] Name not found globally.
None
NotADirectoryError() [class] Operation only works on directories.
NotImplemented
NotImplementedError() [class] Method or function hasn't been implemented yet.
OSError() [class] Base class for I/O related errors.
OverflowError() [class] Result too large to be represented.
PendingDeprecationWarning() [class] Base class for warnings about features which will be deprecated in the future.
PermissionError() [class] Not enough permissions.
ProcessLookupError() [class] Process not found.
RecursionError() [class] Recursion limit exceeded.
ReferenceError() [class] Weak ref proxy used after referent went away.
ResourceWarning() [class] Base class for warnings about resource usage.
RuntimeError() [class] Unspecified run-time error.
RuntimeWarning() [class] Base class for warnings about dubious runtime behavior.
StopAsyncIteration() [class] Signal the end from iterator.__anext__().
StopIteration() [class] Signal the end from iterator.__next__().
SyntaxError() [class] Invalid syntax.
SyntaxWarning() [class] Base class for warnings about dubious syntax.
SystemError() [class] Internal error in the Python interpreter.
SystemExit() [class] Request to exit from the interpreter.
TabError() [class] Improper mixture of spaces and tabs.
TimeoutError() [class] Timeout expired.
True
TypeError() [class] Inappropriate argument type.
UnboundLocalError() [class] Local name referenced but not bound to a value.
UnicodeDecodeError() [class] Unicode decoding error.
UnicodeEncodeError() [class] Unicode encoding error.
UnicodeError() [class] Unicode related error.
UnicodeTranslateError() [class] Unicode translation error.
UnicodeWarning() [class] Base class for warnings about Unicode related problems, mostly related to conversion
UserWarning() [class] Base class for warnings generated by user code.
ValueError() [class] Inappropriate argument value (of correct type).
Warning() [class] Base class for warning categories.
WindowsError() [class] Base class for I/O related errors.
ZeroDivisionError() [class] Second argument to a division or modulo operation was zero.
abc
abc.ABC() [class] Helper class that provides a standard way to create an ABC using inheritance.
abc.ABCMeta(name, bases, namespace, **kwargs) [class] Metaclass for defining Abstract Base Classes (ABCs).
abc.abstractclassmethod(callable) [class] A decorator indicating abstract classmethods.
abc.abstractmethod(funcobj) [function] A decorator indicating abstract methods.
abc.abstractproperty(fget=None, fset=None, fdel=None, doc=None) [class] A decorator indicating abstract properties.
abc.abstractstaticmethod(callable) [class] A decorator indicating abstract staticmethods.
abc.get_cache_token() Returns the current ABC cache token.
abs(x) Return the absolute value of the argument.
aifc
aifc.Error() [class] Common base class for all non-exit exceptions.
aifc.open(f, mode=None) [function]
aifc.openfp(f, mode=None) [function]
all(iterable) Return True if bool(x) is True for all values x in the iterable.
and
any(iterable) Return True if bool(x) is True for any x in the iterable.
argparse
argparse.Action(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None) [class] Information about how to convert command line strings to Python objects.
argparse.ArgumentDefaultsHelpFormatter(prog, indent_increment=2, max_help_position=24, width=None) [class] Help message formatter which adds default values to argument help.
argparse.ArgumentError(argument, message) [class] An error from creating or using an argument (optional or positional).
argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=<??>, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True) [class] Object for parsing command line strings into Python objects.
argparse.ArgumentTypeError() [class] An error from trying to convert a command line string to a type.
argparse.FileType(mode='r', bufsize=-1, encoding=None, errors=None) [class] Factory for creating file object types Instances of FileType are typically passed
argparse.HelpFormatter(prog, indent_increment=2, max_help_position=24, width=None) [class] Formatter for generating usage messages and argument help strings.
argparse.MetavarTypeHelpFormatter(prog, indent_increment=2, max_help_position=24, width=None) [class] Help message formatter which uses the argument 'type' as the default metavar value
argparse.Namespace(**kwargs) [class] Simple object for storing attributes.
argparse.ONE_OR_MORE
argparse.OPTIONAL
argparse.PARSER
argparse.REMAINDER
argparse.RawDescriptionHelpFormatter(prog, indent_increment=2, max_help_position=24, width=None) [class] Help message formatter which retains any formatting in descriptions.
argparse.RawTextHelpFormatter(prog, indent_increment=2, max_help_position=24, width=None) [class] Help message formatter which retains formatting of all help text.
argparse.SUPPRESS
argparse.ZERO_OR_MORE
array
array.ArrayType() [class] array(typecode [, initializer]) -> array Return a new array whose items are restricted
array.array(typecode[, initializer]) [class] array(typecode [, initializer]) -> array Return a new array whose items are restricted
array.typecodes
as
ascii(obj) Return an ASCII-only representation of an object.
assert
ast
ast.AST() [class]
ast.Add() [class]
ast.And() [class]
ast.AnnAssign() [class]
ast.Assert() [class]
ast.Assign() [class]
ast.AsyncFor() [class]
ast.AsyncFunctionDef() [class]
ast.AsyncWith() [class]
ast.Attribute() [class]
ast.AugAssign() [class]
ast.AugLoad() [class]
ast.AugStore() [class]
ast.Await() [class]
ast.BinOp() [class]
ast.BitAnd() [class]
ast.BitOr() [class]
ast.BitXor() [class]
ast.BoolOp() [class]
ast.Break() [class]
ast.Bytes() [class]
ast.Call() [class]
ast.ClassDef() [class]
ast.Compare() [class]
ast.Constant() [class]
ast.Continue() [class]
ast.Del() [class]
ast.Delete() [class]
ast.Dict() [class]
ast.DictComp() [class]
ast.Div() [class]
ast.Ellipsis() [class]
ast.Eq() [class]
ast.ExceptHandler() [class]
ast.Expr() [class]
ast.Expression() [class]
ast.ExtSlice() [class]
ast.FloorDiv() [class]
ast.For() [class]
ast.FormattedValue() [class]
ast.FunctionDef() [class]
ast.GeneratorExp() [class]
ast.Global() [class]
ast.Gt() [class]
ast.GtE() [class]
ast.If() [class]
ast.IfExp() [class]
ast.Import() [class]
ast.ImportFrom() [class]
ast.In() [class]
ast.Index() [class]
ast.Interactive() [class]
ast.Invert() [class]
ast.Is() [class]
ast.IsNot() [class]
ast.JoinedStr() [class]
ast.LShift() [class]
ast.Lambda() [class]
ast.List() [class]
ast.ListComp() [class]
ast.Load() [class]
ast.Lt() [class]
ast.LtE() [class]
ast.MatMult() [class]
ast.Mod() [class]
ast.Module() [class]
ast.Mult() [class]
ast.Name() [class]
ast.NameConstant() [class]
ast.NodeTransformer() [class] A :class:`NodeVisitor` subclass that walks the abstract syntax tree and allows modification
ast.NodeVisitor() [class] A node visitor base class that walks the abstract syntax tree and calls a visitor
ast.Nonlocal() [class]
ast.Not() [class]
ast.NotEq() [class]
ast.NotIn() [class]
ast.Num() [class]
ast.Or() [class]
ast.Param() [class]
ast.Pass() [class]
ast.Pow() [class]
ast.PyCF_ONLY_AST
ast.RShift() [class]
ast.Raise() [class]
ast.Return() [class]
ast.Set() [class]
ast.SetComp() [class]
ast.Slice() [class]
ast.Starred() [class]
ast.Store() [class]
ast.Str() [class]
ast.Sub() [class]
ast.Subscript() [class]
ast.Suite() [class]
ast.Try() [class]
ast.Tuple() [class]
ast.UAdd() [class]
ast.USub() [class]
ast.UnaryOp() [class]
ast.While() [class]
ast.With() [class]
ast.Yield() [class]
ast.YieldFrom() [class]
ast.alias() [class]
ast.arg() [class]
ast.arguments() [class]
ast.boolop() [class]
ast.cmpop() [class]
ast.comprehension() [class]
ast.copy_location(new_node, old_node) [function] Copy source location (`lineno` and `col_offset` attributes) from *old_node* to *new_node*
ast.dump(node, annotate_fields=True, include_attributes=False) [function] Return a formatted dump of the tree in *node*.
ast.excepthandler() [class]
ast.expr() [class]
ast.expr_context() [class]
ast.fix_missing_locations(node) [function] When you compile a node tree with compile(), the compiler expects lineno and col_offset
ast.get_docstring(node, clean=True) [function] Return the docstring for the given node or None if no docstring can be found.
ast.increment_lineno(node, n=1) [function] Increment the line number of each node in the tree starting at *node* by *n*.
ast.iter_child_nodes(node) [function] Yield all direct child nodes of *node*, that is, all fields that are nodes and all
ast.iter_fields(node) [function] Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields`` that is
ast.keyword() [class]
ast.literal_eval(node_or_string) [function] Safely evaluate an expression node or a string containing a Python expression.
ast.mod() [class]
ast.operator() [class]
ast.parse(source, filename='<unknown>', mode='exec') [function] Parse the source into an AST node.
ast.slice() [class]
ast.stmt() [class]
ast.unaryop() [class]
ast.walk(node) [function] Recursively yield all descendant nodes in the tree starting at *node* (including
ast.withitem() [class]
async
asynchat
asynchat.async_chat(sock=None, map=None) [class] This is an abstract class.
asynchat.deque() [class] deque([iterable[, maxlen]]) --> deque object A list-like sequence optimized for data
asynchat.find_prefix_at_end(haystack, needle) [function]
asynchat.simple_producer(data, buffer_size=512) [class]
asyncio
asyncio.ALL_COMPLETED
asyncio.AbstractEventLoop() [class] Abstract event loop.
asyncio.AbstractEventLoopPolicy() [class] Abstract policy for accessing the event loop.
asyncio.AbstractServer() [class] Abstract server returned by create_server().
asyncio.BaseEventLoop() [class] Abstract event loop.
asyncio.BaseProtocol() [class] Common base class for protocol interfaces.
asyncio.BaseTransport(extra=None) [class] Base class for transports.
asyncio.BoundedSemaphore(value=1, *, loop=None) [class] A bounded semaphore implementation.
asyncio.BufferedProtocol() [class] Interface for stream protocol with manual buffer control.
asyncio.CancelledError() [class] The Future was cancelled.
asyncio.Condition(lock=None, *, loop=None) [class] Asynchronous equivalent to threading.Condition.
asyncio.DatagramProtocol() [class] Interface for datagram protocol.
asyncio.DatagramTransport(extra=None) [class] Interface for datagram (UDP) transports.
asyncio.DefaultEventLoopPolicy() [class] Default policy implementation for accessing the event loop.
asyncio.Event(*, loop=None) [class] Asynchronous equivalent to threading.Event.
asyncio.FIRST_COMPLETED
asyncio.FIRST_EXCEPTION
asyncio.Future(*, loop=None) [class] This class is *almost* compatible with concurrent.futures.Future.
asyncio.Handle(callback, args, loop, context=None) [class] Object returned by callback registration methods.
asyncio.IncompleteReadError(partial, expected) [class] Incomplete read error.
asyncio.InvalidStateError() [class] The operation is not allowed in this state.
asyncio.IocpProactor(concurrency=4294967295) [class] Proactor implementation using IOCP.
asyncio.LifoQueue(maxsize=0, *, loop=None) [class] A subclass of Queue that retrieves most recently added entries first.
asyncio.LimitOverrunError(message, consumed) [class] Reached the buffer limit while looking for a separator.
asyncio.Lock(*, loop=None) [class] Primitive lock objects.
asyncio.PriorityQueue(maxsize=0, *, loop=None) [class] A subclass of Queue; retrieves entries in priority order (lowest first).
asyncio.ProactorEventLoop(proactor=None) [class] Windows version of proactor event loop using IOCP.
asyncio.Protocol() [class] Interface for stream protocol.
asyncio.Queue(maxsize=0, *, loop=None) [class] A queue, useful for coordinating producer and consumer coroutines.
asyncio.QueueEmpty() [class] Raised when Queue.get_nowait() is called on an empty Queue.
asyncio.QueueFull() [class] Raised when the Queue.put_nowait() method is called on a full Queue.
asyncio.ReadTransport(extra=None) [class] Interface for read-only transports.
asyncio.SelectorEventLoop(selector=None) [class] Windows version of selector event loop.
asyncio.Semaphore(value=1, *, loop=None) [class] A Semaphore implementation.
asyncio.SendfileNotAvailableError() [class] Sendfile syscall is not available.
asyncio.StreamReader(limit=65536, loop=None) [class]
asyncio.StreamReaderProtocol(stream_reader, client_connected_cb=None, loop=None) [class] Helper class to adapt between Protocol and StreamReader.
asyncio.StreamWriter(transport, protocol, reader, loop) [class] Wraps a Transport.
asyncio.SubprocessProtocol() [class] Interface for protocol for subprocess calls.
asyncio.SubprocessTransport(extra=None) [class] Base class for transports.
asyncio.Task(coro, *, loop=None) [class] A coroutine wrapped in a Future.
asyncio.TimeoutError() [class] The operation exceeded the given deadline.
asyncio.TimerHandle(when, callback, args, loop, context=None) [class] Object returned by timed callback registration methods.
asyncio.Transport(extra=None) [class] Interface representing a bidirectional transport.
asyncio.WindowsProactorEventLoopPolicy() [class] Default policy implementation for accessing the event loop.
asyncio.WindowsSelectorEventLoopPolicy() [class] Default policy implementation for accessing the event loop.
asyncio.WriteTransport(extra=None) [class] Interface for write-only transports.
asyncio._enter_task(loop, task) Enter into task execution or resume suspended task.
asyncio._get_running_loop() Return the running event loop or None.
asyncio._leave_task(loop, task) Leave task execution or suspend a task. Task belongs to loop. Returns None.
asyncio._register_task(task) Register a new task in asyncio as executed by loop. Returns None.
asyncio._set_running_loop(loop) Set the running event loop.
asyncio._unregister_task(task) Unregister a task. Returns None.
asyncio.all_tasks(loop=None) [function] Return a set of all tasks for the loop.
asyncio.as_completed(fs, *, loop=None, timeout=None) [function] Return an iterator whose values are coroutines.
asyncio.coroutine(func) [function] Decorator to mark coroutines.
asyncio.create_subprocess_exec(program, *args, *, stdin=None, stdout=None, stderr=None, loop=None, limit=65536, **kwds) [function]
asyncio.create_subprocess_shell(cmd, stdin=None, stdout=None, stderr=None, loop=None, limit=65536, **kwds) [function]
asyncio.create_task(coro) [function] Schedule the execution of a coroutine object in a spawn task. Return a Task object.
asyncio.current_task(loop=None) [function] Return a currently executed task.
asyncio.ensure_future(coro_or_future, *, loop=None) [function] Wrap a coroutine or an awaitable in a future.
asyncio.gather(*coros_or_futures, *, loop=None, return_exceptions=False) [function] Return a future aggregating results from the given coroutines/futures.
asyncio.get_child_watcher() [function] Equivalent to calling get_event_loop_policy().get_child_watcher().
asyncio.get_event_loop() Return an asyncio event loop.
asyncio.get_event_loop_policy() [function] Get the current event loop policy.
asyncio.get_running_loop() Return the running event loop.
asyncio.iscoroutine(obj) [function] Return True if obj is a coroutine object.
asyncio.iscoroutinefunction(func) [function] Return True if func is a decorated coroutine function.
asyncio.isfuture(obj) [function] Check for a Future.
asyncio.new_event_loop() [function] Equivalent to calling get_event_loop_policy().new_event_loop().
asyncio.open_connection(host=None, port=None, *, loop=None, limit=65536, **kwds) [function] A wrapper for create_connection() returning a (reader, writer) pair.
asyncio.run(main, *, debug=False) [function] Run a coroutine.
asyncio.run_coroutine_threadsafe(coro, loop) [function] Submit a coroutine object to a given event loop.
asyncio.set_child_watcher(watcher) [function] Equivalent to calling get_event_loop_policy().set_child_watcher(watcher).
asyncio.set_event_loop(loop) [function] Equivalent to calling get_event_loop_policy().set_event_loop(loop).
asyncio.set_event_loop_policy(policy) [function] Set the current event loop policy. If policy is None, the default policy is restored.
asyncio.shield(arg, *, loop=None) [function] Wait for a future, shielding it from cancellation.
asyncio.sleep(delay, result=None, *, loop=None) [function] Coroutine that completes after a given time (in seconds).
asyncio.start_server(client_connected_cb, host=None, port=None, *, loop=None, limit=65536, **kwds) [function] Start a socket server, call back for each client connected.
asyncio.wait(fs, *, loop=None, timeout=None, return_when='ALL_COMPLETED') [function] Wait for the Futures and coroutines given by fs to complete.
asyncio.wait_for(fut, timeout, *, loop=None) [function] Wait for the single Future or coroutine to complete, with timeout.
asyncio.wrap_future(future, *, loop=None) [function] Wrap concurrent.futures.Future object.
asyncore
asyncore.EAGAIN
asyncore.EALREADY
asyncore.EBADF
asyncore.ECONNABORTED
asyncore.ECONNRESET
asyncore.EINPROGRESS
asyncore.EINVAL
asyncore.EISCONN
asyncore.ENOTCONN
asyncore.EPIPE
asyncore.ESHUTDOWN
asyncore.EWOULDBLOCK
asyncore.ExitNow() [class] Common base class for all non-exit exceptions.
asyncore.close_all(map=None, ignore_all=False) [function]
asyncore.compact_traceback() [function]
asyncore.dispatcher(sock=None, map=None) [class]
asyncore.dispatcher_with_send(sock=None, map=None) [class]
asyncore.errorcode
asyncore.loop(timeout=30.0, use_poll=False, map=None, count=None) [function]
asyncore.poll(timeout=0.0, map=None) [function]
asyncore.poll2(timeout=0.0, map=None) [function]
asyncore.poll3(timeout=0.0, map=None) [function]
asyncore.read(obj) [function]
asyncore.readwrite(obj, flags) [function]
asyncore.socket_map
asyncore.write(obj) [function]
atexit
atexit.register(func, *args, **kwargs) register(func, *args, **kwargs) -> func Register a function to be executed upon normal
atexit.unregister(func) unregister(func) -> None Unregister an exit function which was previously registered
audioop
audioop.add(fragment1, fragment2, width) Return a fragment which is the addition of the two samples passed as parameters.
audioop.adpcm2lin(fragment, width, state) Decode an Intel/DVI ADPCM coded fragment to a linear fragment.
audioop.alaw2lin(fragment, width) Convert sound fragments in a-LAW encoding to linearly encoded sound fragments.
audioop.avg(fragment, width) Return the average over all samples in the fragment.
audioop.avgpp(fragment, width) Return the average peak-peak value over all samples in the fragment.
audioop.bias(fragment, width, bias) Return a fragment that is the original fragment with a bias added to each sample.
audioop.byteswap(fragment, width) Convert big-endian samples to little-endian and vice versa.
audioop.cross(fragment, width) Return the number of zero crossings in the fragment passed as an argument.
audioop.error() [class] Common base class for all non-exit exceptions.
audioop.findfactor(fragment, reference) Return a factor F such that rms(add(fragment, mul(reference, -F))) is minimal.
audioop.findfit(fragment, reference) Try to match reference as well as possible to a portion of fragment.
audioop.findmax(fragment, length) Search fragment for a slice of specified number of samples with maximum energy.
audioop.getsample(fragment, width, index) Return the value of sample index from the fragment.
audioop.lin2adpcm(fragment, width, state) Convert samples to 4 bit Intel/DVI ADPCM encoding.
audioop.lin2alaw(fragment, width) Convert samples in the audio fragment to a-LAW encoding.
audioop.lin2lin(fragment, width, newwidth) Convert samples between 1-, 2-, 3- and 4-byte formats.
audioop.lin2ulaw(fragment, width) Convert samples in the audio fragment to u-LAW encoding.
audioop.max(fragment, width) Return the maximum of the absolute value of all samples in a fragment.
audioop.maxpp(fragment, width) Return the maximum peak-peak value in the sound fragment.
audioop.minmax(fragment, width) Return the minimum and maximum values of all samples in the sound fragment.
audioop.mul(fragment, width, factor) Return a fragment that has all samples in the original fragment multiplied by the
audioop.ratecv(fragment, width, nchannels, inrate, outrate, state, weightA=1, weightB=0) Convert the frame rate of the input fragment.
audioop.reverse(fragment, width) Reverse the samples in a fragment and returns the modified fragment.
audioop.rms(fragment, width) Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)/n).
audioop.tomono(fragment, width, lfactor, rfactor) Convert a stereo fragment to a mono fragment.
audioop.tostereo(fragment, width, lfactor, rfactor) Generate a stereo fragment from a mono fragment.
audioop.ulaw2lin(fragment, width) Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.
await
base64
base64.a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \t\n\r\x0b') [function] Decode the Ascii85 encoded bytes-like object or ASCII string b.
base64.a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False) [function] Encode bytes-like object b using Ascii85 and return a bytes object.
base64.b16decode(s, casefold=False) [function] Decode the Base16 encoded bytes-like object or ASCII string s.
base64.b16encode(s) [function] Encode the bytes-like object s using Base16 and return a bytes object.
base64.b32decode(s, casefold=False, map01=None) [function] Decode the Base32 encoded bytes-like object or ASCII string s.
base64.b32encode(s) [function] Encode the bytes-like object s using Base32 and return a bytes object.
base64.b64decode(s, altchars=None, validate=False) [function] Decode the Base64 encoded bytes-like object or ASCII string s.
base64.b64encode(s, altchars=None) [function] Encode the bytes-like object s using Base64 and return a bytes object.
base64.b85decode(b) [function] Decode the base85-encoded bytes-like object or ASCII string b The result is returned
base64.b85encode(b, pad=False) [function] Encode bytes-like object b in base85 format and return a bytes object.
base64.decode(input, output) [function] Decode a file; input and output are binary files.
base64.decodebytes(s) [function] Decode a bytestring of base-64 data into a bytes object.
base64.encode(input, output) [function] Encode a file; input and output are binary files.
base64.encodebytes(s) [function] Encode a bytestring into a bytes object containing multiple lines of base-64 data.
base64.standard_b64decode(s) [function] Decode bytes encoded with the standard Base64 alphabet.
base64.standard_b64encode(s) [function] Encode bytes-like object s using the standard Base64 alphabet.
base64.urlsafe_b64decode(s) [function] Decode bytes using the URL- and filesystem-safe Base64 alphabet.
base64.urlsafe_b64encode(s) [function] Encode bytes using the URL- and filesystem-safe Base64 alphabet.
bdb
bdb.Bdb(skip=None) [class] Generic Python debugger base class.
bdb.BdbQuit() [class] Exception to give up completely.
bdb.Breakpoint(file, line, temporary=False, cond=None, funcname=None) [class] Breakpoint class.
bin(number) Return the binary representation of an integer.
binascii
binascii.Error() [class] Inappropriate argument value (of correct type).
binascii.Incomplete() [class] Common base class for all non-exit exceptions.
binascii.a2b_base64(data) Decode a line of base64 data.
binascii.a2b_hex(hexstr) Binary data of hexadecimal representation.
binascii.a2b_hqx(data) Decode .hqx coding.
binascii.a2b_qp(data, header=False) Decode a string of qp-encoded data.
binascii.a2b_uu(data) Decode a line of uuencoded data.
binascii.b2a_base64(data, /, *, newline=True) Base64-code line of data.
binascii.b2a_hex(data) Hexadecimal representation of binary data.
binascii.b2a_hqx(data) Encode .hqx data.
binascii.b2a_qp(data, quotetabs=False, istext=True, header=False) Encode a string using quoted-printable encoding.
binascii.b2a_uu(data, /, *, backtick=False) Uuencode line of data.
binascii.crc32(data, crc=0) Compute CRC-32 incrementally.
binascii.crc_hqx(data, crc) Compute CRC-CCITT incrementally.
binascii.hexlify(data) Hexadecimal representation of binary data. The return value is a bytes object.
binascii.rlecode_hqx(data) Binhex RLE-code binary data.
binascii.rledecode_hqx(data) Decode hexbin RLE-coded string.
binascii.unhexlify(hexstr) Binary data of hexadecimal representation.
binhex
binhex.Error() [class] Common base class for all non-exit exceptions.
binhex.binhex(inp, out) [function] binhex(infilename, outfilename): create binhex-encoded copy of a file
binhex.hexbin(inp, out) [function] hexbin(infilename, outfilename) - Decode binhexed file
bisect
bisect.bisect(a, x, lo=0, hi=len(a)) bisect_right(a, x[, lo[, hi]]) -> index Return the index where to insert item x in
bisect.bisect_left(a, x, lo=0, hi=len(a)) bisect_left(a, x[, lo[, hi]]) -> index Return the index where to insert item x in
bisect.bisect_right(a, x, lo=0, hi=len(a)) bisect_right(a, x[, lo[, hi]]) -> index Return the index where to insert item x in
bisect.insort(a, x, lo=0, hi=len(a)) insort_right(a, x[, lo[, hi]]) Insert item x in list a, and keep it sorted assuming
bisect.insort_left(a, x, lo=0, hi=len(a)) insort_left(a, x[, lo[, hi]]) Insert item x in list a, and keep it sorted assuming
bisect.insort_right(a, x, lo=0, hi=len(a)) insort_right(a, x[, lo[, hi]]) Insert item x in list a, and keep it sorted assuming
bool([x]) [class] bool(x) -> bool Returns True when the argument x is true, False otherwise.
break
breakpoint(*args, **kws) breakpoint(*args, **kws) Call sys.breakpointhook(*args, **kws).
builtins
builtins.ArithmeticError() [class] Base class for arithmetic errors.
builtins.AssertionError() [class] Assertion failed.
builtins.AttributeError() [class] Attribute not found.
builtins.BaseException() [class] Common base class for all exceptions
builtins.BlockingIOError() [class] I/O operation would block.
builtins.BrokenPipeError() [class] Broken pipe.
builtins.BufferError() [class] Buffer error.
builtins.BytesWarning() [class] Base class for warnings about bytes and buffer related problems, mostly related to
builtins.ChildProcessError() [class] Child process error.
builtins.ConnectionAbortedError() [class] Connection aborted.
builtins.ConnectionError() [class] Connection error.
builtins.ConnectionRefusedError() [class] Connection refused.
builtins.ConnectionResetError() [class] Connection reset.
builtins.DeprecationWarning() [class] Base class for warnings about deprecated features.
builtins.EOFError() [class] Read beyond end of file.
builtins.Ellipsis
builtins.EnvironmentError() [class] Base class for I/O related errors.
builtins.Exception() [class] Common base class for all non-exit exceptions.
builtins.False
builtins.FileExistsError() [class] File already exists.
builtins.FileNotFoundError() [class] File not found.
builtins.FloatingPointError() [class] Floating point operation failed.
builtins.FutureWarning() [class] Base class for warnings about constructs that will change semantically in the future.
builtins.GeneratorExit() [class] Request that a generator exit.
builtins.IOError() [class] Base class for I/O related errors.
builtins.ImportError() [class] Import can't find module, or can't find name in module.
builtins.ImportWarning() [class] Base class for warnings about probable mistakes in module imports
builtins.IndentationError() [class] Improper indentation.
builtins.IndexError() [class] Sequence index out of range.
builtins.InterruptedError() [class] Interrupted by signal.
builtins.IsADirectoryError() [class] Operation doesn't work on directories.
builtins.KeyError() [class] Mapping key not found.
builtins.KeyboardInterrupt() [class] Program interrupted by user.
builtins.LookupError() [class] Base class for lookup errors.
builtins.MemoryError() [class] Out of memory.
builtins.ModuleNotFoundError() [class] Module not found.
builtins.NameError() [class] Name not found globally.
builtins.None
builtins.NotADirectoryError() [class] Operation only works on directories.
builtins.NotImplemented
builtins.NotImplementedError() [class] Method or function hasn't been implemented yet.
builtins.OSError() [class] Base class for I/O related errors.
builtins.OverflowError() [class] Result too large to be represented.
builtins.PendingDeprecationWarning() [class] Base class for warnings about features which will be deprecated in the future.
builtins.PermissionError() [class] Not enough permissions.
builtins.ProcessLookupError() [class] Process not found.
builtins.RecursionError() [class] Recursion limit exceeded.
builtins.ReferenceError() [class] Weak ref proxy used after referent went away.
builtins.ResourceWarning() [class] Base class for warnings about resource usage.
builtins.RuntimeError() [class] Unspecified run-time error.
builtins.RuntimeWarning() [class] Base class for warnings about dubious runtime behavior.
builtins.StopAsyncIteration() [class] Signal the end from iterator.__anext__().
builtins.StopIteration() [class] Signal the end from iterator.__next__().
builtins.SyntaxError() [class] Invalid syntax.
builtins.SyntaxWarning() [class] Base class for warnings about dubious syntax.
builtins.SystemError() [class] Internal error in the Python interpreter.
builtins.SystemExit() [class] Request to exit from the interpreter.
builtins.TabError() [class] Improper mixture of spaces and tabs.
builtins.TimeoutError() [class] Timeout expired.
builtins.True
builtins.TypeError() [class] Inappropriate argument type.
builtins.UnboundLocalError() [class] Local name referenced but not bound to a value.
builtins.UnicodeDecodeError() [class] Unicode decoding error.
builtins.UnicodeEncodeError() [class] Unicode encoding error.
builtins.UnicodeError() [class] Unicode related error.
builtins.UnicodeTranslateError() [class] Unicode translation error.
builtins.UnicodeWarning() [class] Base class for warnings about Unicode related problems, mostly related to conversion
builtins.UserWarning() [class] Base class for warnings generated by user code.
builtins.ValueError() [class] Inappropriate argument value (of correct type).
builtins.Warning() [class] Base class for warning categories.
builtins.WindowsError() [class] Base class for I/O related errors.
builtins.ZeroDivisionError() [class] Second argument to a division or modulo operation was zero.
builtins.abs(x) Return the absolute value of the argument.
builtins.all(iterable) Return True if bool(x) is True for all values x in the iterable.
builtins.any(iterable) Return True if bool(x) is True for any x in the iterable.
builtins.ascii(obj) Return an ASCII-only representation of an object.
builtins.bin(number) Return the binary representation of an integer.
builtins.bool([x]) [class] bool(x) -> bool Returns True when the argument x is true, False otherwise.
builtins.breakpoint(*args, **kws) breakpoint(*args, **kws) Call sys.breakpointhook(*args, **kws).
builtins.bytearray([source[, encoding[, errors]]]) [class] bytearray(iterable_of_ints) -> bytearray bytearray(string, encoding[, errors]) ->
builtins.bytes([source[, encoding[, errors]]]) [class] bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer)
builtins.callable(obj) Return whether the object is callable (i.e., some kind of function).
builtins.chr(i) Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
builtins.classmethod(function) [class] classmethod(function) -> method Convert a function to be a class method.
builtins.compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1) Compile source into a code object that can be executed by exec() or eval().
builtins.complex(real=0, imag=0) [class] Create a complex number from a real part and an optional imaginary part.
builtins.copyright() interactive prompt objects for printing the license text, a list of contributors
builtins.credits() interactive prompt objects for printing the license text, a list of contributors
builtins.delattr(obj, name) Deletes the named attribute from the given object.
builtins.dict(**kwarg) [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
builtins.dict(iterable, **kwarg) [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
builtins.dict(mapping, **kwarg) [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
builtins.dir([object]) dir([object]) -> list of strings If called without an argument, return the names
builtins.divmod(x, y) Return the tuple (x//y, x%y). Invariant: div*y + mod == x.
builtins.enumerate(iterable, start=0) [class] Return an enumerate object.
builtins.eval(source, globals=None, locals=None) Evaluate the given source in the context of globals and locals.
builtins.exec(source, globals=None, locals=None) Execute the given source in the context of globals and locals.
builtins.exit(code=None)
builtins.filter(function, iterable) [class] filter(function or None, iterable) --> filter object Return an iterator yielding
builtins.float(x=0) [class] Convert a string or number to a floating point number, if possible.
builtins.format(value, format_spec='') Return value.__format__(format_spec) format_spec defaults to the empty string.
builtins.frozenset([iterable]) [class] frozenset() -> empty frozenset object frozenset(iterable) -> frozenset object Build
builtins.getattr(object, name[, default]) getattr(object, name[, default]) -> value Get a named attribute from an object; getattr(x,
builtins.globals() Return the dictionary containing the current scope's global variables.
builtins.hasattr(obj, name) Return whether the object has an attribute with the given name.
builtins.hash(obj) Return the hash value for the given object.
builtins.help(*args, **kwds) Define the builtin 'help'.
builtins.hex(number) Return the hexadecimal representation of an integer.
builtins.id(obj) Return the identity of an object.
builtins.input(prompt=None) Read a string from standard input.
builtins.int([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
builtins.int(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
builtins.isinstance(obj, class_or_tuple) Return whether an object is an instance of a class or of a subclass thereof.
builtins.issubclass(cls, class_or_tuple) Return whether 'cls' is a derived from another class or is the same class.
builtins.iter(object[, sentinel]) iter(iterable) -> iterator iter(callable, sentinel) -> iterator Get an iterator from
builtins.len(obj) Return the number of items in a container.
builtins.license() interactive prompt objects for printing the license text, a list of contributors
builtins.list(iterable=()) [class] Built-in mutable sequence.
builtins.locals() Return a dictionary containing the current scope's local variables.
builtins.map(function, iterable, ...) [class] map(func, *iterables) --> map object Make an iterator that computes the function
builtins.max(arg1, arg2, *args[, key]) max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func])
builtins.max(iterable, *[, key, default]) max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func])
builtins.memoryview(object) [class] Create a new memoryview object which references the given object.
builtins.min(arg1, arg2, *args[, key]) min(iterable, *[, default=obj, key=func]) -> value min(arg1, arg2, *args, *[, key=func])
builtins.min(iterable, *[, key, default]) min(iterable, *[, default=obj, key=func]) -> value min(arg1, arg2, *args, *[, key=func])
builtins.next(iterator[, default]) next(iterator[, default]) Return the next item from the iterator.
builtins.object() [class] The most base type
builtins.oct(number) Return the octal representation of an integer.
builtins.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) Open file and return a stream.
builtins.ord(c) Return the Unicode code point for a one-character string.
builtins.pow(x, y, z=None) Equivalent to x**y (with two arguments) or x**y % z (with three arguments) Some types,
builtins.print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False) print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False) Prints the values
builtins.property(fget=None, fset=None, fdel=None, doc=None) [class] Property attribute.
builtins.quit(code=None)
builtins.range(start, stop[, step]) [class] range(stop) -> range object range(start, stop[, step]) -> range object Return an
builtins.range(stop) [class] range(stop) -> range object range(start, stop[, step]) -> range object Return an
builtins.repr(obj) Return the canonical string representation of the object.
builtins.reversed(sequence) [class] Return a reverse iterator over the values of the given sequence.
builtins.round(number, ndigits=None) Round a number to a given precision in decimal digits.
builtins.set([iterable]) [class] set() -> new empty set object set(iterable) -> new set object Build an unordered
builtins.setattr(obj, name, value) Sets the named attribute on the given object to the specified value.
builtins.slice(start, stop[, step]) [class] slice(stop) slice(start, stop[, step]) Create a slice object.
builtins.slice(stop) [class] slice(stop) slice(start, stop[, step]) Create a slice object.
builtins.sorted(iterable, /, *, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.
builtins.staticmethod(function) [class] staticmethod(function) -> method Convert a function to be a static method.
builtins.str(object='') [class] str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a
builtins.str(object=b'', encoding='utf-8', errors='strict') [class] str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a
builtins.sum(iterable, start=0) Return the sum of a 'start' value (default: 0) plus an iterable of numbers When the
builtins.super([type[, object-or-type]]) [class] super() -> same as super(__class__, <first argument>) super(type) -> unbound super
builtins.tuple(iterable=()) [class] Built-in immutable sequence.
builtins.type(name, bases, dict) [class] type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases,
builtins.type(object) [class] type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases,
builtins.vars([object]) vars([object]) -> dictionary Without arguments, equivalent to locals().
builtins.zip(*iterables) [class] zip(iter1 [,iter2 [...]]) --> zip object Return a zip object whose .__next__() method
bytearray([source[, encoding[, errors]]]) [class] bytearray(iterable_of_ints) -> bytearray bytearray(string, encoding[, errors]) ->
bytes([source[, encoding[, errors]]]) [class] bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer)
bz2
bz2.BZ2Compressor(compresslevel=9) [class] Create a compressor object for compressing data incrementally.
bz2.BZ2Decompressor() [class] Create a decompressor object for decompressing data incrementally.
bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9) [class] A file object providing transparent bzip2 (de)compression.
bz2.compress(data, compresslevel=9) [function] Compress a block of data.
bz2.decompress(data) [function] Decompress a block of data.
bz2.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None) [function] Open a bzip2-compressed file in binary or text mode.
cProfile
cProfile.Profile(timer=None, timeunit=0.0, subcalls=True, builtins=True) [class] Profile(timer=None, timeunit=None, subcalls=True, builtins=True) Builds a profiler
cProfile.run(statement, filename=None, sort=-1) [function] Run statement under profiler optionally saving results in filename This function
cProfile.runctx(statement, globals, locals, filename=None, sort=-1) [function] Run statement under profiler, supplying your own globals and locals, optionally saving
calendar
calendar.Calendar(firstweekday=0) [class] Base calendar class.
calendar.HTMLCalendar(firstweekday=0) [class] This calendar returns complete HTML pages.
calendar.IllegalMonthError(month) [class] Inappropriate argument value (of correct type).
calendar.IllegalWeekdayError(weekday) [class] Inappropriate argument value (of correct type).
calendar.LocaleHTMLCalendar(firstweekday=0, locale=None) [class] This class can be passed a locale name in the constructor and will return month and
calendar.LocaleTextCalendar(firstweekday=0, locale=None) [class] This class can be passed a locale name in the constructor and will return month and
calendar.TextCalendar(firstweekday=0) [class] Subclass of Calendar that outputs a calendar as a simple plain text similar to the
calendar.calendar(theyear, w=2, l=1, c=6, m=3) [method] Returns a year's calendar as a multi-line string.
calendar.day_abbr
calendar.day_name
calendar.firstweekday() [method]
calendar.isleap(year) [function] Return True for leap years, False for non-leap years.
calendar.leapdays(y1, y2) [function] Return number of leap years in range [y1, y2). Assume y1 <= y2.
calendar.month(theyear, themonth, w=0, l=0) [method] Return a month's calendar string (multi-line).
calendar.month_abbr
calendar.month_name
calendar.monthcalendar(year, month) [method] Return a matrix representing a month's calendar.
calendar.monthrange(year, month) [function] Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for year, month.
calendar.prcal(theyear, w=0, l=0, c=6, m=3) [method] Print a year's calendar.
calendar.prmonth(theyear, themonth, w=0, l=0) [method] Print a month's calendar.
calendar.setfirstweekday(firstweekday) [function]
calendar.timegm(tuple) [function] Unrelated but handy function to calculate Unix timestamp from GMT.
calendar.weekday(year, month, day) [function] Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).
calendar.weekheader(width) [method] Return a header for a week.
callable(obj) Return whether the object is callable (i.e., some kind of function).
cgi
cgi.FieldStorage(fp=None, headers=None, outerboundary=b'', environ=os.environ, keep_blank_values=0, strict_parsing=0, limit=None, encoding='utf-8', errors='replace', max_num_fields=None) [class] Store a sequence of fields, reading multipart/form-data.
cgi.MiniFieldStorage(name, value) [class] Like FieldStorage, for use when no file uploads are possible.
cgi.escape(s, quote=None) [function] Deprecated API.
cgi.parse(fp=None, environ=os.environ, keep_blank_values=0, strict_parsing=0) [function] Parse a query in the environment or from a file (default stdin) Arguments, all optional:
cgi.parse_header(line) [function] Parse a Content-type like header.
cgi.parse_multipart(fp, pdict, encoding='utf-8', errors='replace') [function] Parse multipart input.
cgi.parse_qs(qs, keep_blank_values=0, strict_parsing=0) [function] Parse a query given as a string argument.
cgi.parse_qsl(qs, keep_blank_values=0, strict_parsing=0) [function] Parse a query given as a string argument.
cgi.print_arguments() [function]
cgi.print_directory() [function] Dump the current directory as HTML.
cgi.print_environ(environ=os.environ) [function] Dump the shell environment as HTML.
cgi.print_environ_usage() [function] Dump a list of environment variables used by CGI as HTML.
cgi.print_exception(type=None, value=None, tb=None, limit=None) [function]
cgi.print_form(form) [function] Dump the contents of a form as HTML.
cgi.test(environ=os.environ) [function] Robust test CGI script, usable as main program.
cgitb
cgitb.Hook(display=1, logdir=None, context=5, file=None, format='html') [class] A hook to replace sys.excepthook that shows tracebacks in HTML.
cgitb.enable(display=1, logdir=None, context=5, format='html') [function] Install an exception handler that formats tracebacks as HTML.
cgitb.grey(text) [function]
cgitb.handler(info=None) [method]
cgitb.html(einfo, context=5) [function] Return a nice HTML document describing a given traceback.
cgitb.lookup(name, frame, locals) [function] Find the value for a given name in the given environment.
cgitb.reset() [function] Return a string that resets the CGI and browser to a known state.
cgitb.scanvars(reader, frame, locals) [function] Scan one logical line of Python and look up values of variables used.
cgitb.small(text) [function]
cgitb.strong(text) [function]
cgitb.text(einfo, context=5) [function] Return a plain text document describing a given traceback.
chr(i) Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
chunk
chunk.Chunk(file, align=True, bigendian=True, inclheader=False) [class]
class
classmethod(function) [class] classmethod(function) -> method Convert a function to be a class method.
cmath
cmath.acos(z) Return the arc cosine of z.
cmath.acosh(z) Return the inverse hyperbolic cosine of z.
cmath.asin(z) Return the arc sine of z.
cmath.asinh(z) Return the inverse hyperbolic sine of z.
cmath.atan(z) Return the arc tangent of z.
cmath.atanh(z) Return the inverse hyperbolic tangent of z.
cmath.cos(z) Return the cosine of z.
cmath.cosh(z) Return the hyperbolic cosine of z.
cmath.e
cmath.exp(z) Return the exponential value e**z.
cmath.inf
cmath.infj
cmath.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) Determine whether two complex numbers are close in value.
cmath.isfinite(z) Return True if both the real and imaginary parts of z are finite, else False.
cmath.isinf(z) Checks if the real or imaginary part of z is infinite.
cmath.isnan(z) Checks if the real or imaginary part of z not a number (NaN).
cmath.log(x, y_obj=None) The logarithm of z to the given base.
cmath.log10(z) Return the base-10 logarithm of z.
cmath.nan
cmath.nanj
cmath.phase(z) Return argument, also known as the phase angle, of a complex.
cmath.pi
cmath.polar(z) Convert a complex from rectangular coordinates to polar coordinates.
cmath.rect(r, phi) Convert from polar coordinates to rectangular coordinates.
cmath.sin(z) Return the sine of z.
cmath.sinh(z) Return the hyperbolic sine of z.
cmath.sqrt(z) Return the square root of z.
cmath.tan(z) Return the tangent of z.
cmath.tanh(z) Return the hyperbolic tangent of z.
cmath.tau
cmd
cmd.Cmd(completekey='tab', stdin=None, stdout=None) [class] A simple framework for writing line-oriented command interpreters.
code
code.InteractiveConsole(locals=None, filename='<console>') [class] Closely emulate the behavior of the interactive Python interpreter.
code.InteractiveInterpreter(locals=None) [class] Base class for InteractiveConsole.
code.compile_command(source, filename='<input>', symbol='single') [function] Compile a command and determine whether it is incomplete.
code.interact(banner=None, readfunc=None, local=None, exitmsg=None) [function] Closely emulate the interactive Python interpreter.
codecs
codecs.BOM
codecs.BOM32_BE
codecs.BOM32_LE
codecs.BOM64_BE
codecs.BOM64_LE
codecs.BOM_BE
codecs.BOM_LE
codecs.BOM_UTF16
codecs.BOM_UTF16_BE
codecs.BOM_UTF16_LE
codecs.BOM_UTF32
codecs.BOM_UTF32_BE
codecs.BOM_UTF32_LE
codecs.BOM_UTF8
codecs.Codec() [class] Defines the interface for stateless encoders/decoders.
codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None, *, _is_text_encoding=None) [class] Codec details when looking up the codec registry
codecs.EncodedFile(file, data_encoding, file_encoding=None, errors='strict') [function] Return a wrapped version of file which provides transparent encoding translation.
codecs.IncrementalDecoder(errors='strict') [class] An IncrementalDecoder decodes an input in multiple steps.
codecs.IncrementalEncoder(errors='strict') [class] An IncrementalEncoder encodes an input in multiple steps.
codecs.StreamReader(stream, errors='strict') [class] Defines the interface for stateless encoders/decoders.
codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict') [class] StreamReaderWriter instances allow wrapping streams which work in both read and write
codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict') [class] StreamRecoder instances translate data from one encoding to another.
codecs.StreamWriter(stream, errors='strict') [class] Defines the interface for stateless encoders/decoders.
codecs.backslashreplace_errors(exception) Implements the 'backslashreplace' error handling, which replaces malformed data with
codecs.decode(obj, encoding='utf-8', errors='strict') Decodes obj using the codec registered for encoding. Default encoding is 'utf-8'.
codecs.encode(obj, encoding='utf-8', errors='strict') Encodes obj using the codec registered for encoding. The default encoding is 'utf-8'.
codecs.getdecoder(encoding) [function] Lookup up the codec for the given encoding and return its decoder function.
codecs.getencoder(encoding) [function] Lookup up the codec for the given encoding and return its encoder function.
codecs.getincrementaldecoder(encoding) [function] Lookup up the codec for the given encoding and return its IncrementalDecoder class
codecs.getincrementalencoder(encoding) [function] Lookup up the codec for the given encoding and return its IncrementalEncoder class
codecs.getreader(encoding) [function] Lookup up the codec for the given encoding and return its StreamReader class or factory
codecs.getwriter(encoding) [function] Lookup up the codec for the given encoding and return its StreamWriter class or factory
codecs.ignore_errors(exception) Implements the 'ignore' error handling, which ignores malformed data and continues.
codecs.iterdecode(iterator, encoding, errors='strict', **kwargs) [function] Decoding iterator. Decodes the input strings from the iterator using an IncrementalDecoder.
codecs.iterencode(iterator, encoding, errors='strict', **kwargs) [function] Encoding iterator. Encodes the input strings from the iterator using an IncrementalEncoder.
codecs.lookup(encoding) Looks up a codec tuple in the Python codec registry and returns a CodecInfo object.
codecs.lookup_error(name) lookup_error(errors) -> handler Return the error handler for the specified error
codecs.namereplace_errors(exception) Implements the 'namereplace' error handling, which replaces an unencodable character
codecs.open(filename, mode='r', encoding=None, errors='strict', buffering=1) [function] Open an encoded file using the given mode and return a wrapped version providing
codecs.register(search_function) Register a codec search function.
codecs.register_error(errors, handler) Register the specified error handler under the name errors.
codecs.replace_errors(exception) Implements the 'replace' error handling, which replaces malformed data with a replacement
codecs.strict_errors(exception) Implements the 'strict' error handling, which raises a UnicodeError on coding errors.
codecs.xmlcharrefreplace_errors(exception) Implements the 'xmlcharrefreplace' error handling, which replaces an unencodable
codeop
codeop.CommandCompiler() [class] Instances of this class have __call__ methods identical in signature to compile_command;
codeop.Compile() [class] Instances of this class behave much like the built-in compile function, but if one
codeop.compile_command(source, filename='<input>', symbol='single') [function] Compile a command and determine whether it is incomplete.
collections
collections.ChainMap(*maps) [class] A ChainMap groups multiple dicts (or other mappings) together to create a single,
collections.Counter(*args, **kwds) [class] Dict subclass for counting hashable items.
collections.OrderedDict([items]) [class] Dictionary that remembers insertion order
collections.UserDict(*args, **kwargs) [class]
collections.UserList(initlist=None) [class] A more or less complete user-defined wrapper around list objects.
collections.UserString(seq) [class] All the operations on a read-only sequence.
collections.abc
collections.abc.AsyncGenerator() [class]
collections.abc.AsyncIterable() [class]
collections.abc.AsyncIterator() [class]
collections.abc.Awaitable() [class]
collections.abc.ByteString() [class] This unifies bytes and bytearray. XXX Should add all their methods.
collections.abc.Callable() [class]
collections.abc.Collection() [class]
collections.abc.Container() [class]
collections.abc.Coroutine() [class]
collections.abc.Generator() [class]
collections.abc.Hashable() [class]
collections.abc.ItemsView(mapping) [class] A set is a finite, iterable container.
collections.abc.Iterable() [class]
collections.abc.Iterator() [class]
collections.abc.KeysView(mapping) [class] A set is a finite, iterable container.
collections.abc.Mapping() [class]
collections.abc.MappingView(mapping) [class]
collections.abc.MutableMapping() [class]
collections.abc.MutableSequence() [class] All the operations on a read-only sequence.
collections.abc.MutableSet() [class] A mutable set is a finite, iterable container.
collections.abc.Reversible() [class]
collections.abc.Sequence() [class] All the operations on a read-only sequence.
collections.abc.Set() [class] A set is a finite, iterable container.
collections.abc.Sized() [class]
collections.abc.ValuesView(mapping) [class]
collections.defaultdict([default_factory[, ...]]) [class] defaultdict(default_factory[, ...]) --> dict with default factory The default factory
collections.deque([iterable[, maxlen]]) [class] deque([iterable[, maxlen]]) --> deque object A list-like sequence optimized for data
collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None) [function] Returns a new subclass of tuple with named fields.
colorsys
colorsys.hls_to_rgb(h, l, s) [function]
colorsys.hsv_to_rgb(h, s, v) [function]
colorsys.rgb_to_hls(r, g, b) [function]
colorsys.rgb_to_hsv(r, g, b) [function]
colorsys.rgb_to_yiq(r, g, b) [function]
colorsys.yiq_to_rgb(y, i, q) [function]
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1) Compile source into a code object that can be executed by exec() or eval().
compileall
compileall.compile_dir(dir, maxlevels=10, ddir=None, force=False, rx=None, quiet=0, legacy=False, optimize=-1, workers=1, invalidation_mode=None) [function] Byte-compile all modules in the given directory tree.
compileall.compile_file(fullname, ddir=None, force=False, rx=None, quiet=0, legacy=False, optimize=-1, invalidation_mode=None) [function] Byte-compile one file.
compileall.compile_path(skip_curdir=1, maxlevels=0, force=False, quiet=0, legacy=False, optimize=-1, invalidation_mode=None) [function] Byte-compile all module on sys.path.
complex(real=0, imag=0) [class] Create a complex number from a real part and an optional imaginary part.
concurrent
concurrent.futures
concurrent.futures.ALL_COMPLETED
concurrent.futures.BrokenExecutor() [class] Raised when a executor has become non-functional after a severe failure.
concurrent.futures.CancelledError() [class] The Future was cancelled.
concurrent.futures.Executor() [class] This is an abstract base class for concrete asynchronous executors.
concurrent.futures.FIRST_COMPLETED
concurrent.futures.FIRST_EXCEPTION
concurrent.futures.Future() [class] Represents the result of an asynchronous computation.
concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None, initializer=None, initargs=()) [class] This is an abstract base class for concrete asynchronous executors.
concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix='', initializer=None, initargs=()) [class] This is an abstract base class for concrete asynchronous executors.
concurrent.futures.TimeoutError() [class] The operation exceeded the given deadline.
concurrent.futures.as_completed(fs, timeout=None) [function] An iterator over the given futures that yields each as it completes.
concurrent.futures.wait(fs, timeout=None, return_when='ALL_COMPLETED') [function] Wait for the futures in the given sequence to complete.
configparser
configparser.BasicInterpolation() [class] Interpolation as implemented in the classic ConfigParser.
configparser.ConfigParser(defaults=None, dict_type=<??>, allow_no_value=False, *, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section='DEFAULT', interpolation=<??>, converters=<??>) [class] ConfigParser implementing interpolation.
configparser.ConverterMapping(parser) [class] Enables reuse of get*() methods between the parser and section proxies.
configparser.DEFAULTSECT
configparser.DuplicateOptionError(section, option, source=None, lineno=None) [class] Raised by strict parsers when an option is repeated in an input source.
configparser.DuplicateSectionError(section, source=None, lineno=None) [class] Raised when a section is repeated in an input source.
configparser.ExtendedInterpolation() [class] Advanced variant of interpolation, supports the syntax used by `zc.buildout'.
configparser.Interpolation() [class] Dummy interpolation that passes the value through with no changes.
configparser.InterpolationDepthError(option, section, rawval) [class] Raised when substitutions are nested too deeply.
configparser.InterpolationError(option, section, msg) [class] Base class for interpolation-related exceptions.
configparser.InterpolationMissingOptionError(option, section, rawval, reference) [class] A string substitution required a setting which was not available.
configparser.InterpolationSyntaxError(option, section, msg) [class] Raised when the source text contains invalid syntax.
configparser.LegacyInterpolation() [class] Deprecated interpolation used in old versions of ConfigParser.
configparser.MAX_INTERPOLATION_DEPTH
configparser.MissingSectionHeaderError(filename, lineno, line) [class] Raised when a key-value pair is found before any section header.
configparser.NoOptionError(option, section) [class] A requested option was not found.
configparser.NoSectionError(section) [class] Raised when no section matches a requested option.
configparser.ParsingError(source=None, filename=None) [class] Raised when a configuration file does not follow legal syntax.
configparser.RawConfigParser(defaults=None, dict_type=<??>, allow_no_value=False, *, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section='DEFAULT', interpolation=<??>, converters=<??>) [class] ConfigParser that does not do interpolation.
configparser.SafeConfigParser(*args, **kwargs) [class] ConfigParser alias for backwards compatibility purposes.
configparser.SectionProxy(parser, name) [class] A proxy for a single section from a parser.
contextlib
contextlib.AbstractAsyncContextManager() [class] An abstract base class for asynchronous context managers.
contextlib.AbstractContextManager() [class] An abstract base class for context managers.
contextlib.AsyncExitStack() [class] Async context manager for dynamic management of a stack of exit callbacks.
contextlib.ContextDecorator() [class] A base class or mixin that enables context managers to work as decorators.
contextlib.ExitStack() [class] Context manager for dynamic management of a stack of exit callbacks.
contextlib.asynccontextmanager(func) [function] @asynccontextmanager decorator.
contextlib.closing(thing) [class] Context to automatically close something at the end of a block.
contextlib.contextmanager(func) [function] @contextmanager decorator.
contextlib.nullcontext(enter_result=None) [class] Context manager that does no additional processing.
contextlib.redirect_stderr(new_target) [class] Context manager for temporarily redirecting stderr to another file.
contextlib.redirect_stdout(new_target) [class] Context manager for temporarily redirecting stdout to another file.
contextlib.suppress(*exceptions) [class] Context manager to suppress specified exceptions After the exception is suppressed,
contextvars
contextvars.Context() [class]
contextvars.ContextVar(name[, *, default]) [class]
contextvars.Token() [class]
contextvars.copy_context()
continue
copy
copy.Error() [class] Common base class for all non-exit exceptions.
copy.copy(x) [function] Shallow copy operation on arbitrary Python objects.
copy.deepcopy(x, memo=None, _nil=[]) [function] Deep copy operation on arbitrary Python objects.
copyreg
copyreg.add_extension(module, name, code) [function] Register an extension code.
copyreg.clear_extension_cache() [function]
copyreg.constructor(object) [function]
copyreg.pickle(ob_type, pickle_function, constructor_ob=None) [function]
copyreg.remove_extension(module, name, code) [function] Unregister an extension code. For testing only.
copyright() interactive prompt objects for printing the license text, a list of contributors
credits() interactive prompt objects for printing the license text, a list of contributors
csv
csv.Dialect() [class] Describe a CSV dialect.
csv.DictReader(f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds) [class]
csv.DictWriter(f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds) [class]
csv.Error() [class] Common base class for all non-exit exceptions.
csv.QUOTE_ALL
csv.QUOTE_MINIMAL
csv.QUOTE_NONE
csv.QUOTE_NONNUMERIC
csv.Sniffer() [class] "Sniffs" the format of a CSV file (i.e. delimiter, quotechar) Returns a Dialect object.
csv.excel() [class] Describe the usual properties of Excel-generated CSV files.
csv.excel_tab() [class] Describe the usual properties of Excel-generated TAB-delimited files.
csv.field_size_limit([new_limit]) Sets an upper limit on parsed fields. csv.field_size_limit([limit]) Returns old limit.
csv.get_dialect(name) Return the dialect instance associated with name.
csv.list_dialects() Return a list of all know dialect names.
csv.reader(csvfile, dialect='excel', **fmtparams) csv_reader = reader(iterable [, dialect='excel'] [optional keyword args]) for row
csv.register_dialect(name[, dialect[, **fmtparams]]) Create a mapping from a string name to a dialect class.
csv.unix_dialect() [class] Describe the usual properties of Unix-generated CSV files.
csv.unregister_dialect(name) Delete the name/dialect mapping associated with a string name.
csv.writer(csvfile, dialect='excel', **fmtparams) csv_writer = csv.writer(fileobj [, dialect='excel'] [optional keyword args]) for
ctypes
ctypes.ARRAY(typ, len) [function]
ctypes.ArgumentError() [class] Common base class for all non-exit exceptions.
ctypes.Array(*args) [class]
ctypes.BigEndianStructure(*args, **kw) [class] Structure with big endian byte order
ctypes.CDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False) [class] An instance of this class represents a loaded dll/shared library, exporting functions
ctypes.CFUNCTYPE(restype, *argtypes, **kw) [function] CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False) -> function
ctypes.DEFAULT_MODE
ctypes.DllCanUnloadNow() [function]
ctypes.DllGetClassObject(rclsid, riid, ppv) [function]
ctypes.FormatError([code]) FormatError([integer]) -> string Convert a win32 error code into a string.
ctypes.GetLastError()
ctypes.HRESULT() [class]
ctypes.LibraryLoader(dlltype) [class]
ctypes.LittleEndianStructure(*args, **kw) [class] Structure base class
ctypes.OleDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False) [class] This class represents a dll exporting functions using the Windows stdcall calling
ctypes.POINTER(type)
ctypes.PYFUNCTYPE(restype, *argtypes) [function]
ctypes.PyDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False) [class] This class represents the Python library itself. It allows accessing Python API functions.
ctypes.RTLD_GLOBAL
ctypes.RTLD_LOCAL
ctypes.SetPointerType(pointer, cls) [function]
ctypes.Structure(*args, **kw) [class] Structure base class
ctypes.Union(*args, **kw) [class] Union base class
ctypes.WINFUNCTYPE(restype, *argtypes, **kw) [function]
ctypes.WinDLL(name, mode=0, handle=None, use_errno=False, use_last_error=False) [class] This class represents a dll exporting functions using the Windows stdcall calling
ctypes.WinError(code=None, descr=None) [function]
ctypes.addressof(obj) addressof(C instance) -> integer Return the address of the C instance internal buffer
ctypes.alignment(obj_or_type) alignment(C type) -> integer alignment(C instance) -> integer Return the alignment
ctypes.byref(obj[, offset]) byref(C instance[, offset=0]) -> byref-object Return a pointer lookalike to a C instance,
ctypes.c_bool() [class]
ctypes.c_buffer(init, size=None) [function]
ctypes.c_byte() [class]
ctypes.c_char() [class]
ctypes.c_char_p() [class]
ctypes.c_double() [class]
ctypes.c_float() [class]
ctypes.c_int() [class]
ctypes.c_int16() [class]
ctypes.c_int32() [class]
ctypes.c_int64() [class]
ctypes.c_int8() [class]
ctypes.c_long() [class]
ctypes.c_longdouble() [class]
ctypes.c_longlong() [class]
ctypes.c_short() [class]
ctypes.c_size_t() [class]
ctypes.c_ssize_t() [class]
ctypes.c_ubyte() [class]
ctypes.c_uint() [class]
ctypes.c_uint16() [class]
ctypes.c_uint32() [class]
ctypes.c_uint64() [class]
ctypes.c_uint8() [class]
ctypes.c_ulong() [class]
ctypes.c_ulonglong() [class]
ctypes.c_ushort() [class]
ctypes.c_void_p() [class]
ctypes.c_voidp() [class]
ctypes.c_wchar() [class]
ctypes.c_wchar_p() [class]
ctypes.cast(obj, typ) [function]
ctypes.cdll
ctypes.create_string_buffer(init, size=None) [function] create_string_buffer(aBytes) -> character array create_string_buffer(anInteger) ->
ctypes.create_unicode_buffer(init, size=None) [function] create_unicode_buffer(aString) -> character array create_unicode_buffer(anInteger)
ctypes.get_errno()
ctypes.get_last_error()
ctypes.memmove(dst, src, count)
ctypes.memset(dst, c, count)
ctypes.oledll
ctypes.pointer(obj)
ctypes.py_object() [class]
ctypes.pydll
ctypes.pythonapi
ctypes.resize(obj, size) Resize the memory buffer of a ctypes instance
ctypes.set_errno()
ctypes.set_last_error()
ctypes.sizeof(obj_or_type) sizeof(C type) -> integer sizeof(C instance) -> integer Return the size in bytes
ctypes.string_at(ptr, size=-1) [function] string_at(addr[, size]) -> string Return the string at addr.
ctypes.util
ctypes.util._get_build_version() [function] Return the version of MSVC that was used to build Python.
ctypes.util.find_library(name) [function]
ctypes.util.find_msvcrt() [function] Return the name of the VC runtime dll
ctypes.util.test() [function]
ctypes.windll
ctypes.wintypes
ctypes.wintypes.ATOM() [class]
ctypes.wintypes.BOOL() [class]
ctypes.wintypes.BOOLEAN() [class]
ctypes.wintypes.BYTE() [class]
ctypes.wintypes.CHAR() [class]
ctypes.wintypes.COLORREF() [class]
ctypes.wintypes.DOUBLE() [class]
ctypes.wintypes.DWORD() [class]
ctypes.wintypes.FILETIME() [class] Structure base class
ctypes.wintypes.FLOAT() [class]
ctypes.wintypes.HACCEL() [class]
ctypes.wintypes.HANDLE() [class]
ctypes.wintypes.HBITMAP() [class]
ctypes.wintypes.HBRUSH() [class]
ctypes.wintypes.HCOLORSPACE() [class]
ctypes.wintypes.HDC() [class]
ctypes.wintypes.HDESK() [class]
ctypes.wintypes.HDWP() [class]
ctypes.wintypes.HENHMETAFILE() [class]
ctypes.wintypes.HFONT() [class]
ctypes.wintypes.HGDIOBJ() [class]
ctypes.wintypes.HGLOBAL() [class]
ctypes.wintypes.HHOOK() [class]
ctypes.wintypes.HICON() [class]
ctypes.wintypes.HINSTANCE() [class]
ctypes.wintypes.HKEY() [class]
ctypes.wintypes.HKL() [class]
ctypes.wintypes.HLOCAL() [class]
ctypes.wintypes.HMENU() [class]
ctypes.wintypes.HMETAFILE() [class]
ctypes.wintypes.HMODULE() [class]
ctypes.wintypes.HMONITOR() [class]
ctypes.wintypes.HPALETTE() [class]
ctypes.wintypes.HPEN() [class]
ctypes.wintypes.HRGN() [class]
ctypes.wintypes.HRSRC() [class]
ctypes.wintypes.HSTR() [class]
ctypes.wintypes.HTASK() [class]
ctypes.wintypes.HWINSTA() [class]
ctypes.wintypes.HWND() [class]
ctypes.wintypes.INT() [class]
ctypes.wintypes.LANGID() [class]
ctypes.wintypes.LARGE_INTEGER() [class]
ctypes.wintypes.LCID() [class]
ctypes.wintypes.LCTYPE() [class]
ctypes.wintypes.LGRPID() [class]
ctypes.wintypes.LONG() [class]
ctypes.wintypes.LPARAM() [class]
ctypes.wintypes.LPBOOL() [class]
ctypes.wintypes.LPBYTE() [class]
ctypes.wintypes.LPCOLESTR() [class]
ctypes.wintypes.LPCOLORREF() [class]
ctypes.wintypes.LPCSTR() [class]
ctypes.wintypes.LPCVOID() [class]
ctypes.wintypes.LPCWSTR() [class]
ctypes.wintypes.LPDWORD() [class]
ctypes.wintypes.LPFILETIME() [class]
ctypes.wintypes.LPHANDLE() [class]
ctypes.wintypes.LPHKL() [class]
ctypes.wintypes.LPINT() [class]
ctypes.wintypes.LPLONG() [class]
ctypes.wintypes.LPMSG() [class]
ctypes.wintypes.LPOLESTR() [class]
ctypes.wintypes.LPPOINT() [class]
ctypes.wintypes.LPRECT() [class]
ctypes.wintypes.LPRECTL() [class]
ctypes.wintypes.LPSC_HANDLE() [class]
ctypes.wintypes.LPSIZE() [class]
ctypes.wintypes.LPSIZEL() [class]
ctypes.wintypes.LPSTR() [class]
ctypes.wintypes.LPUINT() [class]
ctypes.wintypes.LPVOID() [class]
ctypes.wintypes.LPWIN32_FIND_DATAA() [class]
ctypes.wintypes.LPWIN32_FIND_DATAW() [class]
ctypes.wintypes.LPWORD() [class]
ctypes.wintypes.LPWSTR() [class]
ctypes.wintypes.MAX_PATH
ctypes.wintypes.MSG() [class] Structure base class
ctypes.wintypes.OLESTR() [class]
ctypes.wintypes.PBOOL() [class]
ctypes.wintypes.PBOOLEAN() [class]
ctypes.wintypes.PBYTE() [class]
ctypes.wintypes.PCHAR() [class]
ctypes.wintypes.PDWORD() [class]
ctypes.wintypes.PFILETIME() [class]
ctypes.wintypes.PFLOAT() [class]
ctypes.wintypes.PHANDLE() [class]
ctypes.wintypes.PHKEY() [class]
ctypes.wintypes.PINT() [class]
ctypes.wintypes.PLARGE_INTEGER() [class]
ctypes.wintypes.PLCID() [class]
ctypes.wintypes.PLONG() [class]
ctypes.wintypes.PMSG() [class]
ctypes.wintypes.POINT() [class] Structure base class
ctypes.wintypes.POINTL() [class] Structure base class
ctypes.wintypes.PPOINT() [class]
ctypes.wintypes.PPOINTL() [class]
ctypes.wintypes.PRECT() [class]
ctypes.wintypes.PRECTL() [class]
ctypes.wintypes.PSHORT() [class]
ctypes.wintypes.PSIZE() [class]
ctypes.wintypes.PSIZEL() [class]
ctypes.wintypes.PSMALL_RECT() [class]
ctypes.wintypes.PUINT() [class]
ctypes.wintypes.PULARGE_INTEGER() [class]
ctypes.wintypes.PULONG() [class]
ctypes.wintypes.PUSHORT() [class]
ctypes.wintypes.PWCHAR() [class]
ctypes.wintypes.PWIN32_FIND_DATAA() [class]
ctypes.wintypes.PWIN32_FIND_DATAW() [class]
ctypes.wintypes.PWORD() [class]
ctypes.wintypes.RECT() [class] Structure base class
ctypes.wintypes.RECTL() [class] Structure base class
ctypes.wintypes.RGB(red, green, blue) [function]
ctypes.wintypes.SC_HANDLE() [class]
ctypes.wintypes.SERVICE_STATUS_HANDLE() [class]
ctypes.wintypes.SHORT() [class]
ctypes.wintypes.SIZE() [class] Structure base class
ctypes.wintypes.SIZEL() [class] Structure base class
ctypes.wintypes.SMALL_RECT() [class] Structure base class
ctypes.wintypes.UINT() [class]
ctypes.wintypes.ULARGE_INTEGER() [class]
ctypes.wintypes.ULONG() [class]
ctypes.wintypes.USHORT() [class]
ctypes.wintypes.VARIANT_BOOL() [class]
ctypes.wintypes.WCHAR() [class]
ctypes.wintypes.WIN32_FIND_DATAA() [class] Structure base class
ctypes.wintypes.WIN32_FIND_DATAW() [class] Structure base class
ctypes.wintypes.WORD() [class]
ctypes.wintypes.WPARAM() [class]
ctypes.wintypes._COORD() [class] Structure base class
ctypes.wintypes._FILETIME() [class] Structure base class
ctypes.wintypes._LARGE_INTEGER() [class]
ctypes.wintypes._POINTL() [class] Structure base class
ctypes.wintypes._RECTL() [class] Structure base class
ctypes.wintypes._SMALL_RECT() [class] Structure base class
ctypes.wintypes._ULARGE_INTEGER() [class]
ctypes.wintypes.tagMSG() [class] Structure base class
ctypes.wintypes.tagPOINT() [class] Structure base class
ctypes.wintypes.tagRECT() [class] Structure base class
ctypes.wintypes.tagSIZE() [class] Structure base class
ctypes.wstring_at(ptr, size=-1) [function] wstring_at(addr[, size]) -> string Return the string at addr.
dataclasses
dataclasses.Field(default, default_factory, init, repr, hash, compare, metadata) [class]
dataclasses.FrozenInstanceError() [class] Attribute not found.
dataclasses.InitVar() [class]
dataclasses.MISSING
dataclasses.asdict(obj, *, dict_factory=<??>) [function] Return the fields of a dataclass instance as a new dictionary mapping field names
dataclasses.astuple(obj, *, tuple_factory=<??>) [function] Return the fields of a dataclass instance as a new tuple of field values.
dataclasses.dataclass(_cls=None, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False) [function] Returns the same class as was passed in, with dunder methods added based on the fields
dataclasses.field(*, default=<??>, default_factory=<??>, init=True, repr=True, hash=None, compare=True, metadata=None) [function] Return an object to identify dataclass fields.
dataclasses.fields(class_or_instance) [function] Return a tuple describing the fields of this dataclass.
dataclasses.is_dataclass(obj) [function] Returns True if obj is a dataclass or an instance of a dataclass.
dataclasses.make_dataclass(cls_name, fields, *, bases=(), namespace=None, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False) [function] Return a new dynamically created dataclass. The dataclass name will be 'cls_name'.
dataclasses.replace(obj, **changes) [function] Return a new object replacing specified fields with new values.
datetime
datetime.MAXYEAR
datetime.MINYEAR
datetime.date(year, month, day) [class] date(year, month, day) --> date object
datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) [class] datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]) The
datetime.datetime_CAPI
datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) [class] time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object All arguments
datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) [class] Difference between two datetime values.
datetime.timezone(offset, name=None) [class] Fixed offset from UTC implementation of tzinfo.
datetime.tzinfo() [class] Abstract base class for time zone info objects.
dbm
dbm.error
dbm.open(file, flag='r', mode=438) [function] Open or create database at path given by *file*.
dbm.whichdb(filename) [function] Guess which db package to use to open a db file.
decimal
decimal.BasicContext
decimal.Clamped() [class] Base class for arithmetic errors.
decimal.Context(prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None) [class] The context affects almost all operations and controls rounding, Over/Underflow,
decimal.ConversionSyntax() [class] Base class for arithmetic errors.
decimal.Decimal(value='0', context=None) [class] Construct a new Decimal object.
decimal.DecimalException() [class] Base class for arithmetic errors.
decimal.DecimalTuple(sign, digits, exponent) [class] DecimalTuple(sign, digits, exponent)
decimal.DefaultContext
decimal.DivisionByZero() [class] Second argument to a division or modulo operation was zero.
decimal.DivisionImpossible() [class] Base class for arithmetic errors.
decimal.DivisionUndefined() [class] Second argument to a division or modulo operation was zero.
decimal.ExtendedContext
decimal.FloatOperation() [class] Base class for arithmetic errors.
decimal.HAVE_THREADS
decimal.Inexact() [class] Base class for arithmetic errors.
decimal.InvalidContext() [class] Base class for arithmetic errors.
decimal.InvalidOperation() [class] Base class for arithmetic errors.
decimal.MAX_EMAX
decimal.MAX_PREC
decimal.MIN_EMIN
decimal.MIN_ETINY
decimal.Overflow() [class] Base class for arithmetic errors.
decimal.ROUND_05UP
decimal.ROUND_CEILING
decimal.ROUND_DOWN
decimal.ROUND_FLOOR
decimal.ROUND_HALF_DOWN
decimal.ROUND_HALF_EVEN
decimal.ROUND_HALF_UP
decimal.ROUND_UP
decimal.Rounded() [class] Base class for arithmetic errors.
decimal.Subnormal() [class] Base class for arithmetic errors.
decimal.Underflow() [class] Base class for arithmetic errors.
decimal.getcontext() Get the current default context.
decimal.localcontext(ctx=None) Return a context manager that will set the default context to a copy of ctx on entry
decimal.setcontext(context) Set a new default context.
def
del
delattr(obj, name) Deletes the named attribute from the given object.
dict(**kwarg) [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
dict(iterable, **kwarg) [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
dict(mapping, **kwarg) [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
difflib
difflib.Differ(linejunk=None, charjunk=None) [class] Differ is a class for comparing sequences of lines of text, and producing human-readable
difflib.HtmlDiff(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=<??>) [class] For producing HTML side by side comparison with change highlights.
difflib.IS_CHARACTER_JUNK(ch, ws=' \t') [function] Return 1 for ignorable character: iff `ch` is a space or tab.
difflib.IS_LINE_JUNK(line, pat=<??>) [function] Return 1 for ignorable line: iff `line` is blank or contains a single '#'.
difflib.Match(a, b, size) [class] Match(a, b, size)
difflib.SequenceMatcher(isjunk=None, a='', b='', autojunk=True) [class] SequenceMatcher is a flexible class for comparing pairs of sequences of any type,
difflib.context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n') [function] Compare two sequences of lines; generate the delta as a context diff.
difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n') [function] Compare `a` and `b`, two sequences of lines represented as bytes rather than str.
difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6) [function] Use SequenceMatcher to return list of the best "good enough" matches.
difflib.ndiff(a, b, linejunk=None, charjunk=<??>) [function] Compare `a` and `b` (lists of strings); return a `Differ`-style delta.
difflib.restore(delta, which) [function] Generate one of the two sequences that generated a delta.
difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n') [function] Compare two sequences of lines; generate the delta as a unified diff.
dir([object]) dir([object]) -> list of strings If called without an argument, return the names
dis
dis.Bytecode(x, *, first_line=None, current_offset=None) [class] The bytecode operations of a piece of code Instantiate this with a function, method,
dis.EXTENDED_ARG
dis.HAVE_ARGUMENT
dis.Instruction(opname, opcode, arg, argval, argrepr, offset, starts_line, is_jump_target) [class] Details for a bytecode operation Defined fields: opname - human readable name for
dis.cmp_op
dis.code_info(x) [function] Formatted details of methods, functions, or code.
dis.dis(x=None, *, file=None, depth=None) [function] Disassemble classes, methods, functions, and other compiled objects.
dis.disassemble(co, lasti=-1, *, file=None) [function] Disassemble a code object.
dis.disco(co, lasti=-1, *, file=None) [function] Disassemble a code object.
dis.distb(tb=None, *, file=None) [function] Disassemble a traceback (default: last traceback).
dis.findlabels(code) [function] Detect all offsets in a byte code which are jump targets. Return the list of offsets.
dis.findlinestarts(code) [function] Find the offsets in a byte code which are start of lines in the source.
dis.get_instructions(x, *, first_line=None) [function] Iterator for the opcodes in methods, functions or code Generates a series of Instruction
dis.hascompare
dis.hasconst
dis.hasfree
dis.hasjabs
dis.hasjrel
dis.haslocal
dis.hasname
dis.hasnargs
dis.opmap
dis.opname
dis.show_code(co, *, file=None) [function] Print details of methods, functions, or code to *file*.
dis.stack_effect(opcode, oparg=None) Compute the stack effect of the opcode.
distutils
distutils.core
distutils.core.CCompilerError() [class] Some compile/link operation failed.
distutils.core.Command(dist) [class] Abstract base class for defining command classes, the "worker bees" of the Distutils.
distutils.core.CompileError() [class] Failure to compile one or more C/C++ source files.
distutils.core.DEBUG
distutils.core.Distribution(attrs=None) [class] The core of the Distutils.
distutils.core.DistutilsArgError() [class] Raised by fancy_getopt in response to getopt.error -- ie.
distutils.core.DistutilsByteCompileError() [class] Byte compile error.
distutils.core.DistutilsClassError() [class] Some command class (or possibly distribution class, if anyone feels a need to subclass
distutils.core.DistutilsError() [class] The root of all Distutils evil.
distutils.core.DistutilsExecError() [class] Any problems executing an external program (such as the C compiler, when compiling
distutils.core.DistutilsFileError() [class] Any problems in the filesystem: expected file not found, etc.
distutils.core.DistutilsGetoptError() [class] The option table provided to 'fancy_getopt()' is bogus.
distutils.core.DistutilsInternalError() [class] Internal inconsistencies or impossibilities (obviously, this should never be seen
distutils.core.DistutilsModuleError() [class] Unable to load an expected module, or to find an expected class within some module
distutils.core.DistutilsOptionError() [class] Syntactic/semantic errors in command options, such as use of mutually conflicting
distutils.core.DistutilsPlatformError() [class] We don't know how to do something on the current platform (but we do know how to
distutils.core.DistutilsSetupError() [class] For errors that can be definitely blamed on the setup script, such as invalid keyword
distutils.core.DistutilsTemplateError() [class] Syntax error in a file list template.
distutils.core.Extension(name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, optional=None, **kw) [class] Just a collection of attributes that describes an extension module and everything
distutils.core.LibError() [class] Failure to create a static library from one or more C/C++ object files.
distutils.core.LinkError() [class] Failure to link one or more C/C++ object files into an executable or shared library
distutils.core.PreprocessError() [class] Failure to preprocess one or more C/C++ files.
distutils.core.PyPIRCCommand(dist) [class] Base command that knows how to handle the .pypirc file
distutils.core.USAGE
distutils.core.UnknownFileError() [class] Attempt to process an unknown file type.
distutils.core._setup_distribution
distutils.core._setup_stop_after
distutils.core.extension_keywords
distutils.core.gen_usage(script_name) [function]
distutils.core.run_setup(script_name, script_args=None, stop_after='run') [function] Run a setup script in a somewhat controlled environment, and return the Distribution
distutils.core.setup(**attrs) [function] The gateway to the Distutils: do everything your setup script needs to do, in a highly
distutils.core.setup_keywords
divmod(x, y) Return the tuple (x//y, x%y). Invariant: div*y + mod == x.
doctest
doctest.COMPARISON_FLAGS
doctest.DONT_ACCEPT_BLANKLINE
doctest.DONT_ACCEPT_TRUE_FOR_1
doctest.DebugRunner(checker=None, verbose=None, optionflags=0) [class] Run doc tests but raise an exception as soon as there is a failure.
doctest.DocFileSuite(*paths, **kw) [function] A unittest suite for one or more doctest files.
doctest.DocTest(examples, globs, name, filename, lineno, docstring) [class] A collection of doctest examples that should be run in a single namespace.
doctest.DocTestFailure(test, example, got) [class] A DocTest example has failed in debugging mode.
doctest.DocTestFinder(verbose=False, parser=<??>, recurse=True, exclude_empty=True) [class] A class used to extract the DocTests that are relevant to a given object, from its
doctest.DocTestParser() [class] A class used to parse strings containing doctest examples.
doctest.DocTestRunner(checker=None, verbose=None, optionflags=0) [class] A class used to run DocTest test cases, and accumulate statistics.
doctest.DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options) [function] Convert doctest tests for a module to a unittest test suite.
doctest.ELLIPSIS
doctest.Example(source, want, exc_msg=None, lineno=0, indent=0, options=None) [class] A single doctest example, consisting of source code and expected output.
doctest.FAIL_FAST
doctest.IGNORE_EXCEPTION_DETAIL
doctest.NORMALIZE_WHITESPACE
doctest.OutputChecker() [class] A class used to check the whether the actual output from a doctest example matches
doctest.REPORTING_FLAGS
doctest.REPORT_CDIFF
doctest.REPORT_NDIFF
doctest.REPORT_ONLY_FIRST_FAILURE
doctest.REPORT_UDIFF
doctest.SKIP
doctest.UnexpectedException(test, example, exc_info) [class] A DocTest example has encountered an unexpected exception The exception instance
doctest.debug(module, name, pm=False) [function] Debug a single doctest docstring.
doctest.debug_src(src, pm=False, globs=None) [function] Debug a single doctest docstring, in argument `src`'
doctest.register_optionflag(name) [function]
doctest.run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0) [function] Test examples in the given object's docstring (`f`), using `globs` as globals.
doctest.script_from_examples(s) [function] Extract script from text with examples. Converts text with examples to a Python script.
doctest.set_unittest_reportflags(flags) [function] Sets the unittest option flags.
doctest.testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=<??>, encoding=None) [function] Test examples in the given file.
doctest.testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False) [function] m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None,
doctest.testsource(module, name) [function] Extract the test sources from a doctest docstring as a script.
dummy_threading
dummy_threading.Barrier(parties, action=None, timeout=None) [class] Implements a Barrier.
dummy_threading.BoundedSemaphore(value=1) [class] Implements a bounded semaphore.
dummy_threading.BrokenBarrierError() [class] Unspecified run-time error.
dummy_threading.Condition(lock=None) [class] Class that implements a condition variable.
dummy_threading.Event() [class] Class implementing event objects.
dummy_threading.Lock() [function] Dummy implementation of _thread.allocate_lock().
dummy_threading.RLock(*args, **kwargs) [function] Factory function that returns a new reentrant lock.
dummy_threading.Semaphore(value=1) [class] This class implements semaphore objects.
dummy_threading.TIMEOUT_MAX
dummy_threading.Thread(group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None) [class] A class that represents a thread of control.
dummy_threading.ThreadError() [class] Unspecified run-time error.
dummy_threading.Timer(interval, function, args=None, kwargs=None) [class] Call a function after a specified number of seconds: t = Timer(30.0, f, args=None,
dummy_threading.active_count() [function] Return the number of Thread objects currently alive.
dummy_threading.current_thread() [function] Return the current Thread object, corresponding to the caller's thread of control.
dummy_threading.enumerate() [function] Return a list of all Thread objects currently alive.
dummy_threading.get_ident() [function] Dummy implementation of _thread.get_ident().
dummy_threading.local(*args, **kw) [class]
dummy_threading.main_thread() [function] Return the main thread object.
dummy_threading.setprofile(func) [function] Set a profile function for all threads started from the threading module.
dummy_threading.settrace(func) [function] Set a trace function for all threads started from the threading module.
dummy_threading.stack_size(size=None) [function] Dummy implementation of _thread.stack_size().
elif
else
email
email.base64mime
email.base64mime.body_decode(string) [function] Decode a raw base64 string, returning a bytes object.
email.base64mime.body_encode(s, maxlinelen=76, eol='\n') [function] Encode a string with base64.
email.base64mime.decode(string) [function] Decode a raw base64 string, returning a bytes object.
email.base64mime.decodestring(string) [function] Decode a raw base64 string, returning a bytes object.
email.base64mime.header_encode(header_bytes, charset='iso-8859-1') [function] Encode a single header line with Base64 encoding in a given charset.
email.base64mime.header_length(bytearray) [function] Return the length of s when it is encoded with base64.
email.charset
email.charset.Charset(input_charset='us-ascii') [class] Map character sets to their email properties.
email.charset.add_alias(alias, canonical) [function] Add a character set alias.
email.charset.add_charset(charset, header_enc=None, body_enc=None, output_charset=None) [function] Add character set properties to the global registry.
email.charset.add_codec(charset, codecname) [function] Add a codec that map characters in the given charset to/from Unicode.
email.contentmanager
email.contentmanager.ContentManager() [class]
email.contentmanager._encode_base64(data, max_line_length) [function]
email.contentmanager._encode_text(string, charset, cte, policy) [function]
email.contentmanager._finalize_set(msg, disposition, filename, cid, params) [function]
email.contentmanager._prepare_set(msg, maintype, subtype, headers) [function]
email.contentmanager.get_and_fixup_unknown_message_content(msg) [function]
email.contentmanager.get_message_content(msg) [function]
email.contentmanager.get_non_text_content(msg) [function]
email.contentmanager.get_text_content(msg, errors='replace') [function]
email.contentmanager.maintype
email.contentmanager.raw_data_manager
email.contentmanager.set_bytes_content(msg, data, maintype, subtype, cte='base64', disposition=None, filename=None, cid=None, params=None, headers=None) [function]
email.contentmanager.set_message_content(msg, message, subtype='rfc822', cte=None, disposition=None, filename=None, cid=None, params=None, headers=None) [function]
email.contentmanager.set_text_content(msg, string, subtype='plain', charset='utf-8', cte=None, disposition=None, filename=None, cid=None, params=None, headers=None) [function]
email.contentmanager.subtype
email.contentmanager.typ(object) [class] Create a new memoryview object which references the given object.
email.encoders
email.encoders.encode_7or8bit(msg) [function] Set the Content-Transfer-Encoding header to 7bit or 8bit.
email.encoders.encode_base64(msg) [function] Encode the message's payload in Base64.
email.encoders.encode_noop(msg) [function] Do nothing.
email.encoders.encode_quopri(msg) [function] Encode the message's payload in quoted-printable.
email.errors
email.errors.BoundaryError() [class] Couldn't find terminating boundary.
email.errors.CharsetError() [class] An illegal charset was given.
email.errors.CloseBoundaryNotFoundDefect(line=None) [class] A start boundary was found, but not the corresponding close boundary.
email.errors.FirstHeaderLineIsContinuationDefect(line=None) [class] A message had a continuation line as its first header line.
email.errors.HeaderDefect(*args, **kw) [class] Base class for a header defect.
email.errors.HeaderMissingRequiredValue(*args, **kw) [class] A header that must have a value had none
email.errors.HeaderParseError() [class] Error while parsing headers.
email.errors.InvalidBase64CharactersDefect(line=None) [class] base64 encoded sequence had characters not in base64 alphabet
email.errors.InvalidBase64LengthDefect(line=None) [class] base64 encoded sequence had invalid length (1 mod 4)
email.errors.InvalidBase64PaddingDefect(line=None) [class] base64 encoded sequence had an incorrect length
email.errors.InvalidHeaderDefect(*args, **kw) [class] Header is not valid, message gives details.
email.errors.InvalidMultipartContentTransferEncodingDefect(line=None) [class] An invalid content transfer encoding was set on the multipart itself.
email.errors.MalformedHeaderDefect(line=None) [class] Found line with no leading whitespace and no colon before blank line.
email.errors.MessageDefect(line=None) [class] Base class for a message defect.
email.errors.MessageError() [class] Base class for errors in the email package.
email.errors.MessageParseError() [class] Base class for message parsing errors.
email.errors.MisplacedEnvelopeHeaderDefect(line=None) [class] A 'Unix-from' header was found in the middle of a header block.
email.errors.MissingHeaderBodySeparatorDefect(line=None) [class] Found line with no leading whitespace and no colon before blank line.
email.errors.MultipartConversionError() [class] Conversion to a multipart is prohibited.
email.errors.MultipartInvariantViolationDefect(line=None) [class] A message claimed to be a multipart but no subparts were found.
email.errors.NoBoundaryInMultipartDefect(line=None) [class] A message claimed to be a multipart but had no boundary parameter.
email.errors.NonASCIILocalPartDefect(*args, **kw) [class] local_part contains non-ASCII characters
email.errors.NonPrintableDefect(non_printables) [class] ASCII characters outside the ascii-printable range found
email.errors.ObsoleteHeaderDefect(*args, **kw) [class] Header uses syntax declared obsolete by RFC 5322
email.errors.StartBoundaryNotFoundDefect(line=None) [class] The claimed start boundary was never found.
email.errors.UndecodableBytesDefect(line=None) [class] Header contained bytes that could not be decoded
email.feedparser
email.feedparser.BytesFeedParser(_factory=None, *, policy=Compat32()) [class] Like FeedParser, but feed accepts bytes.
email.feedparser.FeedParser(_factory=None, *, policy=Compat32()) [class] A feed-style parser of email.
email.generator
email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None) [class] Generates a bytes version of a Message object tree.
email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None, fmt=None, *, policy=None) [class] Generates a text representation of a message.
email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None, *, policy=None) [class] Generates output from a Message object tree.
email.header
email.header.Header(s=None, charset=None, maxlinelen=None, header_name=None, continuation_ws=' ', errors='strict') [class]
email.header.decode_header(header) [function] Decode a message header value without converting charset.
email.header.make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' ') [function] Create a Header from a sequence of pairs as returned by decode_header() decode_header()
email.headerregistry
email.headerregistry.Address(display_name='', username='', domain='', addr_spec=None) [class]
email.headerregistry.AddressHeader() [class]
email.headerregistry.BaseHeader(name, value) [class] Base class for message headers.
email.headerregistry.ContentDispositionHeader() [class]
email.headerregistry.ContentTransferEncodingHeader() [class]
email.headerregistry.ContentTypeHeader() [class]
email.headerregistry.DateHeader() [class] Header whose value consists of a single timestamp.
email.headerregistry.Group(display_name=None, addresses=None) [class]
email.headerregistry.HeaderRegistry(base_class=<??>, default_class=<??>, use_default_map=True) [class] A header_factory and header registry.
email.headerregistry.MIMEVersionHeader() [class]
email.headerregistry.MappingProxyType() [class]
email.headerregistry.ParameterizedMIMEHeader() [class]
email.headerregistry.SingleAddressHeader() [class]
email.headerregistry.UniqueAddressHeader() [class]
email.headerregistry.UniqueDateHeader() [class] Header whose value consists of a single timestamp.
email.headerregistry.UniqueSingleAddressHeader() [class]
email.headerregistry.UniqueUnstructuredHeader() [class]
email.headerregistry.UnstructuredHeader() [class]
email.headerregistry._default_header_map
email.headerregistry._reconstruct_header(cls_name, bases, value) [function]
email.iterators
email.iterators.body_line_iterator(msg, decode=False) [function] Iterate over the parts, returning string payloads line-by-line.
email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None) [function] Iterate over the subparts with a given MIME type.
email.iterators.walk(self) [function] Walk over the message tree, yielding each subpart.
email.message
email.message.EmailMessage(policy=None) [class] Basic message object.
email.message.Message(policy=Compat32()) [class] Basic message object.
email.message_from_binary_file(fp, *args, **kws) [function] Read a binary file and parse its contents into a Message object model.
email.message_from_bytes(s, *args, **kws) [function] Parse a bytes string into a Message object model.
email.message_from_file(fp, *args, **kws) [function] Read a file and parse its contents into a Message object model.
email.message_from_string(s, *args, **kws) [function] Parse a string into a Message object model.
email.mime
email.mime.application
email.mime.application.MIMEApplication(_data, _subtype='octet-stream', _encoder=<??>, *, policy=None, **_params) [class] Class for generating application/* MIME documents.
email.mime.audio
email.mime.audio.MIMEAudio(_audiodata, _subtype=None, _encoder=<??>, *, policy=None, **_params) [class] Class for generating audio/* MIME documents.
email.mime.base
email.mime.base.MIMEBase(_maintype, _subtype, *, policy=None, **_params) [class] Base class for MIME specializations.
email.mime.image
email.mime.image.MIMEImage(_imagedata, _subtype=None, _encoder=<??>, *, policy=None, **_params) [class] Class for generating image/* type MIME documents.
email.mime.message
email.mime.message.MIMEMessage(_msg, _subtype='rfc822', *, policy=None) [class] Class representing message/* MIME documents.
email.mime.multipart
email.mime.multipart.MIMEMultipart(_subtype='mixed', boundary=None, _subparts=None, *, policy=None, **_params) [class] Base class for MIME multipart/* type messages.
email.mime.nonmultipart
email.mime.nonmultipart.MIMENonMultipart(_maintype, _subtype, *, policy=None, **_params) [class] Base class for MIME non-multipart type messages.
email.mime.text
email.mime.text.MIMEText(_text, _subtype='plain', _charset=None, *, policy=None) [class] Class for generating text/* type MIME documents.
email.parser
email.parser.BytesFeedParser(_factory=None, *, policy=Compat32()) [class] Like FeedParser, but feed accepts bytes.
email.parser.BytesHeaderParser(*args, **kw) [class]
email.parser.BytesParser(*args, **kw) [class]
email.parser.FeedParser(_factory=None, *, policy=Compat32()) [class] A feed-style parser of email.
email.parser.HeaderParser(_class=None, *, policy=Compat32()) [class]
email.parser.Parser(_class=None, *, policy=Compat32()) [class]
email.policy
email.policy.Compat32(**kw) [class] Controls for how messages are interpreted and formatted.
email.policy.EmailPolicy(**kw) [class] Controls for how messages are interpreted and formatted.
email.policy.HTTP
email.policy.Policy(**kw) [class] Controls for how messages are interpreted and formatted.
email.policy.SMTP
email.policy.compat32
email.policy.default
email.policy.strict
email.quoprimime
email.quoprimime.body_decode(encoded, eol='\n') [function] Decode a quoted-printable string.
email.quoprimime.body_encode(body, maxlinelen=76, eol='\n') [function] Encode with quoted-printable, wrapping at maxlinelen characters.
email.quoprimime.body_length(bytearray) [function] Return a body quoted-printable encoding length.
email.quoprimime.decode(encoded, eol='\n') [function] Decode a quoted-printable string.
email.quoprimime.decodestring(encoded, eol='\n') [function] Decode a quoted-printable string.
email.quoprimime.header_decode(s) [function] Decode a string encoded with RFC 2045 MIME header `Q' encoding.
email.quoprimime.header_encode(header_bytes, charset='iso-8859-1') [function] Encode a single header line with quoted-printable (like) encoding.
email.quoprimime.header_length(bytearray) [function] Return a header quoted-printable encoding length.
email.quoprimime.quote(c) [function]
email.quoprimime.unquote(s) [function] Turn a string in the form =AB to the ASCII character with value 0xab
email.utils
email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii') [function]
email.utils.decode_params(params) [function] Decode parameters list according to RFC 2231.
email.utils.decode_rfc2231(s) [function] Decode string according to RFC 2231
email.utils.encode_rfc2231(s, charset=None, language=None) [function] Encode string according to RFC 2231.
email.utils.format_datetime(dt, usegmt=False) [function] Turn a datetime into a date string as specified in RFC 2822.
email.utils.formataddr(pair, charset='utf-8') [function] The inverse of parseaddr(), this takes a 2-tuple of the form (realname, email_address)
email.utils.formatdate(timeval=None, localtime=False, usegmt=False) [function] Returns a date string as specified by RFC 2822, e.g.: Fri, 09 Nov 2001 01:08:47 -0000
email.utils.getaddresses(fieldvalues) [function] Return a list of (REALNAME, EMAIL) for each fieldvalue.
email.utils.make_msgid(idstring=None, domain=None) [function] Returns a string suitable for RFC 2822 compliant Message-ID, e.g: <142480216486.20800.16526388040877946887@nightshade.la.mastaler.com>
email.utils.mktime_tz(data) [function] Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.
email.utils.parseaddr(addr) [function] Parse addr into its constituent realname and email address parts.
email.utils.parsedate(data) [function] Convert a time string to a time tuple.
email.utils.parsedate_to_datetime(data) [function]
email.utils.parsedate_tz(data) [function] Convert a date string to a time tuple. Accounts for military timezones.
email.utils.unquote(str) [function] Remove quotes from a string.
encodings
encodings.CodecRegistryError() [class] Base class for lookup errors.
encodings.normalize_encoding(encoding) [function] Normalize an encoding name.
encodings.search_function(encoding) [function]
ensurepip
ensurepip.bootstrap(*, root=None, upgrade=False, user=False, altinstall=False, default_pip=False, verbosity=0) [function] Bootstrap pip into the current Python installation (or the given root directory).
ensurepip.version() [function] Returns a string specifying the bundled version of pip.
enum
enum.Enum(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] Generic enumeration. Derive from this class to define new enumerations.
enum.EnumMeta(cls, bases, classdict) [class] Metaclass for Enum
enum.Flag(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] Support for flags
enum.IntEnum(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] Enum where members are also (and must be) ints
enum.IntFlag(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] Support for integer-based Flags
enum.auto() [class] Instances are replaced with an appropriate value in Enum class suites.
enum.unique(enumeration) [function] Class decorator for enumerations ensuring unique member values.
enumerate(iterable, start=0) [class] Return an enumerate object.
errno
errno.E2BIG
errno.EACCES
errno.EADDRINUSE
errno.EADDRNOTAVAIL
errno.EAFNOSUPPORT
errno.EAGAIN
errno.EALREADY
errno.EBADF
errno.EBADMSG
errno.EBUSY
errno.ECANCELED
errno.ECHILD
errno.ECONNABORTED
errno.ECONNREFUSED
errno.ECONNRESET
errno.EDEADLK
errno.EDEADLOCK
errno.EDESTADDRREQ
errno.EDOM
errno.EDQUOT
errno.EEXIST
errno.EFAULT
errno.EFBIG
errno.EHOSTDOWN
errno.EHOSTUNREACH
errno.EIDRM
errno.EILSEQ
errno.EINPROGRESS
errno.EINTR
errno.EINVAL
errno.EIO
errno.EISCONN
errno.EISDIR
errno.ELOOP
errno.EMFILE
errno.EMLINK
errno.EMSGSIZE
errno.ENAMETOOLONG
errno.ENETDOWN
errno.ENETRESET
errno.ENETUNREACH
errno.ENFILE
errno.ENOBUFS
errno.ENODATA
errno.ENODEV
errno.ENOENT
errno.ENOEXEC
errno.ENOLCK
errno.ENOLINK
errno.ENOMEM
errno.ENOMSG
errno.ENOPROTOOPT
errno.ENOSPC
errno.ENOSR
errno.ENOSTR
errno.ENOSYS
errno.ENOTCONN
errno.ENOTDIR
errno.ENOTEMPTY
errno.ENOTRECOVERABLE
errno.ENOTSOCK
errno.ENOTSUP
errno.ENOTTY
errno.ENXIO
errno.EOPNOTSUPP
errno.EOVERFLOW
errno.EOWNERDEAD
errno.EPERM
errno.EPFNOSUPPORT
errno.EPIPE
errno.EPROTO
errno.EPROTONOSUPPORT
errno.EPROTOTYPE
errno.ERANGE
errno.EREMOTE
errno.EROFS
errno.ESHUTDOWN
errno.ESOCKTNOSUPPORT
errno.ESPIPE
errno.ESRCH
errno.ESTALE
errno.ETIME
errno.ETIMEDOUT
errno.ETOOMANYREFS
errno.ETXTBSY
errno.EUSERS
errno.EWOULDBLOCK
errno.EXDEV
errno.WSABASEERR
errno.WSAEACCES
errno.WSAEADDRINUSE
errno.WSAEADDRNOTAVAIL
errno.WSAEAFNOSUPPORT
errno.WSAEALREADY
errno.WSAEBADF
errno.WSAECONNABORTED
errno.WSAECONNREFUSED
errno.WSAECONNRESET
errno.WSAEDESTADDRREQ
errno.WSAEDISCON
errno.WSAEDQUOT
errno.WSAEFAULT
errno.WSAEHOSTDOWN
errno.WSAEHOSTUNREACH
errno.WSAEINPROGRESS
errno.WSAEINTR
errno.WSAEINVAL
errno.WSAEISCONN
errno.WSAELOOP
errno.WSAEMFILE
errno.WSAEMSGSIZE
errno.WSAENAMETOOLONG
errno.WSAENETDOWN
errno.WSAENETRESET
errno.WSAENETUNREACH
errno.WSAENOBUFS
errno.WSAENOPROTOOPT
errno.WSAENOTCONN
errno.WSAENOTEMPTY
errno.WSAENOTSOCK
errno.WSAEOPNOTSUPP
errno.WSAEPFNOSUPPORT
errno.WSAEPROCLIM
errno.WSAEPROTONOSUPPORT
errno.WSAEPROTOTYPE
errno.WSAEREMOTE
errno.WSAESHUTDOWN
errno.WSAESOCKTNOSUPPORT
errno.WSAESTALE
errno.WSAETIMEDOUT
errno.WSAETOOMANYREFS
errno.WSAEUSERS
errno.WSAEWOULDBLOCK
errno.WSANOTINITIALISED
errno.WSASYSNOTREADY
errno.WSAVERNOTSUPPORTED
errno.errorcode
eval(source, globals=None, locals=None) Evaluate the given source in the context of globals and locals.
except
exec(source, globals=None, locals=None) Execute the given source in the context of globals and locals.
exit(code=None)
faulthandler
faulthandler.cancel_dump_traceback_later() cancel_dump_traceback_later(): cancel the previous call to dump_traceback_later().
faulthandler.disable() disable(): disable the fault handler
faulthandler.dump_traceback(file=sys.stderr, all_threads=True) dump_traceback(file=sys.stderr, all_threads=True): dump the traceback of the current
faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False) dump_traceback_later(timeout, repeat=False, file=sys.stderrn, exit=False): dump the
faulthandler.enable(file=sys.stderr, all_threads=True) enable(file=sys.stderr, all_threads=True): enable the fault handler
faulthandler.is_enabled() is_enabled()->bool: check if the handler is enabled
filecmp
filecmp.DEFAULT_IGNORES
filecmp.clear_cache() [function] Clear the filecmp cache.
filecmp.cmp(f1, f2, shallow=True) [function] Compare two files.
filecmp.cmpfiles(a, b, common, shallow=True) [function] Compare common files in two directories.
filecmp.dircmp(a, b, ignore=None, hide=None) [class] A class that manages the comparison of 2 directories.
fileinput
fileinput.FileInput(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None) [class] FileInput([files[, inplace[, backup[, bufsize, [, mode[, openhook]]]]]]) Class FileInput
fileinput.close() [function] Close the sequence.
fileinput.filelineno() [function] Return the line number in the current file.
fileinput.filename() [function] Return the name of the file currently being read.
fileinput.fileno() [function] Return the file number of the current file.
fileinput.hook_compressed(filename, mode) [function]
fileinput.hook_encoded(encoding, errors=None) [function]
fileinput.input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None) [function] Return an instance of the FileInput class, which can be iterated.
fileinput.isfirstline() [function] Returns true the line just read is the first line of its file, otherwise returns
fileinput.isstdin() [function] Returns true if the last line was read from sys.stdin, otherwise returns false.
fileinput.lineno() [function] Return the cumulative line number of the line that has just been read.
fileinput.nextfile() [function] Close the current file so that the next iteration will read the first line from the
filter(function, iterable) [class] filter(function or None, iterable) --> filter object Return an iterator yielding
finally
float(x=0) [class] Convert a string or number to a floating point number, if possible.
fnmatch
fnmatch.filter(names, pat) [function] Return the subset of the list NAMES that match PAT.
fnmatch.fnmatch(name, pat) [function] Test whether FILENAME matches PATTERN.
fnmatch.fnmatchcase(name, pat) [function] Test whether FILENAME matches PATTERN, including case.
fnmatch.translate(pat) [function] Translate a shell PATTERN to a regular expression. There is no way to quote meta-characters.
for
format(value, format_spec='') Return value.__format__(format_spec) format_spec defaults to the empty string.
fractions
fractions.Fraction(numerator=0, denominator=None, *, _normalize=True) [class] This class implements rational numbers.
fractions.gcd(a, b) [function] Calculate the Greatest Common Divisor of a and b.
from
frozenset([iterable]) [class] frozenset() -> empty frozenset object frozenset(iterable) -> frozenset object Build
ftplib
ftplib.FTP(host='', user='', passwd='', acct='', timeout=<??>, source_address=None) [class] An FTP client class.
ftplib.FTP_TLS(host='', user='', passwd='', acct='', keyfile=None, certfile=None, context=None, timeout=<??>, source_address=None) [class] A FTP subclass which adds TLS support to FTP as described in RFC-4217.
ftplib.all_errors
ftplib.error_perm() [class] Common base class for all non-exit exceptions.
ftplib.error_proto() [class] Common base class for all non-exit exceptions.
ftplib.error_reply() [class] Common base class for all non-exit exceptions.
ftplib.error_temp() [class] Common base class for all non-exit exceptions.
functools
functools.WRAPPER_ASSIGNMENTS
functools.WRAPPER_UPDATES
functools.cmp_to_key(func) Convert a cmp= function into a key= function.
functools.lru_cache(maxsize=128, typed=False) [function] Least-recently-used cache decorator.
functools.partial(func, /, *args, **keywords) [class] partial(func, *args, **keywords) - new function with partial application of the given
functools.partialmethod(func, *args, **keywords) [class] Method descriptor with partial application of the given arguments and keywords.
functools.reduce(function, iterable[, initializer]) reduce(function, sequence[, initial]) -> value Apply a function of two arguments
functools.singledispatch(func) [function] Single-dispatch generic function decorator.
functools.total_ordering(cls) [function] Class decorator that fills in missing ordering methods
functools.update_wrapper(wrapper, wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',)) [function] Update a wrapper function to look like the wrapped function wrapper is the function
functools.wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',)) [function] Decorator factory to apply update_wrapper() to a wrapper function Returns a decorator
gc
gc.DEBUG_COLLECTABLE
gc.DEBUG_LEAK
gc.DEBUG_SAVEALL
gc.DEBUG_STATS
gc.DEBUG_UNCOLLECTABLE
gc.callbacks
gc.collect(generation=2) Run the garbage collector.
gc.disable() Disable automatic garbage collection.
gc.enable() Enable automatic garbage collection.
gc.freeze() Freeze all current tracked objects and ignore them for future collections.
gc.garbage
gc.get_count() Return a three-tuple of the current collection counts.
gc.get_debug() Get the garbage collection debugging flags.
gc.get_freeze_count() Return the number of objects in the permanent generation.
gc.get_objects() Return a list of objects tracked by the collector (excluding the list returned).
gc.get_referents(*objs) get_referents(*objs) -> list Return the list of objects that are directly referred
gc.get_referrers(*objs) get_referrers(*objs) -> list Return the list of objects that directly refer to any
gc.get_stats() Return a list of dictionaries containing per-generation statistics.
gc.get_threshold() Return the current collection thresholds.
gc.is_tracked(obj) Returns true if the object is tracked by the garbage collector.
gc.isenabled() Returns true if automatic garbage collection is enabled.
gc.set_debug(flags) Set the garbage collection debugging flags.
gc.set_threshold(threshold0[, threshold1[, threshold2]]) set_threshold(threshold0, [threshold1, threshold2]) -> None Sets the collection thresholds.
gc.unfreeze() Unfreeze all objects in the permanent generation.
genericpath
genericpath.commonprefix(m) [function] Given a list of pathnames, returns the longest common leading component
genericpath.exists(path) [function] Test whether a path exists.
genericpath.getatime(filename) [function] Return the last access time of a file, reported by os.stat().
genericpath.getctime(filename) [function] Return the metadata change time of a file, reported by os.stat().
genericpath.getmtime(filename) [function] Return the last modification time of a file, reported by os.stat().
genericpath.getsize(filename) [function] Return the size of a file, reported by os.stat().
genericpath.isdir(s) [function] Return true if the pathname refers to an existing directory.
genericpath.isfile(path) [function] Test whether a path is a regular file
genericpath.samefile(f1, f2) [function] Test whether two pathnames reference the same actual file
genericpath.sameopenfile(fp1, fp2) [function] Test whether two open file objects reference the same file
genericpath.samestat(s1, s2) [function] Test whether two stat buffers reference the same file
getattr(object, name[, default]) getattr(object, name[, default]) -> value Get a named attribute from an object; getattr(x,
getopt
getopt.GetoptError(msg, opt='') [class] Common base class for all non-exit exceptions.
getopt.error(msg, opt='') [class] Common base class for all non-exit exceptions.
getopt.getopt(args, shortopts, longopts=[]) [function] getopt(args, options[, long_options]) -> opts, args Parses command line options and
getopt.gnu_getopt(args, shortopts, longopts=[]) [function] getopt(args, options[, long_options]) -> opts, args This function works like getopt(),
getpass
getpass.GetPassWarning() [class] Base class for warnings generated by user code.
getpass.getpass(prompt='Password: ', stream=None) [function] Prompt for password with echo off, using Windows getch().
getpass.getuser() [function] Get the username from the environment or password database.
gettext
gettext.Catalog(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None) [function]
gettext.GNUTranslations(fp=None) [class]
gettext.NullTranslations(fp=None) [class]
gettext.bind_textdomain_codeset(domain, codeset=None) [function]
gettext.bindtextdomain(domain, localedir=None) [function]
gettext.dgettext(domain, message) [function]
gettext.dngettext(domain, msgid1, msgid2, n) [function]
gettext.find(domain, localedir=None, languages=None, all=False) [function]
gettext.gettext(message) [function]
gettext.install(domain, localedir=None, codeset=None, names=None) [function]
gettext.ldgettext(domain, message) [function]
gettext.ldngettext(domain, msgid1, msgid2, n) [function]
gettext.lgettext(message) [function]
gettext.lngettext(msgid1, msgid2, n) [function]
gettext.ngettext(msgid1, msgid2, n) [function]
gettext.textdomain(domain=None) [function]
gettext.translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None) [function]
glob
glob.escape(pathname) [function] Escape all special characters.
glob.glob(pathname, *, recursive=False) [function] Return a list of paths matching a pathname pattern.
glob.iglob(pathname, *, recursive=False) [function] Return an iterator which yields the paths matching a pathname pattern.
global
globals() Return the dictionary containing the current scope's global variables.
gzip
gzip.GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None) [class] The GzipFile class simulates most of the methods of a file object with the exception
gzip.compress(data, compresslevel=9) [function] Compress data in one shot and return the compressed string.
gzip.decompress(data) [function] Decompress a gzip compressed string in one shot. Return the decompressed string.
gzip.open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None) [function] Open a gzip-compressed file in binary or text mode.
hasattr(obj, name) Return whether the object has an attribute with the given name.
hash(obj) Return the hash value for the given object.
hashlib
hashlib.algorithms_available
hashlib.algorithms_guaranteed
hashlib.blake2b(data=b'', /, *, digest_size=64, key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0, last_node=False) [class] Return a new BLAKE2b hash object.
hashlib.blake2s(data=b'', /, *, digest_size=32, key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0, last_node=False) [class] Return a new BLAKE2s hash object.
hashlib.md5() Returns a md5 hash object; optionally initialized with a string
hashlib.new(name, data=b'', **kwargs) [function] new(name, data=b'') - Return a new hashing object using the named algorithm; optionally
hashlib.pbkdf2_hmac() pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) -> key Password based
hashlib.sha1() Returns a sha1 hash object; optionally initialized with a string
hashlib.sha224() Returns a sha224 hash object; optionally initialized with a string
hashlib.sha256() Returns a sha256 hash object; optionally initialized with a string
hashlib.sha384() Returns a sha384 hash object; optionally initialized with a string
hashlib.sha3_224([data]) [class] sha3_224([data]) -> SHA3 object Return a new SHA3 hash object with a hashbit length
hashlib.sha3_256([data]) [class] sha3_256([data]) -> SHA3 object Return a new SHA3 hash object with a hashbit length
hashlib.sha3_384([data]) [class] sha3_384([data]) -> SHA3 object Return a new SHA3 hash object with a hashbit length
hashlib.sha3_512([data]) [class] sha3_512([data]) -> SHA3 object Return a new SHA3 hash object with a hashbit length
hashlib.sha512() Returns a sha512 hash object; optionally initialized with a string
hashlib.shake_128([data]) [class] shake_128([data]) -> SHAKE object Return a new SHAKE hash object.
hashlib.shake_256([data]) [class] shake_256([data]) -> SHAKE object Return a new SHAKE hash object.
heapq
heapq.heapify() Transform list into a heap, in-place, in O(len(heap)) time.
heapq.heappop() Pop the smallest item off the heap, maintaining the heap invariant.
heapq.heappush() heappush(heap, item) -> None. Push item onto heap, maintaining the heap invariant.
heapq.heappushpop() heappushpop(heap, item) -> value.
heapq.heapreplace() heapreplace(heap, item) -> value.
heapq.merge(*iterables, *, key=None, reverse=False) [function] Merge multiple sorted inputs into a single sorted output.
heapq.nlargest(n, iterable, key=None) [function] Find the n largest elements in a dataset.
heapq.nsmallest(n, iterable, key=None) [function] Find the n smallest elements in a dataset.
help(*args, **kwds) Define the builtin 'help'.
hex(number) Return the hexadecimal representation of an integer.
hmac
hmac.HMAC(key, msg=None, digestmod=None) [class] RFC 2104 HMAC class.
hmac.compare_digest(a, b) Return 'a == b'.
hmac.digest(key, msg, digest) [function] Fast inline implementation of HMAC key: key for the keyed hash object.
hmac.digest_size
hmac.new(key, msg=None, digestmod=None) [function] Create a new hashing object and return it.
hmac.trans_36
hmac.trans_5C
html
html.entities
html.entities.codepoint2name
html.entities.entitydefs
html.entities.html5
html.entities.name2codepoint
html.escape(s, quote=True) [function] Replace special characters "&", "<" and ">" to HTML-safe sequences.
html.parser
html.parser.HTMLParser(*, convert_charrefs=True) [class] Find tags and other markup and call handler functions.
html.unescape(s) [function] Convert all named and numeric character references (e.g.
http
http.HTTPStatus(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] HTTP status codes and reason phrases Status codes from the following RFCs are all
http.client
http.client.BadStatusLine(line) [class] Common base class for all non-exit exceptions.
http.client.CannotSendHeader() [class] Common base class for all non-exit exceptions.
http.client.CannotSendRequest() [class] Common base class for all non-exit exceptions.
http.client.HTTPConnection(host, port=None, timeout=<??>, source_address=None, blocksize=8192) [class]
http.client.HTTPException() [class] Common base class for all non-exit exceptions.
http.client.HTTPResponse(sock, debuglevel=0, method=None, url=None) [class] Base class for buffered IO objects.
http.client.HTTPSConnection(host, port=None, key_file=None, cert_file=None, timeout=<??>, source_address=None, *, context=None, check_hostname=None, blocksize=8192) [class] This class allows communication via SSL.
http.client.ImproperConnectionState() [class] Common base class for all non-exit exceptions.
http.client.IncompleteRead(partial, expected=None) [class] Common base class for all non-exit exceptions.
http.client.InvalidURL() [class] Common base class for all non-exit exceptions.
http.client.LineTooLong(line_type) [class] Common base class for all non-exit exceptions.
http.client.NotConnected() [class] Common base class for all non-exit exceptions.
http.client.RemoteDisconnected(*pos, **kw) [class] Connection reset.
http.client.ResponseNotReady() [class] Common base class for all non-exit exceptions.
http.client.UnimplementedFileMode() [class] Common base class for all non-exit exceptions.
http.client.UnknownProtocol(version) [class] Common base class for all non-exit exceptions.
http.client.UnknownTransferEncoding() [class] Common base class for all non-exit exceptions.
http.client.error() [class] Common base class for all non-exit exceptions.
http.client.responses
http.cookiejar
http.cookiejar.Cookie(version, name, value, port, port_specified, domain, domain_specified, domain_initial_dot, path, path_specified, secure, expires, discard, comment, comment_url, rest, rfc2109=False) [class] HTTP Cookie.
http.cookiejar.CookieJar(policy=None) [class] Collection of HTTP cookies. You may not need to know about this class: try urllib.request.build_opener(HTTPCookieProcessor).open(url).
http.cookiejar.CookiePolicy() [class] Defines which cookies get accepted from and returned to server.
http.cookiejar.DefaultCookiePolicy(blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=0, strict_ns_set_initial_dollar=False, strict_ns_set_path=False) [class] Implements the standard rules for accepting and returning cookies.
http.cookiejar.FileCookieJar(filename=None, delayload=False, policy=None) [class] CookieJar that can be loaded from and saved to a file.
http.cookiejar.LWPCookieJar(filename=None, delayload=False, policy=None) [class] The LWPCookieJar saves a sequence of "Set-Cookie3" lines.
http.cookiejar.LoadError() [class] Base class for I/O related errors.
http.cookiejar.MozillaCookieJar(filename=None, delayload=False, policy=None) [class] WARNING: you may want to backup your browser's cookies file if you use this class
http.cookies
http.cookies.BaseCookie(input=None) [class] A container class for a set of Morsels.
http.cookies.CookieError() [class] Common base class for all non-exit exceptions.
http.cookies.SimpleCookie(input=None) [class] SimpleCookie supports strings as cookie values.
http.server
http.server.BaseHTTPRequestHandler(request, client_address, server) [class] HTTP request handler base class.
http.server.CGIHTTPRequestHandler(*args, *, directory=None, **kwargs) [class] Complete HTTP server with GET, HEAD and POST commands.
http.server.HTTPServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] Base class for various socket-based server classes.
http.server.SimpleHTTPRequestHandler(*args, *, directory=None, **kwargs) [class] Simple HTTP request handler with GET and HEAD commands.
http.server.ThreadingHTTPServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] Mix-in class to handle each request in a new thread.
id(obj) Return the identity of an object.
idlelib
idlelib.testing
if
imaplib
imaplib.IMAP4(host='', port=143) [class] IMAP4 client class.
imaplib.IMAP4_SSL(host='', port=993, keyfile=None, certfile=None, ssl_context=None) [class] IMAP4 client class over SSL connection Instantiate with: IMAP4_SSL([host[, port[,
imaplib.IMAP4_stream(command) [class] IMAP4 client class over a stream Instantiate with: IMAP4_stream(command) "command"
imaplib.Int2AP(num) [function] Convert integer to A-P string representation.
imaplib.Internaldate2tuple(resp) [function] Parse an IMAP4 INTERNALDATE string.
imaplib.ParseFlags(resp) [function] Convert IMAP4 flags response to python tuple.
imaplib.Time2Internaldate(date_time) [function] Convert date_time to IMAP4 INTERNALDATE representation.
imghdr
imghdr.what(file, h=None) [function]
import
importlib
importlib.abc
importlib.abc.ExecutionLoader() [class] Abstract base class for loaders that wish to support the execution of modules as
importlib.abc.FileLoader(fullname, path) [class] Abstract base class partially implementing the ResourceLoader and ExecutionLoader
importlib.abc.Finder() [class] Legacy abstract base class for import finders.
importlib.abc.InspectLoader() [class] Abstract base class for loaders which support inspection about the modules they can
importlib.abc.Loader() [class] Abstract base class for import loaders.
importlib.abc.MetaPathFinder() [class] Abstract base class for import finders on sys.meta_path.
importlib.abc.PathEntryFinder() [class] Abstract base class for path entry finders used by PathFinder.
importlib.abc.ResourceLoader() [class] Abstract base class for loaders which can return data from their back-end storage.
importlib.abc.ResourceReader() [class] Abstract base class to provide resource-reading support.
importlib.abc.SourceLoader() [class] Abstract base class for loading source code (and optionally any corresponding bytecode).
importlib.abc._register(abstract_cls, *classes) [function]
importlib.import_module(name, package=None) [function] Import a module. The 'package' argument is required when performing a relative import.
importlib.invalidate_caches() [function] Call the invalidate_caches() method on all meta path finders stored in sys.meta_path
importlib.machinery
importlib.machinery.BYTECODE_SUFFIXES
importlib.machinery.BuiltinImporter() [class] Meta path import for built-in modules.
importlib.machinery.DEBUG_BYTECODE_SUFFIXES
importlib.machinery.EXTENSION_SUFFIXES
importlib.machinery.ExtensionFileLoader(name, path) [class] Loader for extension modules. The constructor is designed to work with FileFinder.
importlib.machinery.FileFinder(path, *loader_details) [class] File-based finder.
importlib.machinery.FrozenImporter() [class] Meta path import for frozen modules.
importlib.machinery.ModuleSpec(name, loader, *, origin=None, loader_state=None, is_package=None) [class] The specification for a module, used for loading.
importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES
importlib.machinery.PathFinder() [class] Meta path finder for sys.path and package __path__ attributes.
importlib.machinery.SOURCE_SUFFIXES
importlib.machinery.SourceFileLoader(fullname, path) [class] Concrete implementation of SourceLoader using the file system.
importlib.machinery.SourcelessFileLoader(fullname, path) [class] Loader which handles sourceless file imports.
importlib.machinery.WindowsRegistryFinder() [class] Meta path finder for modules declared in the Windows registry.
importlib.machinery.all_suffixes() [function] Returns a list of all recognized module suffixes for this process
importlib.reload(module) [function] Reload the module and return it.
importlib.resources
importlib.resources.Package(*args, **kwargs) The central part of internal API.
importlib.resources.Resource(*args, **kwargs) The central part of internal API.
importlib.resources.contents(package: Union[str, module]) [function] Return an iterable of entries in 'package'. Note that not all entries are resources.
importlib.resources.is_resource(package: Union[str, module], name: str) [function] True if 'name' is a resource inside 'package'. Directories are *not* resources.
importlib.resources.open_binary(package: Union[str, module], resource: Union[str, os.PathLike]) [function] Return a file-like object opened for binary reading of the resource.
importlib.resources.open_text(package: Union[str, module], resource: Union[str, os.PathLike], encoding: str = 'utf-8', errors: str = 'strict') [function] Return a file-like object opened for text reading of the resource.
importlib.resources.path(package: Union[str, module], resource: Union[str, os.PathLike]) [function] A context manager providing a file path object to the resource.
importlib.resources.read_binary(package: Union[str, module], resource: Union[str, os.PathLike]) [function] Return the binary contents of the resource.
importlib.resources.read_text(package: Union[str, module], resource: Union[str, os.PathLike], encoding: str = 'utf-8', errors: str = 'strict') [function] Return the decoded string of the resource.
importlib.util
importlib.util.LazyLoader(loader) [class] A loader that creates a module which defers loading until attribute access.
importlib.util.MAGIC_NUMBER
importlib.util._LazyModule(name, doc=None) [class] A subclass of the module type which triggers loading upon attribute access.
importlib.util._RAW_MAGIC_NUMBER
importlib.util._find_spec(name, path, target=None) [function] Find a module's spec.
importlib.util._find_spec_from_path(name, path=None) [function] Return the spec for the specified module.
importlib.util._module_to_load(name) [function]
importlib.util._resolve_name(name, package, level) [function] Resolve a relative module name to an absolute one.
importlib.util.cache_from_source(path, debug_override=None, *, optimization=None) [function] Given the path to a .py file, return the path to its .pyc file.
importlib.util.contextmanager(func) [function] @contextmanager decorator.
importlib.util.decode_source(source_bytes) [function] Decode bytes representing source code and return the string.
importlib.util.find_spec(name, package=None) [function] Return the spec for the specified module.
importlib.util.module_for_loader(fxn) [function] Decorator to handle selecting the proper module for loaders.
importlib.util.module_from_spec(spec) [function] Create a module based on the provided spec.
importlib.util.resolve_name(name, package) [function] Resolve a relative module name to an absolute one.
importlib.util.set_loader(fxn) [function] Set __loader__ on the returned module. This function is deprecated.
importlib.util.set_package(fxn) [function] Set __package__ on the returned module. This function is deprecated.
importlib.util.source_from_cache(path) [function] Given the path to a .pyc.
importlib.util.source_hash(source_bytes) [function] Return the hash of *source_bytes* as used in hash-based pyc files.
importlib.util.spec_from_file_location(name, location=None, *, loader=None, submodule_search_locations=<??>) [function] Return a module spec based on a file location.
importlib.util.spec_from_loader(name, loader, *, origin=None, is_package=None) [function] Return a module spec based on various loader methods.
in
input(prompt=None) Read a string from standard input.
inspect
inspect.ArgInfo(args, varargs, keywords, locals) [class] ArgInfo(args, varargs, keywords, locals)
inspect.ArgSpec(args, varargs, keywords, defaults) [class] ArgSpec(args, varargs, keywords, defaults)
inspect.Arguments(args, varargs, varkw) [class] Arguments(args, varargs, varkw)
inspect.Attribute(name, kind, defining_class, object) [class] Attribute(name, kind, defining_class, object)
inspect.BlockFinder() [class] Provide a tokeneater() method to detect the end of a code block.
inspect.BoundArguments(signature, arguments) [class] Result of `Signature.bind` call.
inspect.CORO_CLOSED
inspect.CORO_CREATED
inspect.CORO_RUNNING
inspect.CORO_SUSPENDED
inspect.CO_ASYNC_GENERATOR
inspect.CO_COROUTINE
inspect.CO_GENERATOR
inspect.CO_ITERABLE_COROUTINE
inspect.CO_NESTED
inspect.CO_NEWLOCALS
inspect.CO_NOFREE
inspect.CO_OPTIMIZED
inspect.CO_VARARGS
inspect.CO_VARKEYWORDS
inspect.ClosureVars(nonlocals, globals, builtins, unbound) [class] ClosureVars(nonlocals, globals, builtins, unbound)
inspect.EndOfBlock() [class] Common base class for all non-exit exceptions.
inspect.FrameInfo(frame, filename, lineno, function, code_context, index) [class] FrameInfo(frame, filename, lineno, function, code_context, index)
inspect.FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations) [class] FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)
inspect.GEN_CLOSED
inspect.GEN_CREATED
inspect.GEN_RUNNING
inspect.GEN_SUSPENDED
inspect.OrderedDict() [class] Dictionary that remembers insertion order
inspect.Parameter(name, kind, *, default, annotation) [class] Represents a parameter in a function signature.
inspect.Signature(parameters=None, *, return_annotation, __validate_parameters__=True) [class] A Signature object represents the overall signature of a function.
inspect.TPFLAGS_IS_ABSTRACT
inspect.Traceback(filename, lineno, function, code_context, index) [class] Traceback(filename, lineno, function, code_context, index)
inspect.attrgetter() [class] attrgetter(attr, ...) --> attrgetter object Return a callable object that fetches
inspect.classify_class_attrs(cls) [function] Return list of attribute-descriptor tuples.
inspect.cleandoc(doc) [function] Clean up indentation from docstrings.
inspect.currentframe() [function] Return the frame of the caller or None if this is not possible.
inspect.findsource(object) [function] Return the entire source file and starting line number for an object.
inspect.formatannotation(annotation, base_module=None) [function]
inspect.formatannotationrelativeto(object) [function]
inspect.formatargspec(args, varargs=None, varkw=None, defaults=None, kwonlyargs=(), kwonlydefaults={}, annotations={}, formatarg=<??>, formatvarargs=<??>, formatvarkw=<??>, formatvalue=<??>, formatreturns=<??>, formatannotation=<??>) [function] Format an argument spec from the values returned by getfullargspec.
inspect.formatargvalues(args, varargs, varkw, locals, formatarg=<??>, formatvarargs=<??>, formatvarkw=<??>, formatvalue=<??>) [function] Format an argument spec from the 4 values returned by getargvalues.
inspect.getabsfile(object, _filename=None) [function] Return an absolute path to the source or compiled file for an object.
inspect.getargs(co) [function] Get information about the arguments accepted by a code object.
inspect.getargspec(func) [function] Get the names and default values of a function's parameters.
inspect.getargvalues(frame) [function] Get information about arguments passed into a particular frame.
inspect.getattr_static(obj, attr, default=<??>) [function] Retrieve attributes without triggering dynamic lookup via the descriptor protocol,
inspect.getblock(lines) [function] Extract the block of code at the top of the given list of lines.
inspect.getcallargs(*func_and_positional, **named) [function] Get the mapping of arguments to values.
inspect.getclasstree(classes, unique=False) [function] Arrange the given list of classes into a hierarchy of nested lists.
inspect.getclosurevars(func) [function] Get the mapping of free variables to their current values.
inspect.getcomments(object) [function] Get lines of comments immediately preceding an object's source code.
inspect.getcoroutinelocals(coroutine) [function] Get the mapping of coroutine local variables to their current values.
inspect.getcoroutinestate(coroutine) [function] Get current state of a coroutine object.
inspect.getdoc(object) [function] Get the documentation string for an object.
inspect.getfile(object) [function] Work out which source or compiled file an object was defined in.
inspect.getframeinfo(frame, context=1) [function] Get information about a frame or traceback object.
inspect.getfullargspec(func) [function] Get the names and default values of a callable object's parameters.
inspect.getgeneratorlocals(generator) [function] Get the mapping of generator local variables to their current values.
inspect.getgeneratorstate(generator) [function] Get current state of a generator-iterator.
inspect.getinnerframes(tb, context=1) [function] Get a list of records for a traceback's frame and all lower frames.
inspect.getlineno(frame) [function] Get the line number from a frame object, allowing for optimization.
inspect.getmembers(object, predicate=None) [function] Return all members of an object as (name, value) pairs sorted by name.
inspect.getmodule(object, _filename=None) [function] Return the module an object was defined in, or None if not found.
inspect.getmodulename(path) [function] Return the module name for a given file, or None.
inspect.getmro(cls) [function] Return tuple of base classes (including cls) in method resolution order.
inspect.getouterframes(frame, context=1) [function] Get a list of records for a frame and all higher (calling) frames.
inspect.getsource(object) [function] Return the text of the source code for an object.
inspect.getsourcefile(object) [function] Return the filename that can be used to locate an object's source.
inspect.getsourcelines(object) [function] Return a list of source lines and starting line number for an object.
inspect.indentsize(line) [function] Return the indent size, in spaces, at the start of a line of text.
inspect.isabstract(object) [function] Return true if the object is an abstract base class (ABC).
inspect.isasyncgen(object) [function] Return true if the object is an asynchronous generator.
inspect.isasyncgenfunction(object) [function] Return true if the object is an asynchronous generator function.
inspect.isawaitable(object) [function] Return true if object can be passed to an ``await`` expression.
inspect.isbuiltin(object) [function] Return true if the object is a built-in function or method.
inspect.isclass(object) [function] Return true if the object is a class.
inspect.iscode(object) [function] Return true if the object is a code object.
inspect.iscoroutine(object) [function] Return true if the object is a coroutine.
inspect.iscoroutinefunction(object) [function] Return true if the object is a coroutine function.
inspect.isdatadescriptor(object) [function] Return true if the object is a data descriptor.
inspect.isframe(object) [function] Return true if the object is a frame object.
inspect.isfunction(object) [function] Return true if the object is a user-defined function.
inspect.isgenerator(object) [function] Return true if the object is a generator.
inspect.isgeneratorfunction(object) [function] Return true if the object is a user-defined generator function.
inspect.isgetsetdescriptor(object) [function] Return true if the object is a getset descriptor.
inspect.ismemberdescriptor(object) [function] Return true if the object is a member descriptor.
inspect.ismethod(object) [function] Return true if the object is an instance method.
inspect.ismethoddescriptor(object) [function] Return true if the object is a method descriptor.
inspect.ismodule(object) [function] Return true if the object is a module.
inspect.isroutine(object) [function] Return true if the object is any kind of function or method.
inspect.istraceback(object) [function] Return true if the object is a traceback.
inspect.k
inspect.mod_dict
inspect.modulesbyfile
inspect.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None) [function] Returns a new subclass of tuple with named fields.
inspect.signature(obj, *, follow_wrapped=True) [function] Get a signature object for the passed callable.
inspect.stack(context=1) [function] Return a list of records for the stack above the caller's frame.
inspect.trace(context=1) [function] Return a list of records for the stack below the current exception.
inspect.unwrap(func, *, stop=None) [function] Get the object wrapped by *func*.
inspect.v
inspect.walktree(classes, children, parent) [function] Recursive helper function for getclasstree().
int([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
int(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
io
io.BlockingIOError() [class] I/O operation would block.
io.BufferedIOBase() [class] Base class for buffered IO objects.
io.BufferedRWPair(reader, writer, buffer_size=8192) [class] A buffered reader and writer object together.
io.BufferedRandom(raw, buffer_size=8192) [class] A buffered interface to random access streams.
io.BufferedReader(raw, buffer_size=8192) [class] Create a new buffered reader using the given readable raw IO object.
io.BufferedWriter(raw, buffer_size=8192) [class] A buffer for a writeable sequential RawIO object.
io.BytesIO(initial_bytes=b'') [class] Buffered I/O implementation using an in-memory bytes buffer.
io.FileIO(file, mode='r', closefd=True, opener=None) [class] Open a file.
io.IOBase() [class] The abstract base class for all I/O classes, acting on streams of bytes.
io.RawIOBase() [class] Base class for raw binary I/O.
io.SEEK_CUR
io.SEEK_END
io.SEEK_SET
io.StringIO(initial_value='', newline='\n') [class] Text I/O implementation using an in-memory buffer.
io.TextIOBase() [class] Base class for text I/O.
io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False) [class] Character and line based layer over a BufferedIOBase object, buffer.
io.UnsupportedOperation() [class] Base class for I/O related errors.
io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) Open file and return a stream.
ipaddress
ipaddress.AddressValueError() [class] A Value Error related to the address.
ipaddress.IPV4LENGTH
ipaddress.IPV6LENGTH
ipaddress.IPv4Address(address) [class] Represent and manipulate single IPv4 Addresses.
ipaddress.IPv4Interface(address) [class] Represent and manipulate single IPv4 Addresses.
ipaddress.IPv4Network(address, strict=True) [class] This class represents and manipulates 32-bit IPv4 network + addresses..
ipaddress.IPv6Address(address) [class] Represent and manipulate single IPv6 Addresses.
ipaddress.IPv6Interface(address) [class] Represent and manipulate single IPv6 Addresses.
ipaddress.IPv6Network(address, strict=True) [class] This class represents and manipulates 128-bit IPv6 networks.
ipaddress.NetmaskValueError() [class] A Value Error related to the netmask.
ipaddress.collapse_addresses(addresses) [function] Collapse a list of IP objects.
ipaddress.get_mixed_type_key(obj) [function] Return a key suitable for sorting between networks and addresses.
ipaddress.ip_address(address) [function] Take an IP string/int and return an object of the correct type.
ipaddress.ip_interface(address) [function] Take an IP string/int and return an object of the correct type.
ipaddress.ip_network(address, strict=True) [function] Take an IP string/int and return an object of the correct type.
ipaddress.summarize_address_range(first, last) [function] Summarize a network range given the first and last IP addresses.
ipaddress.v4_int_to_packed(address) [function] Represent an address as 4 packed bytes in network (big-endian) order.
ipaddress.v6_int_to_packed(address) [function] Represent an address as 16 packed bytes in network (big-endian) order.
is
isinstance(obj, class_or_tuple) Return whether an object is an instance of a class or of a subclass thereof.
issubclass(cls, class_or_tuple) Return whether 'cls' is a derived from another class or is the same class.
iter(object[, sentinel]) iter(iterable) -> iterator iter(callable, sentinel) -> iterator Get an iterator from
itertools
itertools.accumulate() [class] accumulate(iterable[, func]) --> accumulate object Return series of accumulated sums
itertools.chain(*iterables) [class] chain(*iterables) --> chain object Return a chain object whose .__next__() method
itertools.combinations() [class] combinations(iterable, r) --> combinations object Return successive r-length combinations
itertools.combinations_with_replacement() [class] combinations_with_replacement(iterable, r) --> combinations_with_replacement object
itertools.compress() [class] compress(data, selectors) --> iterator over selected data Return data elements corresponding
itertools.count() [class] count(start=0, step=1) --> count object Return a count object whose .__next__() method
itertools.cycle() [class] cycle(iterable) --> cycle object Return elements from the iterable until it is exhausted.
itertools.dropwhile() [class] dropwhile(predicate, iterable) --> dropwhile object Drop items from the iterable
itertools.filterfalse() [class] filterfalse(function or None, sequence) --> filterfalse object Return those items
itertools.groupby() [class] groupby(iterable, key=None) -> make an iterator that returns consecutive keys and
itertools.islice(iterable, stop) [class] islice(iterable, stop) --> islice object islice(iterable, start, stop[, step]) -->
itertools.islice(iterable, start, stop[, step]) [class] islice(iterable, stop) --> islice object islice(iterable, start, stop[, step]) -->
itertools.permutations() [class] permutations(iterable[, r]) --> permutations object Return successive r-length permutations
itertools.product(*iterables, repeat=1) [class] product(*iterables, repeat=1) --> product object Cartesian product of input iterables.
itertools.repeat(object[, times]) [class] repeat(object [,times]) -> create an iterator which returns the object for the specified
itertools.starmap() [class] starmap(function, sequence) --> starmap object Return an iterator whose values are
itertools.takewhile() [class] takewhile(predicate, iterable) --> takewhile object Return successive entries from
itertools.tee() tee(iterable, n=2) --> tuple of n independent iterators.
itertools.zip_longest(*iterables, fillvalue=None) [class] zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object Return
json
json.JSONDecodeError(msg, doc, pos) [class] Subclass of ValueError with the following additional properties: msg: The unformatted
json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None) [class] Simple JSON <http://json.org> decoder Performs the following translations in decoding
json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None) [class] Extensible JSON <http://json.org> encoder for Python data structures.
json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) [function] Serialize ``obj`` as a JSON formatted stream to ``fp`` (a ``.write()``-supporting
json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) [function] Serialize ``obj`` to a JSON formatted ``str``.
json.load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) [function] Deserialize ``fp`` (a ``.read()``-supporting file-like object containing a JSON document)
json.loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) [function] Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance containing a JSON
keyword
keyword.iskeyword(s) x.__contains__(y) <==> y in x.
keyword.kwlist
lambda
len(obj) Return the number of items in a container.
lib2to3
license() interactive prompt objects for printing the license text, a list of contributors
linecache
linecache.checkcache(filename=None) [function] Discard cache entries that are out of date.
linecache.clearcache() [function] Clear the cache entirely.
linecache.getline(filename, lineno, module_globals=None) [function]
list(iterable=()) [class] Built-in mutable sequence.
locale
locale.CHAR_MAX
locale.Error() [class] Common base class for all non-exit exceptions.
locale.LC_ALL
locale.LC_COLLATE
locale.LC_CTYPE
locale.LC_MONETARY
locale.LC_NUMERIC
locale.LC_TIME
locale.atof(string, func=<??>) [function] Parses a string as a float according to the locale settings.
locale.atoi(string) [function] Converts a string to an integer according to the locale settings.
locale.currency(val, symbol=True, grouping=False, international=False) [function] Formats val according to the currency settings in the current locale.
locale.format(percent, value, grouping=False, monetary=False, *additional) [function] Deprecated, use format_string instead.
locale.format_string(f, val, grouping=False, monetary=False) [function] Formats a string in the same way that the % formatting would use, but takes the current
locale.getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')) [function] Tries to determine the default locale settings and returns them as tuple (language
locale.getlocale(category=2) [function] Returns the current setting for the given locale category as tuple (language code,
locale.getpreferredencoding(do_setlocale=True) [function] Return the charset that the user is likely using.
locale.localeconv() [function] () -> dict. Returns numeric and monetary locale-specific parameters.
locale.normalize(localename) [function] Returns a normalized locale code for the given locale name.
locale.resetlocale(category=0) [function] Sets the locale for category to the default setting.
locale.setlocale(category, locale=None) [function] Set the locale for the given category.
locale.str(val) [function] Convert float to string, taking the locale into account.
locale.strcoll(string1, string2) string,string -> int. Compares two strings according to the locale.
locale.strxfrm(string) strxfrm(string) -> string.
locals() Return a dictionary containing the current scope's local variables.
logging
logging.BASIC_FORMAT
logging.BufferingFormatter(linefmt=None) [class] A formatter suitable for formatting a number of records.
logging.CRITICAL
logging.DEBUG
logging.ERROR
logging.FATAL
logging.FileHandler(filename, mode='a', encoding=None, delay=False) [class] A handler class which writes formatted logging records to disk files.
logging.Filter(name='') [class] Filter instances are used to perform arbitrary filtering of LogRecords.
logging.Formatter(fmt=None, datefmt=None, style='%') [class] Formatter instances are used to convert a LogRecord to text.
logging.Handler(level=0) [class] Handler instances dispatch logging events to specific destinations.
logging.INFO
logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None, **kwargs) [class] A LogRecord instance represents an event being logged.
logging.Logger(name, level=0) [class] Instances of the Logger class represent a single logging channel.
logging.LoggerAdapter(logger, extra) [class] An adapter for loggers which makes it easier to specify contextual information in
logging.NOTSET
logging.NullHandler(level=0) [class] This handler does nothing.
logging.StreamHandler(stream=None) [class] A handler class which writes logging records, appropriately formatted, to a stream.
logging.WARN
logging.WARNING
logging.addLevelName(level, levelName) [function] Associate 'levelName' with 'level'.
logging.basicConfig(**kwargs) [function] Do basic configuration for the logging system.
logging.captureWarnings(capture) [function] If capture is true, redirect all warnings to the logging package.
logging.critical(msg, *args, **kwargs) [function] Log a message with severity 'CRITICAL' on the root logger.
logging.debug(msg, *args, **kwargs) [function] Log a message with severity 'DEBUG' on the root logger.
logging.disable(level=50) [function] Disable all logging calls of severity 'level' and below.
logging.error(msg, *args, **kwargs) [function] Log a message with severity 'ERROR' on the root logger.
logging.exception(msg, *args, *, exc_info=True, **kwargs) [function] Log a message with severity 'ERROR' on the root logger, with exception information.
logging.fatal(msg, *args, **kwargs) [function] Log a message with severity 'CRITICAL' on the root logger.
logging.getLevelName(level) [function] Return the textual representation of logging level 'level'.
logging.getLogRecordFactory() [function] Return the factory to be used when instantiating a log record.
logging.getLogger(name=None) [function] Return a logger with the specified name, creating it if necessary.
logging.getLoggerClass() [function] Return the class to be used when instantiating a logger.
logging.info(msg, *args, **kwargs) [function] Log a message with severity 'INFO' on the root logger.
logging.lastResort
logging.log(level, msg, *args, **kwargs) [function] Log 'msg % args' with the integer severity 'level' on the root logger.
logging.makeLogRecord(dict) [function] Make a LogRecord whose attributes are defined by the specified dictionary, This function
logging.raiseExceptions
logging.setLogRecordFactory(factory) [function] Set the factory to be used when instantiating a log record.
logging.setLoggerClass(klass) [function] Set the class to be used when instantiating a logger.
logging.shutdown() [function] Perform any cleanup actions in the logging system (e.g.
logging.warn(msg, *args, **kwargs) [function]
logging.warning(msg, *args, **kwargs) [function] Log a message with severity 'WARNING' on the root logger.
lzma
lzma.CHECK_CRC32
lzma.CHECK_CRC64
lzma.CHECK_ID_MAX
lzma.CHECK_NONE
lzma.CHECK_SHA256
lzma.CHECK_UNKNOWN
lzma.FILTER_ARM
lzma.FILTER_ARMTHUMB
lzma.FILTER_DELTA
lzma.FILTER_IA64
lzma.FILTER_LZMA1
lzma.FILTER_LZMA2
lzma.FILTER_POWERPC
lzma.FILTER_SPARC
lzma.FILTER_X86
lzma.FORMAT_ALONE
lzma.FORMAT_AUTO
lzma.FORMAT_RAW
lzma.FORMAT_XZ
lzma.LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None) [class] LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None) Create a compressor
lzma.LZMADecompressor(format=0, memlimit=None, filters=None) [class] Create a decompressor object for decompressing data incrementally.
lzma.LZMAError() [class] Call to liblzma failed.
lzma.LZMAFile(filename=None, mode='r', *, format=None, check=-1, preset=None, filters=None) [class] A file object providing transparent LZMA (de)compression.
lzma.MF_BT2
lzma.MF_BT3
lzma.MF_BT4
lzma.MF_HC3
lzma.MF_HC4
lzma.MODE_FAST
lzma.MODE_NORMAL
lzma.PRESET_DEFAULT
lzma.PRESET_EXTREME
lzma.compress(data, format=1, check=-1, preset=None, filters=None) [function] Compress a block of data.
lzma.decompress(data, format=0, memlimit=None, filters=None) [function] Decompress a block of data.
lzma.is_check_supported(check_id) Test whether the given integrity check is supported.
lzma.open(filename, mode='rb', *, format=None, check=-1, preset=None, filters=None, encoding=None, errors=None, newline=None) [function] Open an LZMA-compressed file in binary or text mode.
mailbox
mailbox.Babyl(path, factory=None, create=True) [class] An Rmail-style Babyl mailbox.
mailbox.BabylMessage(message=None) [class] Message with Babyl-specific properties.
mailbox.Error() [class] Raised for module-specific errors.
mailbox.ExternalClashError() [class] Another process caused an action to fail.
mailbox.FormatError() [class] A file appears to have an invalid format.
mailbox.MH(path, factory=None, create=True) [class] An MH mailbox.
mailbox.MHMessage(message=None) [class] Message with MH-specific properties.
mailbox.MMDF(path, factory=None, create=True) [class] An MMDF mailbox.
mailbox.MMDFMessage(message=None) [class] Message with MMDF-specific properties.
mailbox.Mailbox(path, factory=None, create=True) [class] A group of messages in a particular place.
mailbox.Maildir(dirname, factory=None, create=True) [class] A qmail-style Maildir mailbox.
mailbox.MaildirMessage(message=None) [class] Message with Maildir-specific properties.
mailbox.Message(message=None) [class] Message with mailbox-format-specific properties.
mailbox.NoSuchMailboxError() [class] The specified mailbox does not exist and won't be created.
mailbox.NotEmptyError() [class] The specified mailbox is not empty and deletion was requested.
mailbox.mbox(path, factory=None, create=True) [class] A classic mbox mailbox.
mailbox.mboxMessage(message=None) [class] Message with mbox-specific properties.
mailcap
mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[]) [function] Find a match for a mailcap entry.
mailcap.getcaps() [function] Return a dictionary containing the mailcap database.
map(function, iterable, ...) [class] map(func, *iterables) --> map object Make an iterator that computes the function
marshal
marshal.dump(value, file, version=4) Write the value on the open file.
marshal.dumps(value, version=4) Return the bytes object that would be written to a file by dump(value, file).
marshal.load(file) Read one value from the open file and return it. file Must be readable binary file.
marshal.loads(bytes) Convert the bytes-like object to a value.
marshal.version
math
math.acos(x) Return the arc cosine (measured in radians) of x.
math.acosh(x) Return the inverse hyperbolic cosine of x.
math.asin(x) Return the arc sine (measured in radians) of x.
math.asinh(x) Return the inverse hyperbolic sine of x.
math.atan(x) Return the arc tangent (measured in radians) of x.
math.atan2(y, x) Return the arc tangent (measured in radians) of y/x.
math.atanh(x) Return the inverse hyperbolic tangent of x.
math.ceil(x) Return the ceiling of x as an Integral. This is the smallest integer >= x.
math.copysign(x, y) Return a float with the magnitude (absolute value) of x but the sign of y.
math.cos(x) Return the cosine of x (measured in radians).
math.cosh(x) Return the hyperbolic cosine of x.
math.degrees(x) Convert angle x from radians to degrees.
math.e
math.erf(x) Error function at x.
math.erfc(x) Complementary error function at x.
math.exp(x) Return e raised to the power of x.
math.expm1(x) Return exp(x)-1.
math.fabs(x) Return the absolute value of the float x.
math.factorial(x) Find x!. Raise a ValueError if x is negative or non-integral.
math.floor(x) Return the floor of x as an Integral. This is the largest integer <= x.
math.fmod(x, y) Return fmod(x, y), according to platform C. x % y may differ.
math.frexp(x) Return the mantissa and exponent of x, as pair (m, e).
math.fsum(seq) Return an accurate floating point sum of values in the iterable seq.
math.gamma(x) Gamma function at x.
math.gcd(x, y) greatest common divisor of x and y
math.hypot(x, y) Return the Euclidean distance, sqrt(x*x + y*y).
math.inf
math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) Determine whether two floating point numbers are close in value.
math.isfinite(x) Return True if x is neither an infinity nor a NaN, and False otherwise.
math.isinf(x) Return True if x is a positive or negative infinity, and False otherwise.
math.isnan(x) Return True if x is a NaN (not a number), and False otherwise.
math.ldexp(x, i) Return x * (2**i). This is essentially the inverse of frexp().
math.lgamma(x) Natural logarithm of absolute value of Gamma function at x.
math.log(x[, base]) log(x, [base=math.e]) Return the logarithm of x to the given base.
math.log10(x) Return the base 10 logarithm of x.
math.log1p(x) Return the natural logarithm of 1+x (base e).
math.log2(x) Return the base 2 logarithm of x.
math.modf(x) Return the fractional and integer parts of x.
math.nan
math.pi
math.pow(x, y) Return x**y (x to the power of y).
math.radians(x) Convert angle x from degrees to radians.
math.remainder(x, y) Difference between x and the closest integer multiple of y.
math.sin(x) Return the sine of x (measured in radians).
math.sinh(x) Return the hyperbolic sine of x.
math.sqrt(x) Return the square root of x.
math.tan(x) Return the tangent of x (measured in radians).
math.tanh(x) Return the hyperbolic tangent of x.
math.tau
math.trunc(x) Truncates the Real x to the nearest Integral toward 0. Uses the __trunc__ magic method.
max(arg1, arg2, *args[, key]) max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func])
max(iterable, *[, key, default]) max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func])
memoryview(object) [class] Create a new memoryview object which references the given object.
mimetypes
mimetypes.MimeTypes(filenames=(), strict=True) [class] MIME-types datastore.
mimetypes.add_type(type, ext, strict=True) [function] Add a mapping between a type and an extension.
mimetypes.common_types
mimetypes.encodings_map
mimetypes.guess_all_extensions(type, strict=True) [function] Guess the extensions for a file based on its MIME type.
mimetypes.guess_extension(type, strict=True) [function] Guess the extension for a file based on its MIME type.
mimetypes.guess_type(url, strict=True) [function] Guess the type of a file based on its URL.
mimetypes.init(files=None) [function]
mimetypes.inited
mimetypes.knownfiles
mimetypes.read_mime_types(file) [function]
mimetypes.suffix_map
mimetypes.types_map
min(arg1, arg2, *args[, key]) min(iterable, *[, default=obj, key=func]) -> value min(arg1, arg2, *args, *[, key=func])
min(iterable, *[, key, default]) min(iterable, *[, default=obj, key=func]) -> value min(arg1, arg2, *args, *[, key=func])
mmap
mmap.ACCESS_COPY
mmap.ACCESS_DEFAULT
mmap.ACCESS_READ
mmap.ACCESS_WRITE
mmap.ALLOCATIONGRANULARITY
mmap.PAGESIZE
mmap.error() [class] Base class for I/O related errors.
mmap.mmap(fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ, access=ACCESS_DEFAULT[, offset]) [class] Windows: mmap(fileno, length[, tagname[, access[, offset]]]) Maps length bytes from
mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT[, offset]) [class] Windows: mmap(fileno, length[, tagname[, access[, offset]]]) Maps length bytes from
modulefinder
modulefinder.AddPackagePath(packagename, path) [function]
modulefinder.EXTENDED_ARG
modulefinder.IMPORT_NAME
modulefinder.LOAD_CONST
modulefinder.Module(name, file=None, path=None) [class]
modulefinder.ModuleFinder(path=None, debug=0, excludes=[], replace_paths=[]) [class]
modulefinder.ReplacePackage(oldname, newname) [function]
modulefinder.STORE_GLOBAL
modulefinder.STORE_NAME
modulefinder.STORE_OPS
modulefinder.packagePathMap
modulefinder.replacePackageMap
modulefinder.test() [function]
msilib
msilib.AMD64
msilib.Binary(fname) [class]
msilib.CAB(name) [class]
msilib.Control(dlg, name) [class]
msilib.CreateRecord(count) OpenDatabase(name, flags) -> dbobj Wraps MsiCreateRecord
msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel) [class]
msilib.Directory(db, cab, basedir, physical, _logical, default, componentflags=None) [class]
msilib.FCICreate(cabname, files) fcicreate(cabname,files) -> None
msilib.Feature(db, id, title, desc, display, level=1, parent=None, directory=None, attributes=0) [class]
msilib.MSICOLINFO_NAMES
msilib.MSICOLINFO_TYPES
msilib.MSIDBOPEN_CREATE
msilib.MSIDBOPEN_CREATEDIRECT
msilib.MSIDBOPEN_DIRECT
msilib.MSIDBOPEN_PATCHFILE
msilib.MSIDBOPEN_READONLY
msilib.MSIDBOPEN_TRANSACT
msilib.MSIError() [class] Common base class for all non-exit exceptions.
msilib.MSIMODIFY_ASSIGN
msilib.MSIMODIFY_DELETE
msilib.MSIMODIFY_INSERT
msilib.MSIMODIFY_INSERT_TEMPORARY
msilib.MSIMODIFY_MERGE
msilib.MSIMODIFY_REFRESH
msilib.MSIMODIFY_REPLACE
msilib.MSIMODIFY_SEEK
msilib.MSIMODIFY_UPDATE
msilib.MSIMODIFY_VALIDATE
msilib.MSIMODIFY_VALIDATE_DELETE
msilib.MSIMODIFY_VALIDATE_FIELD
msilib.MSIMODIFY_VALIDATE_NEW
msilib.OpenDatabase(path, persist) OpenDatabase(name, flags) -> dbobj Wraps MsiOpenDatabase
msilib.PID_APPNAME
msilib.PID_AUTHOR
msilib.PID_CHARCOUNT
msilib.PID_CODEPAGE
msilib.PID_COMMENTS
msilib.PID_CREATE_DTM
msilib.PID_KEYWORDS
msilib.PID_LASTAUTHOR
msilib.PID_LASTPRINTED
msilib.PID_LASTSAVE_DTM
msilib.PID_PAGECOUNT
msilib.PID_REVNUMBER
msilib.PID_SECURITY
msilib.PID_SUBJECT
msilib.PID_TEMPLATE
msilib.PID_TITLE
msilib.PID_WORDCOUNT
msilib.RadioButtonGroup(dlg, name, property) [class]
msilib.Table(name) [class]
msilib.UuidCreate() UuidCreate() -> string
msilib.Win64
msilib.add_data(db, table, values) [function]
msilib.add_stream(db, name, path) [function]
msilib.add_tables(db, module) [function]
msilib.change_sequence(seq, action, seqno=<??>, cond=<??>) [function] Change the sequence number of an action in a sequence list
msilib.datasizemask
msilib.gen_uuid() [function]
msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer) [function]
msilib.knownbits
msilib.make_id(str) [function]
msilib.type_binary
msilib.type_key
msilib.type_localizable
msilib.type_long
msilib.type_nullable
msilib.type_short
msilib.type_string
msilib.type_valid
msilib.typemask
msvcrt
msvcrt.CRT_ASSEMBLY_VERSION
msvcrt.LK_LOCK
msvcrt.LK_NBLCK
msvcrt.LK_NBRLCK
msvcrt.LK_RLCK
msvcrt.LK_UNLCK
msvcrt.SEM_FAILCRITICALERRORS
msvcrt.SEM_NOALIGNMENTFAULTEXCEPT
msvcrt.SEM_NOGPFAULTERRORBOX
msvcrt.SEM_NOOPENFILEERRORBOX
msvcrt.SetErrorMode(mode) Wrapper around SetErrorMode.
msvcrt.get_osfhandle(fd) Return the file handle for the file descriptor fd. Raises OSError if fd is not recognized.
msvcrt.getch() Read a keypress and return the resulting character as a byte string.
msvcrt.getche() Similar to getch(), but the keypress will be echoed if possible.
msvcrt.getwch() Wide char variant of getch(), returning a Unicode value.
msvcrt.getwche() Wide char variant of getche(), returning a Unicode value.
msvcrt.heapmin() Minimize the malloc() heap.
msvcrt.kbhit() Return true if a keypress is waiting to be read.
msvcrt.locking(fd, mode, nbytes) Lock part of a file based on file descriptor fd from the C runtime.
msvcrt.open_osfhandle(handle, flags) Create a C runtime file descriptor from the file handle handle.
msvcrt.putch(char) Print the byte string char to the console without buffering.
msvcrt.putwch(unicode_char) Wide char variant of putch(), accepting a Unicode value.
msvcrt.setmode(fd, mode) Set the line-end translation mode for the file descriptor fd.
msvcrt.ungetch(char) Opposite of getch.
msvcrt.ungetwch(unicode_char) Wide char variant of ungetch(), accepting a Unicode value.
multiprocessing
multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True) [method] Returns a synchronized shared array
multiprocessing.AuthenticationError() [class] Common base class for all non-exit exceptions.
multiprocessing.Barrier(parties, action=None, timeout=None) [method] Returns a barrier object
multiprocessing.BoundedSemaphore(value=1) [method] Returns a bounded semaphore object
multiprocessing.BufferTooShort() [class] Common base class for all non-exit exceptions.
multiprocessing.Condition(lock=None) [method] Returns a condition object
multiprocessing.Event() [method] Returns an event object
multiprocessing.JoinableQueue(maxsize=0) [method] Returns a queue object
multiprocessing.Lock() [method] Returns a non-recursive lock object
multiprocessing.Manager() [method] Returns a manager associated with a running server process The managers methods such
multiprocessing.Pipe(duplex=True) [method] Returns two connection object connected by a pipe
multiprocessing.Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None) [method] Returns a process pool object
multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None) [class] Process objects represent activity that is run in a separate process The class is
multiprocessing.ProcessError() [class] Common base class for all non-exit exceptions.
multiprocessing.Queue(maxsize=0) [method] Returns a queue object
multiprocessing.RLock() [method] Returns a recursive lock object
multiprocessing.RawArray(typecode_or_type, size_or_initializer) [method] Returns a shared array
multiprocessing.RawValue(typecode_or_type, *args) [method] Returns a shared object
multiprocessing.Semaphore(value=1) [method] Returns a semaphore object
multiprocessing.SimpleQueue() [method] Returns a queue object
multiprocessing.TimeoutError() [class] Common base class for all non-exit exceptions.
multiprocessing.Value(typecode_or_type, *args, *, lock=True) [method] Returns a synchronized shared object
multiprocessing.active_children() [function] Return list of process objects corresponding to live child processes
multiprocessing.allow_connection_pickling() [method] Install support for sending connections and sockets between processes
multiprocessing.connection
multiprocessing.connection.Client(address, family=None, authkey=None) [function] Returns a connection to the address of a `Listener`
multiprocessing.connection.Listener(address=None, family=None, backlog=1, authkey=None) [class] Returns a listener object.
multiprocessing.connection.Pipe(duplex=True) [function] Returns pair of connection objects at either end of a pipe
multiprocessing.connection.wait(object_list, timeout=None) [function] Wait till an object in object_list is ready/readable.
multiprocessing.cpu_count() [method] Returns the number of CPUs in the system
multiprocessing.current_process() [function] Return process object representing the current process
multiprocessing.dummy
multiprocessing.dummy.Barrier(parties, action=None, timeout=None) [class] Implements a Barrier.
multiprocessing.dummy.BoundedSemaphore(value=1) [class] Implements a bounded semaphore.
multiprocessing.dummy.Condition(lock=None) [class] Class that implements a condition variable.
multiprocessing.dummy.Event() [class] Class implementing event objects.
multiprocessing.dummy.JoinableQueue(maxsize=0) [class] Create a queue object with a given maximum size.
multiprocessing.dummy.Lock() allocate_lock() -> lock object (allocate() is an obsolete synonym) Create a new lock
multiprocessing.dummy.Manager() [function]
multiprocessing.dummy.Pipe(duplex=True) [function]
multiprocessing.dummy.Pool(processes=None, initializer=None, initargs=()) [function]
multiprocessing.dummy.Process(group=None, target=None, name=None, args=(), kwargs={}) [class] A class that represents a thread of control.
multiprocessing.dummy.Queue(maxsize=0) [class] Create a queue object with a given maximum size.
multiprocessing.dummy.RLock(*args, **kwargs) [function] Factory function that returns a new reentrant lock.
multiprocessing.dummy.Semaphore(value=1) [class] This class implements semaphore objects.
multiprocessing.dummy.active_children() [function]
multiprocessing.dummy.current_process() [function] Return the current Thread object, corresponding to the caller's thread of control.
multiprocessing.dummy.freeze_support() [function]
multiprocessing.freeze_support() [method] Check whether this is a fake forked process in a frozen executable.
multiprocessing.get_all_start_methods() [method]
multiprocessing.get_context(method=None) [method]
multiprocessing.get_logger() [method] Return package logger -- if it does not already exist then it is created.
multiprocessing.get_start_method(allow_none=False) [method]
multiprocessing.log_to_stderr(level=None) [method] Turn on logging and add a handler which prints to stderr
multiprocessing.managers
multiprocessing.managers.BaseManager(address=None, authkey=None, serializer='pickle', ctx=None) [class] Base class for managers
multiprocessing.managers.BaseProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True, manager_owned=False) [class] A base for proxies of shared objects
multiprocessing.managers.SyncManager(address=None, authkey=None, serializer='pickle', ctx=None) [class] Subclass of `BaseManager` which supports a number of shared object types.
multiprocessing.managers.Token(typeid, address, id) [class] Type to uniquely indentify a shared object
multiprocessing.pool
multiprocessing.pool.Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None, context=None) [class] Class which supports an async version of applying functions to arguments.
multiprocessing.pool.ThreadPool(processes=None, initializer=None, initargs=()) [class] Class which supports an async version of applying functions to arguments.
multiprocessing.set_executable(executable) [method] Sets the path to a python.exe or pythonw.exe binary used to run child processes instead
multiprocessing.set_forkserver_preload(module_names) [method] Set list of module names to try to load in forkserver process.
multiprocessing.set_start_method(method, force=False) [method]
multiprocessing.sharedctypes
multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True, ctx=None) [function] Return a synchronization wrapper for a RawArray
multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer) [function] Returns a ctypes array allocated from shared memory
multiprocessing.sharedctypes.RawValue(typecode_or_type, *args) [function] Returns a ctypes object allocated from shared memory
multiprocessing.sharedctypes.Value(typecode_or_type, *args, *, lock=True, ctx=None) [function] Return a synchronization wrapper for a Value
multiprocessing.sharedctypes.copy(obj) [function]
multiprocessing.sharedctypes.synchronized(obj, lock=None, ctx=None) [function]
netrc
netrc.NetrcParseError(msg, filename=None, lineno=None) [class] Exception raised on syntax errors in the .netrc file.
netrc.netrc(file=None) [class]
next(iterator[, default]) next(iterator[, default]) Return the next item from the iterator.
nntplib
nntplib.NNTP(host, port=119, user=None, password=None, readermode=None, usenetrc=False, timeout=<??>) [class]
nntplib.NNTPDataError(*args) [class] Error in response data
nntplib.NNTPError(*args) [class] Base class for all nntplib exceptions
nntplib.NNTPPermanentError(*args) [class] 5xx errors
nntplib.NNTPProtocolError(*args) [class] Response does not begin with [1-5]
nntplib.NNTPReplyError(*args) [class] Unexpected [123]xx reply
nntplib.NNTPTemporaryError(*args) [class] 4xx errors
nntplib.NNTP_SSL(host, port=563, user=None, password=None, ssl_context=None, readermode=None, usenetrc=False, timeout=<??>) [class]
nntplib.decode_header(header_str) [function] Takes a unicode string representing a munged header value and decodes it as a (possibly
nonlocal
not
nt
nt.DirEntry() [class]
nt.F_OK
nt.O_APPEND
nt.O_BINARY
nt.O_CREAT
nt.O_EXCL
nt.O_NOINHERIT
nt.O_RANDOM
nt.O_RDONLY
nt.O_RDWR
nt.O_SEQUENTIAL
nt.O_SHORT_LIVED
nt.O_TEMPORARY
nt.O_TEXT
nt.O_TRUNC
nt.O_WRONLY
nt.P_DETACH
nt.P_NOWAIT
nt.P_NOWAITO
nt.P_OVERLAY
nt.P_WAIT
nt.R_OK
nt.TMP_MAX
nt.W_OK
nt.X_OK
nt.abort() Abort the interpreter immediately.
nt.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True) Use the real uid/gid to test for access to a path.
nt.chdir(path) Change the current working directory to the specified path.
nt.chmod(path, mode, *, dir_fd=None, follow_symlinks=True) Change the access permissions of a file.
nt.close(fd) Close a file descriptor.
nt.closerange(fd_low, fd_high) Closes all file descriptors in [fd_low, fd_high), ignoring errors.
nt.cpu_count() Return the number of CPUs in the system; return None if indeterminable.
nt.device_encoding(fd) Return a string describing the encoding of a terminal's file descriptor.
nt.dup(fd) Return a duplicate of a file descriptor.
nt.dup2(fd, fd2, inheritable=True) Duplicate file descriptor.
nt.environ
nt.error() [class] Base class for I/O related errors.
nt.execv(path, argv) Execute an executable path with arguments, replacing current process.
nt.execve(path, argv, env) Execute an executable path with arguments, replacing current process.
nt.fspath(path) Return the file system path representation of the object.
nt.fstat(fd) Perform a stat system call on the given file descriptor.
nt.fsync(fd) Force write of fd to disk.
nt.ftruncate(fd, length) Truncate a file, specified by file descriptor, to a specific length.
nt.get_handle_inheritable(handle) Get the close-on-exe flag of the specified file descriptor.
nt.get_inheritable(fd) Get the close-on-exe flag of the specified file descriptor.
nt.get_terminal_size() Return the size of the terminal window as (columns, lines).
nt.getcwd() Return a unicode string representing the current working directory.
nt.getcwdb() Return a bytes string representing the current working directory.
nt.getlogin() Return the actual login name.
nt.getpid() Return the current process id.
nt.getppid() Return the parent's process id.
nt.isatty(fd) Return True if the fd is connected to a terminal.
nt.kill(pid, signal) Kill a process with a signal.
nt.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True) Create a hard link to a file.
nt.listdir(path=None) Return a list containing the names of the files in the directory.
nt.lseek(fd, position, how) Set the position of a file descriptor.
nt.lstat(path, *, dir_fd=None) Perform a stat system call on the given path, without following symbolic links.
nt.mkdir(path, mode=511, *, dir_fd=None) Create a directory.
nt.open(path, flags, mode=511, *, dir_fd=None) Open a file for low level IO.
nt.pipe() Create a pipe.
nt.putenv(name, value) Change or add an environment variable.
nt.read(fd, length) Read from a file descriptor. Returns a bytes object.
nt.readlink() readlink(path, *, dir_fd=None) -> path Return a string representing the path to which
nt.remove(path, *, dir_fd=None) Remove a file (same as unlink()).
nt.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None) Rename a file or directory.
nt.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None) Rename a file or directory, overwriting the destination.
nt.rmdir(path, *, dir_fd=None) Remove a directory.
nt.scandir(path=None) Return an iterator of DirEntry objects for given path.
nt.set_handle_inheritable(handle, inheritable) Set the inheritable flag of the specified handle.
nt.set_inheritable(fd, inheritable) Set the inheritable flag of the specified file descriptor.
nt.spawnv(mode, path, argv) Execute the program specified by path in a new process. mode Mode of process creation.
nt.spawnve(mode, path, argv, env) Execute the program specified by path in a new process. mode Mode of process creation.
nt.startfile(filepath, operation=None) startfile(filepath [, operation]) Start a file with its associated application.
nt.stat(path, *, dir_fd=None, follow_symlinks=True) Perform a stat system call on the given path.
nt.stat_result(iterable=()) [class] stat_result: Result from stat, fstat, or lstat.
nt.statvfs_result(iterable=()) [class] statvfs_result: Result from statvfs or fstatvfs.
nt.strerror(code) Translate an error code to a message string.
nt.symlink(src, dst, target_is_directory=False, *, dir_fd=None) Create a symbolic link pointing to src named dst.
nt.system(command) Execute the command in a subshell.
nt.terminal_size(iterable=()) [class] A tuple of (columns, lines) for holding terminal window size
nt.times() Return a collection containing process timing information.
nt.times_result(iterable=()) [class] times_result: Result from os.times().
nt.truncate(path, length) Truncate a file, specified by path, to a specific length.
nt.umask(mask) Set the current numeric umask and return the previous umask.
nt.uname_result(iterable=()) [class] uname_result: Result from os.uname().
nt.unlink(path, *, dir_fd=None) Remove a file (same as remove()).
nt.urandom(size) Return a bytes object containing random bytes suitable for cryptographic use.
nt.utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True) Set the access and modified time of path. path may always be specified as a string.
nt.waitpid(pid, options) Wait for completion of a given process.
nt.write(fd, data) Write a bytes object to a file descriptor.
ntpath
ntpath.abspath(path) [function] Return the absolute version of a path.
ntpath.altsep
ntpath.basename(p) [function] Returns the final component of a pathname
ntpath.commonpath(paths) [function] Given a sequence of path names, returns the longest common sub-path.
ntpath.commonprefix(m) [function] Given a list of pathnames, returns the longest common leading component
ntpath.curdir
ntpath.defpath
ntpath.devnull
ntpath.dirname(p) [function] Returns the directory component of a pathname
ntpath.exists(path) [function] Test whether a path exists.
ntpath.expanduser(path) [function] Expand ~ and ~user constructs. If user or $HOME is unknown, do nothing.
ntpath.expandvars(path) [function] Expand shell variables of the forms $var, ${var} and %var%.
ntpath.extsep
ntpath.getatime(filename) [function] Return the last access time of a file, reported by os.stat().
ntpath.getctime(filename) [function] Return the metadata change time of a file, reported by os.stat().
ntpath.getmtime(filename) [function] Return the last modification time of a file, reported by os.stat().
ntpath.getsize(filename) [function] Return the size of a file, reported by os.stat().
ntpath.isabs(s) [function] Test whether a path is absolute
ntpath.isdir(path) Return true if the pathname refers to an existing directory.
ntpath.isfile(path) [function] Test whether a path is a regular file
ntpath.islink(path) [function] Test whether a path is a symbolic link.
ntpath.ismount(path) [function] Test whether a path is a mount point (a drive root, the root of a share, or a mounted
ntpath.join(path, *paths) [function]
ntpath.lexists(path) [function] Test whether a path exists.
ntpath.normcase(s) [function] Normalize case of pathname. Makes all characters lowercase and all slashes into backslashes.
ntpath.normpath(path) [function] Normalize path, eliminating double slashes, etc.
ntpath.pardir
ntpath.pathsep
ntpath.realpath(path) [function] Return the absolute version of a path.
ntpath.relpath(path, start=None) [function] Return a relative version of a path
ntpath.samefile(f1, f2) [function] Test whether two pathnames reference the same actual file
ntpath.sameopenfile(fp1, fp2) [function] Test whether two open file objects reference the same file
ntpath.samestat(s1, s2) [function] Test whether two stat buffers reference the same file
ntpath.sep
ntpath.split(p) [function] Split a pathname.
ntpath.splitdrive(p) [function] Split a pathname into drive/UNC sharepoint and relative path specifiers.
ntpath.splitext(p) [function] Split the extension from a pathname.
ntpath.supports_unicode_filenames
nturl2path
nturl2path.pathname2url(p) [function] OS-specific conversion from a file system path to a relative URL of the 'file' scheme;
nturl2path.url2pathname(url) [function] OS-specific conversion from a relative URL of the 'file' scheme to a file system
numbers
numbers.Complex() [class] Complex defines the operations that work on the builtin complex type.
numbers.Integral() [class] Integral adds a conversion to int and the bit-string operations.
numbers.Number() [class] All numbers inherit from this class.
numbers.Rational() [class] .numerator and .denominator should be in lowest terms.
numbers.Real() [class] To Complex, Real adds the operations that work on real numbers.
object() [class] The most base type
oct(number) Return the octal representation of an integer.
opcode
opcode.EXTENDED_ARG
opcode.HAVE_ARGUMENT
opcode.cmp_op
opcode.hascompare
opcode.hasconst
opcode.hasfree
opcode.hasjabs
opcode.hasjrel
opcode.haslocal
opcode.hasname
opcode.hasnargs
opcode.opmap
opcode.opname
opcode.stack_effect(opcode, oparg=None) Compute the stack effect of the opcode.
open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) Open file and return a stream.
operator
operator.abs(a) Same as abs(a).
operator.add(a, b) Same as a + b.
operator.and_(a, b) Same as a & b.
operator.attrgetter(*attr) [class] attrgetter(attr, ...) --> attrgetter object Return a callable object that fetches
operator.attrgetter(attr) [class] attrgetter(attr, ...) --> attrgetter object Return a callable object that fetches
operator.concat(a, b) Same as a + b, for a and b sequences.
operator.contains(a, b) Same as b in a (note reversed operands).
operator.countOf(a, b) Return the number of times b occurs in a.
operator.delitem(a, b) Same as del a[b].
operator.eq(a, b) Same as a == b.
operator.floordiv(a, b) Same as a // b.
operator.ge(a, b) Same as a >= b.
operator.getitem(a, b) Same as a[b].
operator.gt(a, b) Same as a > b.
operator.iadd(a, b) Same as a += b.
operator.iand(a, b) Same as a &= b.
operator.iconcat(a, b) Same as a += b, for a and b sequences.
operator.ifloordiv(a, b) Same as a //= b.
operator.ilshift(a, b) Same as a <<= b.
operator.imatmul(a, b) Same as a @= b.
operator.imod(a, b) Same as a %= b.
operator.imul(a, b) Same as a *= b.
operator.index(a) Same as a.__index__()
operator.indexOf(a, b) Return the first index of b in a.
operator.inv(a) Same as ~a.
operator.invert(a) Same as ~a.
operator.ior(a, b) Same as a |= b.
operator.ipow(a, b) Same as a **= b.
operator.irshift(a, b) Same as a >>= b.
operator.is_(a, b) Same as a is b.
operator.is_not(a, b) Same as a is not b.
operator.isub(a, b) Same as a -= b.
operator.itemgetter(*items) [class] itemgetter(item, ...) --> itemgetter object Return a callable object that fetches
operator.itemgetter(item) [class] itemgetter(item, ...) --> itemgetter object Return a callable object that fetches
operator.itruediv(a, b) Same as a /= b.
operator.ixor(a, b) Same as a ^= b.
operator.le(a, b) Same as a <= b.
operator.length_hint(obj, default=0) Return an estimate of the number of items in obj.
operator.lshift(a, b) Same as a << b.
operator.lt(a, b) Same as a < b.
operator.matmul(a, b) Same as a @ b.
operator.methodcaller(name, /, *args, **kwargs) [class] methodcaller(name, ...) --> methodcaller object Return a callable object that calls
operator.mod(a, b) Same as a % b.
operator.mul(a, b) Same as a * b.
operator.ne(a, b) Same as a != b.
operator.neg(a) Same as -a.
operator.not_(a) Same as not a.
operator.or_(a, b) Same as a | b.
operator.pos(a) Same as +a.
operator.pow(a, b) Same as a ** b.
operator.rshift(a, b) Same as a >> b.
operator.setitem(a, b, c) Same as a[b] = c.
operator.sub(a, b) Same as a - b.
operator.truediv(a, b) Same as a / b.
operator.truth(a) Return True if a is true, False otherwise.
operator.xor(a, b) Same as a ^ b.
optparse
optparse.BadOptionError(opt_str) [class] Raised if an invalid option is seen on the command line.
optparse.HelpFormatter(indent_increment, max_help_position, width, short_first) [class] Abstract base class for formatting option help.
optparse.IndentedHelpFormatter(indent_increment=2, max_help_position=24, width=None, short_first=1) [class] Format help with indented section bodies.
optparse.OptParseError(msg) [class] Common base class for all non-exit exceptions.
optparse.Option(*opts, **attrs) [class] Instance attributes: _short_opts : [string] _long_opts : [string] action : string
optparse.OptionConflictError(msg, option) [class] Raised if conflicting options are added to an OptionParser.
optparse.OptionContainer(option_class, conflict_handler, description) [class] Abstract base class.
optparse.OptionError(msg, option) [class] Raised if an Option instance is created with invalid or inconsistent arguments.
optparse.OptionGroup(parser, title, description=None) [class] Abstract base class.
optparse.OptionParser(usage=None, option_list=None, option_class=<??>, version=None, conflict_handler='error', description=None, formatter=None, add_help_option=True, prog=None, epilog=None) [class] Class attributes: standard_option_list : [Option] list of standard options that will
optparse.OptionValueError(msg) [class] Raised if an invalid option value is encountered on the command line.
optparse.SUPPRESS_HELP
optparse.SUPPRESS_USAGE
optparse.TitledHelpFormatter(indent_increment=0, max_help_position=24, width=None, short_first=0) [class] Format help with underlined section headers.
optparse.Values(defaults=None) [class]
optparse.check_choice(option, opt, value) [function]
optparse.make_option(*opts, **attrs) [class] Instance attributes: _short_opts : [string] _long_opts : [string] action : string
or
ord(c) Return the Unicode code point for a one-character string.
os
os.DirEntry() [class]
os.F_OK
os.MutableMapping() [class]
os.O_APPEND
os.O_BINARY
os.O_CREAT
os.O_EXCL
os.O_NOINHERIT
os.O_RANDOM
os.O_RDONLY
os.O_RDWR
os.O_SEQUENTIAL
os.O_SHORT_LIVED
os.O_TEMPORARY
os.O_TEXT
os.O_TRUNC
os.O_WRONLY
os.P_DETACH
os.P_NOWAIT
os.P_NOWAITO
os.P_OVERLAY
os.P_WAIT
os.PathLike() [class] Abstract base class for implementing the file system path protocol.
os.R_OK
os.SEEK_CUR
os.SEEK_END
os.SEEK_SET
os.TMP_MAX
os.W_OK
os.X_OK
os._exit(status) Exit to the system with specified status, without normal exit processing.
os.abort() Abort the interpreter immediately.
os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True) Use the real uid/gid to test for access to a path.
os.altsep
os.chdir(path) Change the current working directory to the specified path.
os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True) Change the access permissions of a file.
os.close(fd) Close a file descriptor.
os.closerange(fd_low, fd_high) Closes all file descriptors in [fd_low, fd_high), ignoring errors.
os.cpu_count() Return the number of CPUs in the system; return None if indeterminable.
os.curdir
os.defpath
os.device_encoding(fd) Return a string describing the encoding of a terminal's file descriptor.
os.devnull
os.dup(fd) Return a duplicate of a file descriptor.
os.dup2(fd, fd2, inheritable=True) Duplicate file descriptor.
os.environ
os.error() [class] Base class for I/O related errors.
os.execl(file, *args) [function] execl(file, *args) Execute the executable file with argument list args, replacing
os.execle(file, *args) [function] execle(file, *args, env) Execute the executable file with argument list args and
os.execlp(file, *args) [function] execlp(file, *args) Execute the executable file (which is searched for along $PATH)
os.execlpe(file, *args) [function] execlpe(file, *args, env) Execute the executable file (which is searched for along
os.execv(path, argv) Execute an executable path with arguments, replacing current process.
os.execve(path, argv, env) Execute an executable path with arguments, replacing current process.
os.execvp(file, args) [function] execvp(file, args) Execute the executable file (which is searched for along $PATH)
os.execvpe(file, args, env) [function] execvpe(file, args, env) Execute the executable file (which is searched for along
os.extsep
os.fdopen(fd, *args, **kwargs) [function]
os.fsdecode(filename) [function] Decode filename (an os.PathLike, bytes, or str) from the filesystem encoding with
os.fsencode(filename) [function] Encode filename (an os.PathLike, bytes, or str) to the filesystem encoding with 'surrogateescape'
os.fspath(path) Return the file system path representation of the object.
os.fstat(fd) Perform a stat system call on the given file descriptor.
os.fsync(fd) Force write of fd to disk.
os.ftruncate(fd, length) Truncate a file, specified by file descriptor, to a specific length.
os.get_exec_path(env=None) [function] Returns the sequence of directories that will be searched for the named executable
os.get_handle_inheritable(handle) Get the close-on-exe flag of the specified file descriptor.
os.get_inheritable(fd) Get the close-on-exe flag of the specified file descriptor.
os.get_terminal_size(fd=STDOUT_FILENO) Return the size of the terminal window as (columns, lines).
os.getcwd() Return a unicode string representing the current working directory.
os.getcwdb() Return a bytes string representing the current working directory.
os.getenv(key, default=None) [function] Get an environment variable, return None if it doesn't exist.
os.getlogin() Return the actual login name.
os.getpid() Return the current process id.
os.getppid() Return the parent's process id.
os.isatty(fd) Return True if the fd is connected to a terminal.
os.kill(pid, signal) Kill a process with a signal.
os.linesep
os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True) Create a hard link to a file.
os.listdir(path=None) Return a list containing the names of the files in the directory.
os.lseek(fd, position, how) Set the position of a file descriptor.
os.lstat(path, *, dir_fd=None) Perform a stat system call on the given path, without following symbolic links.
os.makedirs(name, mode=511, exist_ok=False) [function] makedirs(name [, mode=0o777][, exist_ok=False]) Super-mkdir; create a leaf directory
os.mkdir(path, mode=511, *, dir_fd=None) Create a directory.
os.name
os.open(path, flags, mode=511, *, dir_fd=None) Open a file for low level IO.
os.pardir
os.path
os.path.abspath(path) [function] Return the absolute version of a path.
os.path.altsep
os.path.basename(p) [function] Returns the final component of a pathname
os.path.commonpath(paths) [function] Given a sequence of path names, returns the longest common sub-path.
os.path.commonprefix(m) [function] Given a list of pathnames, returns the longest common leading component
os.path.curdir
os.path.defpath
os.path.devnull
os.path.dirname(p) [function] Returns the directory component of a pathname
os.path.exists(path) [function] Test whether a path exists.
os.path.expanduser(path) [function] Expand ~ and ~user constructs. If user or $HOME is unknown, do nothing.
os.path.expandvars(path) [function] Expand shell variables of the forms $var, ${var} and %var%.
os.path.extsep
os.path.getatime(filename) [function] Return the last access time of a file, reported by os.stat().
os.path.getctime(filename) [function] Return the metadata change time of a file, reported by os.stat().
os.path.getmtime(filename) [function] Return the last modification time of a file, reported by os.stat().
os.path.getsize(filename) [function] Return the size of a file, reported by os.stat().
os.path.isabs(s) [function] Test whether a path is absolute
os.path.isdir(path) Return true if the pathname refers to an existing directory.
os.path.isfile(path) [function] Test whether a path is a regular file
os.path.islink(path) [function] Test whether a path is a symbolic link.
os.path.ismount(path) [function] Test whether a path is a mount point (a drive root, the root of a share, or a mounted
os.path.join(path, *paths) [function]
os.path.lexists(path) [function] Test whether a path exists.
os.path.normcase(s) [function] Normalize case of pathname. Makes all characters lowercase and all slashes into backslashes.
os.path.normpath(path) [function] Normalize path, eliminating double slashes, etc.
os.path.pardir
os.path.pathsep
os.path.realpath(path) [function] Return the absolute version of a path.
os.path.relpath(path, start=None) [function] Return a relative version of a path
os.path.samefile(f1, f2) [function] Test whether two pathnames reference the same actual file
os.path.sameopenfile(fp1, fp2) [function] Test whether two open file objects reference the same file
os.path.samestat(s1, s2) [function] Test whether two stat buffers reference the same file
os.path.sep
os.path.split(p) [function] Split a pathname.
os.path.splitdrive(p) [function] Split a pathname into drive/UNC sharepoint and relative path specifiers.
os.path.splitext(p) [function] Split the extension from a pathname.
os.path.supports_unicode_filenames
os.pathsep
os.pipe() Create a pipe.
os.popen(cmd, mode='r', buffering=-1) [function]
os.putenv(name, value) Change or add an environment variable.
os.read(fd, length) Read from a file descriptor. Returns a bytes object.
os.readlink() readlink(path, *, dir_fd=None) -> path Return a string representing the path to which
os.remove(path, *, dir_fd=None) Remove a file (same as unlink()).
os.removedirs(name) [function] removedirs(name) Super-rmdir; remove a leaf directory and all empty intermediate
os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None) Rename a file or directory.
os.renames(old, new) [function] renames(old, new) Super-rename; create directories as necessary and delete any left
os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None) Rename a file or directory, overwriting the destination.
os.rmdir(path, *, dir_fd=None) Remove a directory.
os.scandir(path=None) Return an iterator of DirEntry objects for given path.
os.sep
os.set_handle_inheritable(handle, inheritable) Set the inheritable flag of the specified handle.
os.set_inheritable(fd, inheritable) Set the inheritable flag of the specified file descriptor.
os.spawnl(mode, file, *args) [function] spawnl(mode, file, *args) -> integer Execute file with arguments from args in a subprocess.
os.spawnle(mode, file, *args) [function] spawnle(mode, file, *args, env) -> integer Execute file with arguments from args
os.spawnv(mode, path, argv) Execute the program specified by path in a new process. mode Mode of process creation.
os.spawnve(mode, path, argv, env) Execute the program specified by path in a new process. mode Mode of process creation.
os.startfile(filepath, operation=None) startfile(filepath [, operation]) Start a file with its associated application.
os.stat(path, *, dir_fd=None, follow_symlinks=True) Perform a stat system call on the given path.
os.stat_result(iterable=()) [class] stat_result: Result from stat, fstat, or lstat.
os.statvfs_result(iterable=()) [class] statvfs_result: Result from statvfs or fstatvfs.
os.strerror(code) Translate an error code to a message string.
os.supports_bytes_environ
os.supports_dir_fd
os.supports_effective_ids
os.supports_fd
os.supports_follow_symlinks
os.symlink(src, dst, target_is_directory=False, *, dir_fd=None) Create a symbolic link pointing to src named dst.
os.system(command) Execute the command in a subshell.
os.terminal_size(iterable=()) [class] A tuple of (columns, lines) for holding terminal window size
os.times() Return a collection containing process timing information.
os.times_result(iterable=()) [class] times_result: Result from os.times().
os.truncate(path, length) Truncate a file, specified by path, to a specific length.
os.umask(mask) Set the current numeric umask and return the previous umask.
os.uname_result(iterable=()) [class] uname_result: Result from os.uname().
os.unlink(path, *, dir_fd=None) Remove a file (same as remove()).
os.urandom(size) Return a bytes object containing random bytes suitable for cryptographic use.
os.utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True) Set the access and modified time of path. path may always be specified as a string.
os.waitpid(pid, options) Wait for completion of a given process.
os.walk(top, topdown=True, onerror=None, followlinks=False) [function] Directory tree generator.
os.write(fd, data) Write a bytes object to a file descriptor.
parser
parser.ParserError() [class] Common base class for all non-exit exceptions.
parser.STType() [class] Intermediate representation of a Python parse tree.
parser._pickler() Returns the pickle magic to allow ST objects to be pickled.
parser.compilest(st, filename='<syntax-tree>') Compiles an ST object into a code object.
parser.expr(source) Creates an ST object from an expression.
parser.isexpr(st) Determines if an ST object was created from an expression.
parser.issuite(st) Determines if an ST object was created from a suite.
parser.sequence2st(sequence) Creates an ST object from a tree representation.
parser.st2list(st, line_info=False, col_info=False) Creates a list-tree representation of an ST.
parser.st2tuple(st, line_info=False, col_info=False) Creates a tuple-tree representation of an ST.
parser.suite(source) Creates an ST object from a suite.
parser.tuple2st(sequence) Creates an ST object from a tree representation.
pass
pathlib
pathlib.Path(*args, **kwargs) [class] PurePath subclass that can make system calls.
pathlib.PosixPath(*args, **kwargs) [class] Path subclass for non-Windows systems.
pathlib.PurePath(*args) [class] Base class for manipulating paths without I/O.
pathlib.PurePosixPath(*args) [class] PurePath subclass for non-Windows systems.
pathlib.PureWindowsPath(*args) [class] PurePath subclass for Windows systems.
pathlib.WindowsPath(*args, **kwargs) [class] Path subclass for Windows systems.
pdb
pdb.Pdb(completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False, readrc=True) [class] Generic Python debugger base class.
pdb.help() [function]
pdb.pm() [function]
pdb.post_mortem(t=None) [function]
pdb.run(statement, globals=None, locals=None) [function]
pdb.runcall(*args, **kwds) [function]
pdb.runctx(statement, globals, locals) [function]
pdb.runeval(expression, globals=None, locals=None) [function]
pdb.set_trace(*, header=None) [function]
pickle
pickle.ADDITEMS
pickle.APPEND
pickle.APPENDS
pickle.BINBYTES
pickle.BINBYTES8
pickle.BINFLOAT
pickle.BINGET
pickle.BININT
pickle.BININT1
pickle.BININT2
pickle.BINPERSID
pickle.BINPUT
pickle.BINSTRING
pickle.BINUNICODE
pickle.BINUNICODE8
pickle.BUILD
pickle.DEFAULT_PROTOCOL
pickle.DICT
pickle.DUP
pickle.EMPTY_DICT
pickle.EMPTY_LIST
pickle.EMPTY_SET
pickle.EMPTY_TUPLE
pickle.EXT1
pickle.EXT2
pickle.EXT4
pickle.FALSE
pickle.FLOAT
pickle.FRAME
pickle.FROZENSET
pickle.GET
pickle.GLOBAL
pickle.HIGHEST_PROTOCOL
pickle.INST
pickle.INT
pickle.LIST
pickle.LONG
pickle.LONG1
pickle.LONG4
pickle.LONG_BINGET
pickle.LONG_BINPUT
pickle.MARK
pickle.MEMOIZE
pickle.NEWFALSE
pickle.NEWOBJ
pickle.NEWOBJ_EX
pickle.NEWTRUE
pickle.NONE
pickle.OBJ
pickle.PERSID
pickle.POP
pickle.POP_MARK
pickle.PROTO
pickle.PUT
pickle.PickleError() [class] Common base class for all non-exit exceptions.
pickle.Pickler(file, protocol=None, fix_imports=True) [class] This takes a binary file for writing a pickle data stream.
pickle.PicklingError() [class] Common base class for all non-exit exceptions.
pickle.REDUCE
pickle.SETITEM
pickle.SETITEMS
pickle.SHORT_BINBYTES
pickle.SHORT_BINSTRING
pickle.SHORT_BINUNICODE
pickle.STACK_GLOBAL
pickle.STOP
pickle.STRING
pickle.TRUE
pickle.TUPLE
pickle.TUPLE1
pickle.TUPLE2
pickle.TUPLE3
pickle.UNICODE
pickle.Unpickler(file, *, fix_imports=True, encoding='ASCII', errors='strict') [class] This takes a binary file for reading a pickle data stream.
pickle.UnpicklingError() [class] Common base class for all non-exit exceptions.
pickle.dump(obj, file, protocol=None, *, fix_imports=True) Write a pickled representation of obj to the open file object file.
pickle.dumps(obj, protocol=None, *, fix_imports=True) Return the pickled representation of the object as a bytes object.
pickle.load(file, *, fix_imports=True, encoding='ASCII', errors='strict') Read and return an object from the pickle data stored in a file.
pickle.loads(data, *, fix_imports=True, encoding='ASCII', errors='strict') Read and return an object from the given pickle data.
pickletools
pickletools.dis(pickle, out=None, memo=None, indentlevel=4, annotate=0) [function] Produce a symbolic disassembly of a pickle.
pickletools.genops(pickle) [function] Generate all the opcodes in a pickle.
pickletools.optimize(p) [function] Optimize a pickle string by removing unused PUT opcodes
pipes
pipes.Template() [class] Class representing a pipeline template.
pkgutil
pkgutil.ImpImporter(path=None) [class] PEP 302 Finder that wraps Python's "classic" import algorithm ImpImporter(dirname)
pkgutil.ImpLoader(fullname, file, filename, etc) [class] PEP 302 Loader that wraps Python's "classic" import algorithm
pkgutil.ModuleInfo(module_finder, name, ispkg) [class] A namedtuple with minimal info about a module.
pkgutil.extend_path(path, name) [function] Extend a package's path.
pkgutil.find_loader(fullname) [function] Find a "loader" object for fullname This is a backwards compatibility wrapper around
pkgutil.get_data(package, resource) [function] Get a resource from a package.
pkgutil.get_importer(path_item) [function] Retrieve a finder for the given path item The returned finder is cached in sys.path_importer_cache
pkgutil.get_loader(module_or_name) [function] Get a "loader" object for module_or_name Returns None if the module cannot be found
pkgutil.iter_importers(fullname='') [function] Yield finders for the given module name If fullname contains a '.', the finders will
pkgutil.iter_modules(path=None, prefix='') [function] Yields ModuleInfo for all submodules on path, or, if path is None, all top-level
pkgutil.read_code(stream) [function]
pkgutil.walk_packages(path=None, prefix='', onerror=None) [function] Yields ModuleInfo for all modules recursively on path, or, if path is None, all accessible
platform
platform.DEV_NULL
platform.architecture(executable=sys.executable, bits='', linkage='') [function] Queries the given executable (defaults to the Python interpreter binary) for various
platform.dist(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'centos', 'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo', 'UnitedLinux', 'turbolinux', 'arch', 'mageia')) [function] Tries to determine the name of the Linux OS distribution name.
platform.java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')) [function] Version interface for Jython.
platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=16384) [function] Tries to determine the libc version that the file executable (which defaults to the
platform.linux_distribution(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'centos', 'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo', 'UnitedLinux', 'turbolinux', 'arch', 'mageia'), full_distribution_name=1) [function]
platform.mac_ver(release='', versioninfo=('', '', ''), machine='') [function] Get MacOS version information and return it as tuple (release, versioninfo, machine)
platform.machine() [function] Returns the machine type, e.g.
platform.node() [function] Returns the computer's network name (which may not be fully qualified) An empty string
platform.platform(aliased=0, terse=0) [function] Returns a single string identifying the underlying platform with as much useful information
platform.popen(cmd, mode='r', bufsize=-1) [function] Portable popen() interface.
platform.processor() [function] Returns the (true) processor name, e.g.
platform.python_branch() [function] Returns a string identifying the Python implementation branch.
platform.python_build() [function] Returns a tuple (buildno, builddate) stating the Python build number and date as
platform.python_compiler() [function] Returns a string identifying the compiler used for compiling Python.
platform.python_implementation() [function] Returns a string identifying the Python implementation.
platform.python_revision() [function] Returns a string identifying the Python implementation revision.
platform.python_version() [function] Returns the Python version as string 'major.minor.patchlevel' Note that unlike the
platform.python_version_tuple() [function] Returns the Python version as tuple (major, minor, patchlevel) of strings.
platform.release() [function] Returns the system's release, e.g.
platform.system() [function] Returns the system/OS name, e.g.
platform.system_alias(system, release, version) [function] Returns (system, release, version) aliased to common marketing names used for some
platform.uname() [function] Fairly portable uname interface.
platform.uname_result(system, node, release, version, machine, processor) [class] uname_result(system, node, release, version, machine, processor)
platform.version() [function] Returns the system's release version, e.g.
platform.win32_ver(release='', version='', csd='', ptype='') [function]
plistlib
plistlib.Data(data) [class] Wrapper for binary data. This class is deprecated, use a bytes object instead.
plistlib.FMT_BINARY
plistlib.FMT_XML
plistlib.InvalidFileException(message='Invalid file') [class] Inappropriate argument value (of correct type).
plistlib.dump(value, fp, *, fmt=<??>, sort_keys=True, skipkeys=False) [function] Write 'value' to a .plist file. 'fp' should be a (writable) file object.
plistlib.dumps(value, *, fmt=<??>, skipkeys=False, sort_keys=True) [function] Return a bytes object with the contents for a .plist file.
plistlib.load(fp, *, fmt=None, use_builtin_types=True, dict_type=<??>) [function] Read a .plist file.
plistlib.loads(value, *, fmt=None, use_builtin_types=True, dict_type=<??>) [function] Read a .plist file from a bytes object.
plistlib.readPlist(pathOrFile) [function] Read a .plist from a path or file.
plistlib.readPlistFromBytes(data) [function] Read a plist data from a bytes object.
plistlib.writePlist(value, pathOrFile) [function] Write 'value' to a .plist file.
plistlib.writePlistToBytes(value) [function] Return 'value' as a plist-formatted bytes object.
poplib
poplib.POP3(host, port=110, timeout=<??>) [class] This class supports both the minimal and optional command sets.
poplib.POP3_SSL(host, port=995, keyfile=None, certfile=None, timeout=<??>, context=None) [class] POP3 client class over SSL connection Instantiate with: POP3_SSL(hostname, port=995,
poplib.error_proto() [class] Common base class for all non-exit exceptions.
posixpath
posixpath.abspath(path) [function] Return an absolute path.
posixpath.altsep
posixpath.basename(p) [function] Returns the final component of a pathname
posixpath.commonpath(paths) [function] Given a sequence of path names, returns the longest common sub-path.
posixpath.commonprefix(m) [function] Given a list of pathnames, returns the longest common leading component
posixpath.curdir
posixpath.defpath
posixpath.devnull
posixpath.dirname(p) [function] Returns the directory component of a pathname
posixpath.exists(path) [function] Test whether a path exists.
posixpath.expanduser(path) [function] Expand ~ and ~user constructions. If user or $HOME is unknown, do nothing.
posixpath.expandvars(path) [function] Expand shell variables of form $var and ${var}. Unknown variables are left unchanged.
posixpath.extsep
posixpath.getatime(filename) [function] Return the last access time of a file, reported by os.stat().
posixpath.getctime(filename) [function] Return the metadata change time of a file, reported by os.stat().
posixpath.getmtime(filename) [function] Return the last modification time of a file, reported by os.stat().
posixpath.getsize(filename) [function] Return the size of a file, reported by os.stat().
posixpath.isabs(s) [function] Test whether a path is absolute
posixpath.isdir(s) [function] Return true if the pathname refers to an existing directory.
posixpath.isfile(path) [function] Test whether a path is a regular file
posixpath.islink(path) [function] Test whether a path is a symbolic link
posixpath.ismount(path) [function] Test whether a path is a mount point
posixpath.join(a, *p) [function] Join two or more pathname components, inserting '/' as needed.
posixpath.lexists(path) [function] Test whether a path exists.
posixpath.normcase(s) [function] Normalize case of pathname.
posixpath.normpath(path) [function] Normalize path, eliminating double slashes, etc.
posixpath.pardir
posixpath.pathsep
posixpath.realpath(filename) [function] Return the canonical path of the specified filename, eliminating any symbolic links
posixpath.relpath(path, start=None) [function] Return a relative version of a path
posixpath.samefile(f1, f2) [function] Test whether two pathnames reference the same actual file
posixpath.sameopenfile(fp1, fp2) [function] Test whether two open file objects reference the same file
posixpath.samestat(s1, s2) [function] Test whether two stat buffers reference the same file
posixpath.sep
posixpath.split(p) [function] Split a pathname.
posixpath.splitdrive(p) [function] Split a pathname into drive and path. On Posix, drive is always empty.
posixpath.splitext(p) [function] Split the extension from a pathname.
posixpath.supports_unicode_filenames
pow(x, y, z=None) Equivalent to x**y (with two arguments) or x**y % z (with three arguments) Some types,
pprint
pprint.PrettyPrinter(indent=1, width=80, depth=None, stream=None, *, compact=False) [class]
pprint.isreadable(object) [function] Determine if saferepr(object) is readable by eval().
pprint.isrecursive(object) [function] Determine if object requires a recursive representation.
pprint.pformat(object, indent=1, width=80, depth=None, *, compact=False) [function] Format a Python object into a pretty-printed representation.
pprint.pprint(object, stream=None, indent=1, width=80, depth=None, *, compact=False) [function] Pretty-print a Python object to a stream [default is sys.stdout].
pprint.saferepr(object) [function] Version of repr() which can handle recursive data structures.
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False) print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False) Prints the values
profile
profile.Profile(timer=None, bias=None) [class] Profiler class.
profile.run(statement, filename=None, sort=-1) [function] Run statement under profiler optionally saving results in filename This function
profile.runctx(statement, globals, locals, filename=None, sort=-1) [function] Run statement under profiler, supplying your own globals and locals, optionally saving
property(fget=None, fset=None, fdel=None, doc=None) [class] Property attribute.
pstats
pstats.SortKey(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
pstats.Stats(*args, *, stream=None) [class] This class is used for creating reports from data generated by the Profile class.
py_compile
py_compile.PyCompileError(exc_type, exc_value, file, msg='') [class] Exception raised when an error occurs while attempting to compile the file.
py_compile.PycInvalidationMode(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
py_compile.compile(file, cfile=None, dfile=None, doraise=False, optimize=-1, invalidation_mode=None) [function] Byte-compile one Python source file to Python bytecode.
py_compile.main(args=None) [function] Compile several source files.
pyclbr
pyclbr.Class(module, name, super, file, lineno, parent=None) [class] Information about a Python class.
pyclbr.Function(module, name, file, lineno, parent=None) [class] Information about a Python function, including methods.
pyclbr.readmodule(module, path=None) [function] Return Class objects for the top-level classes in module.
pyclbr.readmodule_ex(module, path=None) [function] Return a dictionary with all functions and classes in module.
pydoc
pydoc.help(request=<??>)
pydoc_data
pyexpat
pyexpat.EXPAT_VERSION
pyexpat.ErrorString(code) Returns string error for given number.
pyexpat.ExpatError() [class] Common base class for all non-exit exceptions.
pyexpat.ParserCreate(encoding=None, namespace_separator=None, intern=None) Return a new XML parser object.
pyexpat.XMLParserType() [class] XML parser
pyexpat.XML_PARAM_ENTITY_PARSING_ALWAYS
pyexpat.XML_PARAM_ENTITY_PARSING_NEVER
pyexpat.XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
pyexpat.error() [class] Common base class for all non-exit exceptions.
pyexpat.expat_CAPI
pyexpat.features
pyexpat.native_encoding
pyexpat.version_info
queue
queue.Empty() [class] Exception raised by Queue.get(block=0)/get_nowait().
queue.Full() [class] Exception raised by Queue.put(block=0)/put_nowait().
queue.LifoQueue(maxsize=0) [class] Variant of Queue that retrieves most recently added entries first.
queue.PriorityQueue(maxsize=0) [class] Variant of Queue that retrieves open entries in priority order (lowest first).
queue.Queue(maxsize=0) [class] Create a queue object with a given maximum size.
queue.SimpleQueue() [class] Simple, unbounded, reentrant FIFO queue.
quit(code=None)
quopri
quopri.decode(input, output, header=False) [function] Read 'input', apply quoted-printable decoding, and write to 'output'.
quopri.decodestring(s, header=False) [function]
quopri.encode(input, output, quotetabs, header=False) [function] Read 'input', apply quoted-printable encoding, and write to 'output'.
quopri.encodestring(s, quotetabs=False, header=False) [function]
raise
random
random.Random(x=None) [class] Random number generator base class used by bound module functions.
random.SystemRandom(x=None) [class] Alternate random number generator using sources provided by the operating system
random.betavariate(alpha, beta) [method] Beta distribution.
random.choice(seq) [method] Choose a random element from a non-empty sequence.
random.choices(population, weights=None, *, cum_weights=None, k=1) [method] Return a k sized list of population elements chosen with replacement.
random.expovariate(lambd) [method] Exponential distribution.
random.gammavariate(alpha, beta) [method] Gamma distribution.
random.gauss(mu, sigma) [method] Gaussian distribution.
random.getrandbits() getrandbits(k) -> x. Generates an int with k random bits.
random.getstate() [method] Return internal state; can be passed to setstate() later.
random.lognormvariate(mu, sigma) [method] Log normal distribution.
random.normalvariate(mu, sigma) [method] Normal distribution. mu is the mean, and sigma is the standard deviation.
random.paretovariate(alpha) [method] Pareto distribution. alpha is the shape parameter.
random.randint(a, b) [method] Return random integer in range [a, b], including both end points.
random.random() random() -> x in the interval [0, 1).
random.randrange(start, stop=None, step=1, _int=<??>) [method] Choose a random item from range(start, stop[, step]).
random.sample(population, k) [method] Chooses k unique random elements from a population sequence or set.
random.seed(a=None, version=2) [method] Initialize internal state from hashable object.
random.setstate(state) [method] Restore internal state from object returned by getstate().
random.shuffle(x, random=None) [method] Shuffle list x in place, and return None.
random.triangular(low=0.0, high=1.0, mode=None) [method] Triangular distribution.
random.uniform(a, b) [method] Get a random number in the range [a, b) or [a, b] depending on rounding.
random.vonmisesvariate(mu, kappa) [method] Circular data distribution.
random.weibullvariate(alpha, beta) [method] Weibull distribution. alpha is the scale parameter and beta is the shape parameter.
range(start, stop[, step]) [class] range(stop) -> range object range(start, stop[, step]) -> range object Return an
range(stop) [class] range(stop) -> range object range(start, stop[, step]) -> range object Return an
re
re.A
re.ASCII
re.DOTALL
re.I
re.IGNORECASE
re.L
re.LOCALE
re.M
re.MULTILINE
re.Match() [class] The result of re.match() and re.search().
re.Pattern() [class] Compiled regular expression object.
re.S
re.U
re.UNICODE
re.VERBOSE
re.X
re.compile(pattern, flags=0) [function] Compile a regular expression pattern, returning a Pattern object.
re.error(msg, pattern=None, pos=None) [class] Exception raised for invalid regular expressions.
re.escape(pattern) [function] Escape special characters in a string.
re.findall(pattern, string, flags=0) [function] Return a list of all non-overlapping matches in the string.
re.finditer(pattern, string, flags=0) [function] Return an iterator over all non-overlapping matches in the string.
re.fullmatch(pattern, string, flags=0) [function] Try to apply the pattern to all of the string, returning a Match object, or None
re.match(pattern, string, flags=0) [function] Try to apply the pattern at the start of the string, returning a Match object, or
re.purge() [function] Clear the regular expression caches
re.search(pattern, string, flags=0) [function] Scan through string looking for a match to the pattern, returning a Match object,
re.split(pattern, string, maxsplit=0, flags=0) [function] Split the source string by the occurrences of the pattern, returning a list containing
re.sub(pattern, repl, string, count=0, flags=0) [function] Return the string obtained by replacing the leftmost non-overlapping occurrences
re.subn(pattern, repl, string, count=0, flags=0) [function] Return a 2-tuple containing (new_string, number).
re.template(pattern, flags=0) [function] Compile a template pattern, returning a Pattern object
repr(obj) Return the canonical string representation of the object.
reprlib
reprlib.Repr() [class]
reprlib.recursive_repr(fillvalue='...') [function] Decorator to make a repr function return fillvalue for a recursive call
reprlib.repr(x) [method]
return
reversed(sequence) [class] Return a reverse iterator over the values of the given sequence.
rlcompleter
rlcompleter.Completer(namespace=None) [class]
round(number, ndigits=None) Round a number to a given precision in decimal digits.
runpy
runpy.run_module(mod_name, init_globals=None, run_name=None, alter_sys=False) [function] Execute a module's code without importing it Returns the resulting top level namespace
runpy.run_path(path_name, init_globals=None, run_name=None) [function] Execute code located at the specified filesystem location Returns the resulting top
sched
sched.scheduler(timefunc=<??>, delayfunc=<??>) [class]
secrets
secrets.SystemRandom(x=None) [class] Alternate random number generator using sources provided by the operating system
secrets.choice(seq) [method] Choose a random element from a non-empty sequence.
secrets.compare_digest(a, b) Return 'a == b'.
secrets.randbelow(exclusive_upper_bound) [function] Return a random int in the range [0, n).
secrets.randbits(k) [method] getrandbits(k) -> x. Generates an int with k random bits.
secrets.token_bytes(nbytes=None) [function] Return a random byte string containing *nbytes* bytes.
secrets.token_hex(nbytes=None) [function] Return a random text string, in hexadecimal.
secrets.token_urlsafe(nbytes=None) [function] Return a random URL-safe text string, in Base64 encoding.
select
select.error() [class] Base class for I/O related errors.
select.select() select(rlist, wlist, xlist[, timeout]) -> (rlist, wlist, xlist) Wait until one or
selectors
selectors.ABCMeta(name, bases, namespace, **kwargs) [class] Metaclass for defining Abstract Base Classes (ABCs).
selectors.BaseSelector() [class] Selector abstract base class.
selectors.DefaultSelector() [class] Select-based selector.
selectors.EVENT_READ
selectors.EVENT_WRITE
selectors.Mapping() [class]
selectors.SelectSelector() [class] Select-based selector.
selectors.SelectorKey(fileobj, fd, events, data) [class] SelectorKey(fileobj, fd, events, data) Object used to associate a file object to
selectors.abstractmethod(funcobj) [function] A decorator indicating abstract methods.
selectors.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None) [function] Returns a new subclass of tuple with named fields.
set([iterable]) [class] set() -> new empty set object set(iterable) -> new set object Build an unordered
setattr(obj, name, value) Sets the named attribute on the given object to the specified value.
shelve
shelve.BsdDbShelf(dict, protocol=None, writeback=False, keyencoding='utf-8') [class] Shelf implementation using the "BSD" db interface.
shelve.DbfilenameShelf(filename, flag='c', protocol=None, writeback=False) [class] Shelf implementation using the "dbm" generic dbm interface.
shelve.Shelf(dict, protocol=None, writeback=False, keyencoding='utf-8') [class] Base class for shelf implementations.
shelve.open(filename, flag='c', protocol=None, writeback=False) [function] Open a persistent dictionary for reading and writing.
shlex
shlex.quote(s) [function] Return a shell-escaped version of the string *s*.
shlex.shlex(instream=None, infile=None, posix=False, punctuation_chars=False) [class] A lexical analyzer class for simple shell-like syntaxes.
shlex.split(s, comments=False, posix=True) [function]
shutil
shutil.Error() [class] Base class for I/O related errors.
shutil.ExecError() [class] Raised when a command could not be executed
shutil.SameFileError() [class] Raised when source and destination are the same file.
shutil.SpecialFileError() [class] Raised when trying to do a kind of operation (e.g.
shutil.chown(path, user=None, group=None) [function] Change owner user and group of the given path.
shutil.copy(src, dst, *, follow_symlinks=True) [function] Copy data and mode bits ("cp src dst").
shutil.copy2(src, dst, *, follow_symlinks=True) [function] Copy data and metadata. Return the file's destination. Metadata is copied with copystat().
shutil.copyfile(src, dst, *, follow_symlinks=True) [function] Copy data from src to dst.
shutil.copyfileobj(fsrc, fdst, length=16384) [function] copy data from file-like object fsrc to file-like object fdst
shutil.copymode(src, dst, *, follow_symlinks=True) [function] Copy mode bits from src to dst.
shutil.copystat(src, dst, *, follow_symlinks=True) [function] Copy file metadata Copy the permission bits, last access time, last modification
shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=<??>, ignore_dangling_symlinks=False) [function] Recursively copy a directory tree. The destination directory must not already exist.
shutil.disk_usage(path) [function] Return disk usage statistics about the given path.
shutil.get_archive_formats() [function] Returns a list of supported formats for archiving and unarchiving.
shutil.get_terminal_size(fallback=(80, 24)) [function] Get the size of the terminal window.
shutil.get_unpack_formats() [function] Returns a list of supported formats for unpacking.
shutil.ignore_patterns(*patterns) [function] Function that can be used as copytree() ignore parameter.
shutil.make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None) [function] Create an archive file (eg.
shutil.move(src, dst, copy_function=<??>) [function] Recursively move a file or directory to another location.
shutil.register_archive_format(name, function, extra_args=None, description='') [function] Registers an archive format.
shutil.register_unpack_format(name, extensions, function, extra_args=None, description='') [function] Registers an unpack format.
shutil.rmtree(path, ignore_errors=False, onerror=None) [function] Recursively delete a directory tree.
shutil.unpack_archive(filename, extract_dir=None, format=None) [function] Unpack an archive.
shutil.unregister_archive_format(name) [function]
shutil.unregister_unpack_format(name) [function] Removes the pack format from the registry.
shutil.which(cmd, mode=1, path=None) [function] Given a command, mode, and a PATH string, return the path which conforms to the given
signal
signal.CTRL_BREAK_EVENT
signal.CTRL_C_EVENT
signal.Handlers(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
signal.NSIG
signal.SIGABRT
signal.SIGBREAK
signal.SIGFPE
signal.SIGILL
signal.SIGINT
signal.SIGSEGV
signal.SIGTERM
signal.SIG_DFL
signal.SIG_IGN
signal.Signals(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
signal.default_int_handler() default_int_handler(...) The default handler for SIGINT installed by Python.
signal.getsignal(signalnum) [function] Return the current action for the given signal.
signal.set_wakeup_fd(fd, *, warn_on_full_buffer=True) set_wakeup_fd(fd, *, warn_on_full_buffer=True) -> fd Sets the fd to be written to
signal.signal(signalnum, handler) [function] Set the action for the given signal.
site
site.ENABLE_USER_SITE
site.PREFIXES
site.USER_BASE
site.USER_SITE
site.abs_paths() [function] Set all module __file__ and __cached__ attributes to an absolute path
site.addpackage(sitedir, name, known_paths) [function] Process a .pth file within the site-packages directory: For each line in the file,
site.addsitedir(sitedir, known_paths=None) [function] Add 'sitedir' argument to sys.path if missing and handle .pth files in 'sitedir'
site.addsitepackages(known_paths, prefixes=None) [function] Add site-packages to sys.path
site.addusersitepackages(known_paths) [function] Add a per user site-package to sys.path Each user has its own python directory with
site.check_enableusersite() [function] Check if user site directory is safe for inclusion The function tests for the command
site.enablerlcompleter() [function] Enable default readline configuration on interactive prompts, by registering a sys.__interactivehook__.
site.execsitecustomize() [function] Run custom site specific code, if available.
site.execusercustomize() [function] Run custom user specific code, if available.
site.getsitepackages(prefixes=None) [function] Returns a list containing all global site-packages directories.
site.getuserbase() [function] Returns the `user base` directory path.
site.getusersitepackages() [function] Returns the user-specific site-packages directory path.
site.main() [function] Add standard site-specific directories to the module search path.
site.makepath(*paths) [function]
site.removeduppaths() [function] Remove duplicate entries from sys.path along with making them absolute
site.setcopyright() [function] Set 'copyright' and 'credits' in builtins
site.sethelper() [function]
site.setquit() [function] Define new builtins 'quit' and 'exit'.
site.venv(known_paths) [function]
slice(start, stop[, step]) [class] slice(stop) slice(start, stop[, step]) Create a slice object.
slice(stop) [class] slice(stop) slice(start, stop[, step]) Create a slice object.
smtpd
smtpd.DebuggingServer(localaddr, remoteaddr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False) [class]
smtpd.MailmanProxy(*args, **kwargs) [class]
smtpd.PureProxy(*args, **kwargs) [class]
smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False) [class] This is an abstract class.
smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False) [class]
smtplib
smtplib.SMTP(host='', port=0, local_hostname=None, timeout=<??>, source_address=None) [class] This class manages a connection to an SMTP or ESMTP server.
smtplib.SMTPAuthenticationError(code, msg) [class] Authentication error.
smtplib.SMTPConnectError(code, msg) [class] Error during connection establishment.
smtplib.SMTPDataError(code, msg) [class] The SMTP server didn't accept the data.
smtplib.SMTPException() [class] Base class for all exceptions raised by this module.
smtplib.SMTPHeloError(code, msg) [class] The server refused our HELO reply.
smtplib.SMTPRecipientsRefused(recipients) [class] All recipient addresses refused.
smtplib.SMTPResponseException(code, msg) [class] Base class for all exceptions that include an SMTP error code.
smtplib.SMTPSenderRefused(code, msg, sender) [class] Sender address refused.
smtplib.SMTPServerDisconnected() [class] Not connected to any SMTP server.
smtplib.SMTP_SSL(host='', port=0, local_hostname=None, keyfile=None, certfile=None, timeout=<??>, source_address=None, context=None) [class] This is a subclass derived from SMTP that connects over an SSL encrypted socket (to
smtplib.quoteaddr(addrstring) [function] Quote a subset of the email addresses defined by RFC 821.
smtplib.quotedata(data) [function] Quote data for email.
sndhdr
sndhdr.what(filename) [function] Guess the type of a sound file.
sndhdr.whathdr(filename) [function] Recognize sound headers.
socket
socket.AF_APPLETALK
socket.AF_DECnet
socket.AF_INET
socket.AF_INET6
socket.AF_IPX
socket.AF_IRDA
socket.AF_SNA
socket.AF_UNSPEC
socket.AI_ADDRCONFIG
socket.AI_ALL
socket.AI_CANONNAME
socket.AI_NUMERICHOST
socket.AI_NUMERICSERV
socket.AI_PASSIVE
socket.AI_V4MAPPED
socket.AddressFamily(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
socket.CAPI
socket.EAI_AGAIN
socket.EAI_BADFLAGS
socket.EAI_FAIL
socket.EAI_FAMILY
socket.EAI_MEMORY
socket.EAI_NODATA
socket.EAI_NONAME
socket.EAI_SERVICE
socket.EAI_SOCKTYPE
socket.INADDR_ALLHOSTS_GROUP
socket.INADDR_ANY
socket.INADDR_BROADCAST
socket.INADDR_LOOPBACK
socket.INADDR_MAX_LOCAL_GROUP
socket.INADDR_NONE
socket.INADDR_UNSPEC_GROUP
socket.IPPORT_RESERVED
socket.IPPORT_USERRESERVED
socket.IPPROTO_ICMP
socket.IPPROTO_IP
socket.IPPROTO_RAW
socket.IPPROTO_TCP
socket.IPPROTO_UDP
socket.IPV6_CHECKSUM
socket.IPV6_DONTFRAG
socket.IPV6_HOPLIMIT
socket.IPV6_HOPOPTS
socket.IPV6_JOIN_GROUP
socket.IPV6_LEAVE_GROUP
socket.IPV6_MULTICAST_HOPS
socket.IPV6_MULTICAST_IF
socket.IPV6_MULTICAST_LOOP
socket.IPV6_PKTINFO
socket.IPV6_RECVRTHDR
socket.IPV6_RECVTCLASS
socket.IPV6_RTHDR
socket.IPV6_TCLASS
socket.IPV6_UNICAST_HOPS
socket.IPV6_V6ONLY
socket.IP_ADD_MEMBERSHIP
socket.IP_DROP_MEMBERSHIP
socket.IP_HDRINCL
socket.IP_MULTICAST_IF
socket.IP_MULTICAST_LOOP
socket.IP_MULTICAST_TTL
socket.IP_OPTIONS
socket.IP_RECVDSTADDR
socket.IP_TOS
socket.IP_TTL
socket.MSG_BCAST
socket.MSG_CTRUNC
socket.MSG_DONTROUTE
socket.MSG_ERRQUEUE
socket.MSG_MCAST
socket.MSG_OOB
socket.MSG_PEEK
socket.MSG_TRUNC
socket.MSG_WAITALL
socket.NI_DGRAM
socket.NI_MAXHOST
socket.NI_MAXSERV
socket.NI_NAMEREQD
socket.NI_NOFQDN
socket.NI_NUMERICHOST
socket.NI_NUMERICSERV
socket.RCVALL_MAX
socket.RCVALL_OFF
socket.RCVALL_ON
socket.RCVALL_SOCKETLEVELONLY
socket.SHUT_RD
socket.SHUT_RDWR
socket.SHUT_WR
socket.SIO_KEEPALIVE_VALS
socket.SIO_LOOPBACK_FAST_PATH
socket.SIO_RCVALL
socket.SOCK_DGRAM
socket.SOCK_RAW
socket.SOCK_RDM
socket.SOCK_SEQPACKET
socket.SOCK_STREAM
socket.SOL_IP
socket.SOL_SOCKET
socket.SOL_TCP
socket.SOL_UDP
socket.SOMAXCONN
socket.SO_ACCEPTCONN
socket.SO_BROADCAST
socket.SO_DEBUG
socket.SO_DONTROUTE
socket.SO_ERROR
socket.SO_EXCLUSIVEADDRUSE
socket.SO_KEEPALIVE
socket.SO_LINGER
socket.SO_OOBINLINE
socket.SO_RCVBUF
socket.SO_RCVLOWAT
socket.SO_RCVTIMEO
socket.SO_REUSEADDR
socket.SO_SNDBUF
socket.SO_SNDLOWAT
socket.SO_SNDTIMEO
socket.SO_TYPE
socket.SO_USELOOPBACK
socket.SocketKind(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
socket.SocketType() [class] socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object socket(family=-1,
socket.TCP_FASTOPEN
socket.TCP_KEEPCNT
socket.TCP_KEEPIDLE
socket.TCP_KEEPINTVL
socket.TCP_MAXSEG
socket.TCP_NODELAY
socket.close(fd) close(integer) -> None Close an integer socket file descriptor.
socket.create_connection(address, timeout=<??>, source_address=None) [function] Connect to *address* and return the socket object.
socket.dup() dup(integer) -> integer Duplicate an integer socket file descriptor.
socket.error() [class] Base class for I/O related errors.
socket.errorTab
socket.fromfd(fd, family, type, proto=0) [function] fromfd(fd, family, type[, proto]) -> socket object Create a socket object from a
socket.fromshare(info) [function] fromshare(info) -> socket object Create a socket object from the bytes object returned
socket.gaierror() [class] Base class for I/O related errors.
socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0) [function] Resolve host and port into list of address info entries.
socket.getdefaulttimeout() getdefaulttimeout() -> timeout Returns the default timeout in seconds (float) for
socket.getfqdn(name='') [function] Get fully qualified domain name from name.
socket.gethostbyaddr(ip_address) gethostbyaddr(host) -> (name, aliaslist, addresslist) Return the true host name,
socket.gethostbyname(hostname) gethostbyname(host) -> address Return the IP address (a string of the form '255.255.255.255')
socket.gethostbyname_ex(hostname) gethostbyname_ex(host) -> (name, aliaslist, addresslist) Return the true host name,
socket.gethostname() gethostname() -> string Return the current host name.
socket.getnameinfo(sockaddr, flags) getnameinfo(sockaddr, flags) --> (host, port) Get host and port for a sockaddr.
socket.getprotobyname(protocolname) getprotobyname(name) -> integer Return the protocol number for the named protocol.
socket.getservbyname(servicename[, protocolname]) getservbyname(servicename[, protocolname]) -> integer Return a port number from a
socket.getservbyport(port[, protocolname]) getservbyport(port[, protocolname]) -> string Return the service name from a port
socket.has_ipv6
socket.herror() [class] Base class for I/O related errors.
socket.htonl(x) htonl(integer) -> integer Convert a 32-bit integer from host to network byte order.
socket.htons(x) htons(integer) -> integer Convert a 16-bit unsigned integer from host to network
socket.inet_aton(ip_string) inet_aton(string) -> bytes giving packed 32-bit IP representation Convert an IP address
socket.inet_ntoa(packed_ip) inet_ntoa(packed_ip) -> ip_address_string Convert an IP address from 32-bit packed
socket.inet_ntop(address_family, packed_ip) inet_ntop(af, packed_ip) -> string formatted IP address Convert a packed IP address
socket.inet_pton(address_family, ip_string) inet_pton(af, ip) -> packed IP address string Convert an IP address from string format
socket.ntohl(x) ntohl(integer) -> integer Convert a 32-bit integer from network to host byte order.
socket.ntohs(x) ntohs(integer) -> integer Convert a 16-bit unsigned integer from network to host
socket.setdefaulttimeout(timeout) setdefaulttimeout(timeout) Set the default timeout in seconds (float) for new socket
socket.socket(family=-1, type=-1, proto=-1, fileno=None) [class] A subclass of _socket.socket adding the makefile() method.
socket.socketpair(family=<??>, type=<??>, proto=0) [function] socketpair([family[, type[, proto]]]) -> (socket object, socket object) Create a
socket.timeout() [class] Base class for I/O related errors.
socketserver
socketserver.BaseRequestHandler(request, client_address, server) [class] Base class for request handler classes.
socketserver.BaseServer(server_address, RequestHandlerClass) [class] Base class for server classes.
socketserver.DatagramRequestHandler(request, client_address, server) [class] Define self.rfile and self.wfile for datagram sockets.
socketserver.StreamRequestHandler(request, client_address, server) [class] Define self.rfile and self.wfile for stream sockets.
socketserver.TCPServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] Base class for various socket-based server classes.
socketserver.ThreadingMixIn() [class] Mix-in class to handle each request in a new thread.
socketserver.ThreadingTCPServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] Mix-in class to handle each request in a new thread.
socketserver.ThreadingUDPServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] Mix-in class to handle each request in a new thread.
socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] UDP server class.
sorted(iterable, /, *, key=None, reverse=False) Return a new list containing all items from the iterable in ascending order.
sqlite3
sqlite3.Binary(object) [class] Create a new memoryview object which references the given object.
sqlite3.Cache() [class]
sqlite3.Connection() [class] SQLite database connection object.
sqlite3.Cursor() [class] SQLite database cursor class.
sqlite3.DataError() [class] Common base class for all non-exit exceptions.
sqlite3.DatabaseError() [class] Common base class for all non-exit exceptions.
sqlite3.Date() [class] date(year, month, day) --> date object
sqlite3.DateFromTicks(ticks) [function]
sqlite3.Error() [class] Common base class for all non-exit exceptions.
sqlite3.IntegrityError() [class] Common base class for all non-exit exceptions.
sqlite3.InterfaceError() [class] Common base class for all non-exit exceptions.
sqlite3.InternalError() [class] Common base class for all non-exit exceptions.
sqlite3.NotSupportedError() [class] Common base class for all non-exit exceptions.
sqlite3.OperationalError() [class] Common base class for all non-exit exceptions.
sqlite3.OptimizedUnicode() [class] str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a
sqlite3.PARSE_COLNAMES
sqlite3.PARSE_DECLTYPES
sqlite3.PrepareProtocol() [class]
sqlite3.ProgrammingError() [class] Common base class for all non-exit exceptions.
sqlite3.Row() [class]
sqlite3.SQLITE_ALTER_TABLE
sqlite3.SQLITE_ANALYZE
sqlite3.SQLITE_ATTACH
sqlite3.SQLITE_CREATE_INDEX
sqlite3.SQLITE_CREATE_TABLE
sqlite3.SQLITE_CREATE_TEMP_INDEX
sqlite3.SQLITE_CREATE_TEMP_TABLE
sqlite3.SQLITE_CREATE_TEMP_TRIGGER
sqlite3.SQLITE_CREATE_TEMP_VIEW
sqlite3.SQLITE_CREATE_TRIGGER
sqlite3.SQLITE_CREATE_VIEW
sqlite3.SQLITE_CREATE_VTABLE
sqlite3.SQLITE_DELETE
sqlite3.SQLITE_DENY
sqlite3.SQLITE_DETACH
sqlite3.SQLITE_DONE
sqlite3.SQLITE_DROP_INDEX
sqlite3.SQLITE_DROP_TABLE
sqlite3.SQLITE_DROP_TEMP_INDEX
sqlite3.SQLITE_DROP_TEMP_TABLE
sqlite3.SQLITE_DROP_TEMP_TRIGGER
sqlite3.SQLITE_DROP_TEMP_VIEW
sqlite3.SQLITE_DROP_TRIGGER
sqlite3.SQLITE_DROP_VIEW
sqlite3.SQLITE_DROP_VTABLE
sqlite3.SQLITE_FUNCTION
sqlite3.SQLITE_IGNORE
sqlite3.SQLITE_INSERT
sqlite3.SQLITE_OK
sqlite3.SQLITE_PRAGMA
sqlite3.SQLITE_READ
sqlite3.SQLITE_RECURSIVE
sqlite3.SQLITE_REINDEX
sqlite3.SQLITE_SAVEPOINT
sqlite3.SQLITE_SELECT
sqlite3.SQLITE_TRANSACTION
sqlite3.SQLITE_UPDATE
sqlite3.Statement() [class]
sqlite3.Time() [class] time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object All arguments
sqlite3.TimeFromTicks(ticks) [function]
sqlite3.Timestamp() [class] datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]) The
sqlite3.TimestampFromTicks(ticks) [function]
sqlite3.Warning() [class] Common base class for all non-exit exceptions.
sqlite3.adapt() adapt(obj, protocol, alternate) -> adapt obj to given protocol. Non-standard.
sqlite3.adapters
sqlite3.apilevel
sqlite3.complete_statement(sql) complete_statement(sql) Checks if a string contains a complete SQL statement. Non-standard.
sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri]) connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory,
sqlite3.converters
sqlite3.enable_callback_tracebacks(flag) enable_callback_tracebacks(flag) Enable or disable callback functions throwing errors
sqlite3.enable_shared_cache() enable_shared_cache(do_enable) Enable or disable shared cache mode for the calling
sqlite3.paramstyle
sqlite3.register_adapter(type, callable) register_adapter(type, callable) Registers an adapter with pysqlite's adapter registry.
sqlite3.register_converter(typename, callable) register_converter(typename, callable) Registers a converter with pysqlite. Non-standard.
sqlite3.sqlite_version
sqlite3.sqlite_version_info
sqlite3.threadsafety
sqlite3.version
sqlite3.version_info
sre_compile
sre_compile.ANY
sre_compile.ANY_ALL
sre_compile.ASSERT
sre_compile.ASSERT_NOT
sre_compile.AT
sre_compile.ATCODES
sre_compile.AT_BEGINNING
sre_compile.AT_BEGINNING_LINE
sre_compile.AT_BEGINNING_STRING
sre_compile.AT_BOUNDARY
sre_compile.AT_END
sre_compile.AT_END_LINE
sre_compile.AT_END_STRING
sre_compile.AT_LOCALE
sre_compile.AT_LOC_BOUNDARY
sre_compile.AT_LOC_NON_BOUNDARY
sre_compile.AT_MULTILINE
sre_compile.AT_NON_BOUNDARY
sre_compile.AT_UNICODE
sre_compile.AT_UNI_BOUNDARY
sre_compile.AT_UNI_NON_BOUNDARY
sre_compile.BIGCHARSET
sre_compile.BRANCH
sre_compile.CALL
sre_compile.CATEGORY
sre_compile.CATEGORY_DIGIT
sre_compile.CATEGORY_LINEBREAK
sre_compile.CATEGORY_LOC_NOT_WORD
sre_compile.CATEGORY_LOC_WORD
sre_compile.CATEGORY_NOT_DIGIT
sre_compile.CATEGORY_NOT_LINEBREAK
sre_compile.CATEGORY_NOT_SPACE
sre_compile.CATEGORY_NOT_WORD
sre_compile.CATEGORY_SPACE
sre_compile.CATEGORY_UNI_DIGIT
sre_compile.CATEGORY_UNI_LINEBREAK
sre_compile.CATEGORY_UNI_NOT_DIGIT
sre_compile.CATEGORY_UNI_NOT_LINEBREAK
sre_compile.CATEGORY_UNI_NOT_SPACE
sre_compile.CATEGORY_UNI_NOT_WORD
sre_compile.CATEGORY_UNI_SPACE
sre_compile.CATEGORY_UNI_WORD
sre_compile.CATEGORY_WORD
sre_compile.CHARSET
sre_compile.CHCODES
sre_compile.CH_LOCALE
sre_compile.CH_UNICODE
sre_compile.FAILURE
sre_compile.GROUPREF
sre_compile.GROUPREF_EXISTS
sre_compile.GROUPREF_IGNORE
sre_compile.GROUPREF_LOC_IGNORE
sre_compile.GROUPREF_UNI_IGNORE
sre_compile.IN
sre_compile.INFO
sre_compile.IN_IGNORE
sre_compile.IN_LOC_IGNORE
sre_compile.IN_UNI_IGNORE
sre_compile.JUMP
sre_compile.LITERAL
sre_compile.LITERAL_IGNORE
sre_compile.LITERAL_LOC_IGNORE
sre_compile.LITERAL_UNI_IGNORE
sre_compile.MAGIC
sre_compile.MARK
sre_compile.MAXCODE
sre_compile.MAXGROUPS
sre_compile.MAXREPEAT
sre_compile.MAX_REPEAT
sre_compile.MAX_UNTIL
sre_compile.MIN_REPEAT
sre_compile.MIN_REPEAT_ONE
sre_compile.MIN_UNTIL
sre_compile.NEGATE
sre_compile.NOT_LITERAL
sre_compile.NOT_LITERAL_IGNORE
sre_compile.NOT_LITERAL_LOC_IGNORE
sre_compile.NOT_LITERAL_UNI_IGNORE
sre_compile.OPCODES
sre_compile.OP_IGNORE
sre_compile.OP_LOCALE_IGNORE
sre_compile.OP_UNICODE_IGNORE
sre_compile.RANGE
sre_compile.RANGE_UNI_IGNORE
sre_compile.REPEAT
sre_compile.REPEAT_ONE
sre_compile.SRE_FLAG_ASCII
sre_compile.SRE_FLAG_DEBUG
sre_compile.SRE_FLAG_DOTALL
sre_compile.SRE_FLAG_IGNORECASE
sre_compile.SRE_FLAG_LOCALE
sre_compile.SRE_FLAG_MULTILINE
sre_compile.SRE_FLAG_TEMPLATE
sre_compile.SRE_FLAG_UNICODE
sre_compile.SRE_FLAG_VERBOSE
sre_compile.SRE_INFO_CHARSET
sre_compile.SRE_INFO_LITERAL
sre_compile.SRE_INFO_PREFIX
sre_compile.SUBPATTERN
sre_compile.SUCCESS
sre_compile._ASSERT_CODES
sre_compile._BITS_TRANS
sre_compile._CODEBITS
sre_compile._LITERAL_CODES
sre_compile._REPEATING_CODES
sre_compile._SUCCESS_CODES
sre_compile._UNIT_CODES
sre_compile._bytes_to_codes(b) [function]
sre_compile._code(p, flags) [function]
sre_compile._combine_flags(flags, add_flags, del_flags, TYPE_FLAGS=292) [function]
sre_compile._compile(code, pattern, flags) [function]
sre_compile._compile_charset(charset, flags, code) [function]
sre_compile._compile_info(code, pattern, flags) [function]
sre_compile._equivalences
sre_compile._generate_overlap_table(prefix) [function] Generate an overlap table for the following prefix.
sre_compile._get_charset_prefix(pattern, flags) [function]
sre_compile._get_iscased(flags) [function]
sre_compile._get_literal_prefix(pattern, flags) [function]
sre_compile._hex_code(code) [function]
sre_compile._ignorecase_fixes
sre_compile._mk_bitmap(bits, _CODEBITS=32, _int=<??>) [function]
sre_compile._optimize_charset(charset, iscased=None, fixup=None, fixes=None) [function]
sre_compile._simple(p) [function]
sre_compile.compile(p, flags=0) [function]
sre_compile.dis(code) [function]
sre_compile.error(msg, pattern=None, pos=None) [class] Exception raised for invalid regular expressions.
sre_compile.isstring(obj) [function]
sre_constants
sre_constants.ANY
sre_constants.ANY_ALL
sre_constants.ASSERT
sre_constants.ASSERT_NOT
sre_constants.AT
sre_constants.ATCODES
sre_constants.AT_BEGINNING
sre_constants.AT_BEGINNING_LINE
sre_constants.AT_BEGINNING_STRING
sre_constants.AT_BOUNDARY
sre_constants.AT_END
sre_constants.AT_END_LINE
sre_constants.AT_END_STRING
sre_constants.AT_LOCALE
sre_constants.AT_LOC_BOUNDARY
sre_constants.AT_LOC_NON_BOUNDARY
sre_constants.AT_MULTILINE
sre_constants.AT_NON_BOUNDARY
sre_constants.AT_UNICODE
sre_constants.AT_UNI_BOUNDARY
sre_constants.AT_UNI_NON_BOUNDARY
sre_constants.BIGCHARSET
sre_constants.BRANCH
sre_constants.CALL
sre_constants.CATEGORY
sre_constants.CATEGORY_DIGIT
sre_constants.CATEGORY_LINEBREAK
sre_constants.CATEGORY_LOC_NOT_WORD
sre_constants.CATEGORY_LOC_WORD
sre_constants.CATEGORY_NOT_DIGIT
sre_constants.CATEGORY_NOT_LINEBREAK
sre_constants.CATEGORY_NOT_SPACE
sre_constants.CATEGORY_NOT_WORD
sre_constants.CATEGORY_SPACE
sre_constants.CATEGORY_UNI_DIGIT
sre_constants.CATEGORY_UNI_LINEBREAK
sre_constants.CATEGORY_UNI_NOT_DIGIT
sre_constants.CATEGORY_UNI_NOT_LINEBREAK
sre_constants.CATEGORY_UNI_NOT_SPACE
sre_constants.CATEGORY_UNI_NOT_WORD
sre_constants.CATEGORY_UNI_SPACE
sre_constants.CATEGORY_UNI_WORD
sre_constants.CATEGORY_WORD
sre_constants.CHARSET
sre_constants.CHCODES
sre_constants.CH_LOCALE
sre_constants.CH_UNICODE
sre_constants.FAILURE
sre_constants.GROUPREF
sre_constants.GROUPREF_EXISTS
sre_constants.GROUPREF_IGNORE
sre_constants.GROUPREF_LOC_IGNORE
sre_constants.GROUPREF_UNI_IGNORE
sre_constants.IN
sre_constants.INFO
sre_constants.IN_IGNORE
sre_constants.IN_LOC_IGNORE
sre_constants.IN_UNI_IGNORE
sre_constants.JUMP
sre_constants.LITERAL
sre_constants.LITERAL_IGNORE
sre_constants.LITERAL_LOC_IGNORE
sre_constants.LITERAL_UNI_IGNORE
sre_constants.MAGIC
sre_constants.MARK
sre_constants.MAXGROUPS
sre_constants.MAXREPEAT
sre_constants.MAX_REPEAT
sre_constants.MAX_UNTIL
sre_constants.MIN_REPEAT
sre_constants.MIN_REPEAT_ONE
sre_constants.MIN_UNTIL
sre_constants.NEGATE
sre_constants.NOT_LITERAL
sre_constants.NOT_LITERAL_IGNORE
sre_constants.NOT_LITERAL_LOC_IGNORE
sre_constants.NOT_LITERAL_UNI_IGNORE
sre_constants.OPCODES
sre_constants.OP_IGNORE
sre_constants.OP_LOCALE_IGNORE
sre_constants.OP_UNICODE_IGNORE
sre_constants.RANGE
sre_constants.RANGE_UNI_IGNORE
sre_constants.REPEAT
sre_constants.REPEAT_ONE
sre_constants.SRE_FLAG_ASCII
sre_constants.SRE_FLAG_DEBUG
sre_constants.SRE_FLAG_DOTALL
sre_constants.SRE_FLAG_IGNORECASE
sre_constants.SRE_FLAG_LOCALE
sre_constants.SRE_FLAG_MULTILINE
sre_constants.SRE_FLAG_TEMPLATE
sre_constants.SRE_FLAG_UNICODE
sre_constants.SRE_FLAG_VERBOSE
sre_constants.SRE_INFO_CHARSET
sre_constants.SRE_INFO_LITERAL
sre_constants.SRE_INFO_PREFIX
sre_constants.SUBPATTERN
sre_constants.SUCCESS
sre_constants._NamedIntConstant(value, name) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
sre_constants._makecodes(names) [function]
sre_constants.error(msg, pattern=None, pos=None) [class] Exception raised for invalid regular expressions.
sre_parse
sre_parse.ANY
sre_parse.ANY_ALL
sre_parse.ASCIILETTERS
sre_parse.ASSERT
sre_parse.ASSERT_NOT
sre_parse.AT
sre_parse.ATCODES
sre_parse.AT_BEGINNING
sre_parse.AT_BEGINNING_LINE
sre_parse.AT_BEGINNING_STRING
sre_parse.AT_BOUNDARY
sre_parse.AT_END
sre_parse.AT_END_LINE
sre_parse.AT_END_STRING
sre_parse.AT_LOCALE
sre_parse.AT_LOC_BOUNDARY
sre_parse.AT_LOC_NON_BOUNDARY
sre_parse.AT_MULTILINE
sre_parse.AT_NON_BOUNDARY
sre_parse.AT_UNICODE
sre_parse.AT_UNI_BOUNDARY
sre_parse.AT_UNI_NON_BOUNDARY
sre_parse.BIGCHARSET
sre_parse.BRANCH
sre_parse.CALL
sre_parse.CATEGORIES
sre_parse.CATEGORY
sre_parse.CATEGORY_DIGIT
sre_parse.CATEGORY_LINEBREAK
sre_parse.CATEGORY_LOC_NOT_WORD
sre_parse.CATEGORY_LOC_WORD
sre_parse.CATEGORY_NOT_DIGIT
sre_parse.CATEGORY_NOT_LINEBREAK
sre_parse.CATEGORY_NOT_SPACE
sre_parse.CATEGORY_NOT_WORD
sre_parse.CATEGORY_SPACE
sre_parse.CATEGORY_UNI_DIGIT
sre_parse.CATEGORY_UNI_LINEBREAK
sre_parse.CATEGORY_UNI_NOT_DIGIT
sre_parse.CATEGORY_UNI_NOT_LINEBREAK
sre_parse.CATEGORY_UNI_NOT_SPACE
sre_parse.CATEGORY_UNI_NOT_WORD
sre_parse.CATEGORY_UNI_SPACE
sre_parse.CATEGORY_UNI_WORD
sre_parse.CATEGORY_WORD
sre_parse.CHARSET
sre_parse.CHCODES
sre_parse.CH_LOCALE
sre_parse.CH_UNICODE
sre_parse.DIGITS
sre_parse.ESCAPES
sre_parse.FAILURE
sre_parse.FLAGS
sre_parse.GLOBAL_FLAGS
sre_parse.GROUPREF
sre_parse.GROUPREF_EXISTS
sre_parse.GROUPREF_IGNORE
sre_parse.GROUPREF_LOC_IGNORE
sre_parse.GROUPREF_UNI_IGNORE
sre_parse.HEXDIGITS
sre_parse.IN
sre_parse.INFO
sre_parse.IN_IGNORE
sre_parse.IN_LOC_IGNORE
sre_parse.IN_UNI_IGNORE
sre_parse.JUMP
sre_parse.LITERAL
sre_parse.LITERAL_IGNORE
sre_parse.LITERAL_LOC_IGNORE
sre_parse.LITERAL_UNI_IGNORE
sre_parse.MAGIC
sre_parse.MARK
sre_parse.MAXGROUPS
sre_parse.MAXREPEAT
sre_parse.MAX_REPEAT
sre_parse.MAX_UNTIL
sre_parse.MIN_REPEAT
sre_parse.MIN_REPEAT_ONE
sre_parse.MIN_UNTIL
sre_parse.NEGATE
sre_parse.NOT_LITERAL
sre_parse.NOT_LITERAL_IGNORE
sre_parse.NOT_LITERAL_LOC_IGNORE
sre_parse.NOT_LITERAL_UNI_IGNORE
sre_parse.OCTDIGITS
sre_parse.OPCODES
sre_parse.OP_IGNORE
sre_parse.OP_LOCALE_IGNORE
sre_parse.OP_UNICODE_IGNORE
sre_parse.Pattern() [class]
sre_parse.RANGE
sre_parse.RANGE_UNI_IGNORE
sre_parse.REPEAT
sre_parse.REPEAT_CHARS
sre_parse.REPEAT_ONE
sre_parse.SPECIAL_CHARS
sre_parse.SRE_FLAG_ASCII
sre_parse.SRE_FLAG_DEBUG
sre_parse.SRE_FLAG_DOTALL
sre_parse.SRE_FLAG_IGNORECASE
sre_parse.SRE_FLAG_LOCALE
sre_parse.SRE_FLAG_MULTILINE
sre_parse.SRE_FLAG_TEMPLATE
sre_parse.SRE_FLAG_UNICODE
sre_parse.SRE_FLAG_VERBOSE
sre_parse.SRE_INFO_CHARSET
sre_parse.SRE_INFO_LITERAL
sre_parse.SRE_INFO_PREFIX
sre_parse.SUBPATTERN
sre_parse.SUCCESS
sre_parse.SubPattern(pattern, data=None) [class]
sre_parse.TYPE_FLAGS
sre_parse.Tokenizer(string) [class]
sre_parse.Verbose() [class] Common base class for all non-exit exceptions.
sre_parse.WHITESPACE
sre_parse._REPEATCODES
sre_parse._UNITCODES
sre_parse._class_escape(source, escape) [function]
sre_parse._escape(source, escape, state) [function]
sre_parse._parse(source, state, verbose, nested, first=False) [function]
sre_parse._parse_flags(source, state, char) [function]
sre_parse._parse_sub(source, state, verbose, nested) [function]
sre_parse._uniq(items) [function]
sre_parse.error(msg, pattern=None, pos=None) [class] Exception raised for invalid regular expressions.
sre_parse.expand_template(template, match) [function]
sre_parse.fix_flags(src, flags) [function]
sre_parse.parse(str, flags=0, pattern=None) [function]
sre_parse.parse_template(source, pattern) [function]
ssl
ssl.AF_INET
ssl.ALERT_DESCRIPTION_ACCESS_DENIED
ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE
ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE
ssl.ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE
ssl.ALERT_DESCRIPTION_BAD_RECORD_MAC
ssl.ALERT_DESCRIPTION_CERTIFICATE_EXPIRED
ssl.ALERT_DESCRIPTION_CERTIFICATE_REVOKED
ssl.ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN
ssl.ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE
ssl.ALERT_DESCRIPTION_CLOSE_NOTIFY
ssl.ALERT_DESCRIPTION_DECODE_ERROR
ssl.ALERT_DESCRIPTION_DECOMPRESSION_FAILURE
ssl.ALERT_DESCRIPTION_DECRYPT_ERROR
ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE
ssl.ALERT_DESCRIPTION_ILLEGAL_PARAMETER
ssl.ALERT_DESCRIPTION_INSUFFICIENT_SECURITY
ssl.ALERT_DESCRIPTION_INTERNAL_ERROR
ssl.ALERT_DESCRIPTION_NO_RENEGOTIATION
ssl.ALERT_DESCRIPTION_PROTOCOL_VERSION
ssl.ALERT_DESCRIPTION_RECORD_OVERFLOW
ssl.ALERT_DESCRIPTION_UNEXPECTED_MESSAGE
ssl.ALERT_DESCRIPTION_UNKNOWN_CA
ssl.ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY
ssl.ALERT_DESCRIPTION_UNRECOGNIZED_NAME
ssl.ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE
ssl.ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION
ssl.ALERT_DESCRIPTION_USER_CANCELLED
ssl.AlertDescription(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
ssl.CERT_NONE
ssl.CERT_OPTIONAL
ssl.CERT_REQUIRED
ssl.CHANNEL_BINDING_TYPES
ssl.CertificateError() [class] A certificate could not be verified.
ssl.DER_cert_to_PEM_cert(der_cert_bytes) [function] Takes a certificate in binary DER format and returns the PEM version of it as a string.
ssl.DefaultVerifyPaths(cafile, capath, openssl_cafile_env, openssl_cafile, openssl_capath_env, openssl_capath) [class] DefaultVerifyPaths(cafile, capath, openssl_cafile_env, openssl_cafile, openssl_capath_env,
ssl.HAS_ALPN
ssl.HAS_ECDH
ssl.HAS_NEVER_CHECK_COMMON_NAME
ssl.HAS_NPN
ssl.HAS_SNI
ssl.HAS_SSLv2
ssl.HAS_SSLv3
ssl.HAS_TLSv1
ssl.HAS_TLSv1_1
ssl.HAS_TLSv1_2
ssl.HAS_TLSv1_3
ssl.MemoryBIO() [class]
ssl.OPENSSL_VERSION
ssl.OPENSSL_VERSION_INFO
ssl.OPENSSL_VERSION_NUMBER
ssl.OP_ALL
ssl.OP_CIPHER_SERVER_PREFERENCE
ssl.OP_NO_COMPRESSION
ssl.OP_NO_RENEGOTIATION
ssl.OP_NO_SSLv2
ssl.OP_NO_SSLv3
ssl.OP_NO_TICKET
ssl.OP_NO_TLSv1
ssl.OP_NO_TLSv1_1
ssl.OP_NO_TLSv1_2
ssl.OP_NO_TLSv1_3
ssl.OP_SINGLE_DH_USE
ssl.OP_SINGLE_ECDH_USE
ssl.Options(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
ssl.PEM_FOOTER
ssl.PEM_HEADER
ssl.PEM_cert_to_DER_cert(pem_cert_string) [function] Takes a certificate in ASCII PEM format and returns the DER-encoded version of it
ssl.PROTOCOL_SSLv23
ssl.PROTOCOL_TLS
ssl.PROTOCOL_TLS_CLIENT
ssl.PROTOCOL_TLS_SERVER
ssl.PROTOCOL_TLSv1
ssl.PROTOCOL_TLSv1_1
ssl.PROTOCOL_TLSv1_2
ssl.Purpose(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] SSLContext purpose flags with X509v3 Extended Key Usage objects
ssl.RAND_add(string, entropy) Mix string into the OpenSSL PRNG state.
ssl.RAND_bytes(n) Generate n cryptographically strong pseudo-random bytes.
ssl.RAND_pseudo_bytes(n) Generate n pseudo-random bytes.
ssl.RAND_status() Returns 1 if the OpenSSL PRNG has been seeded with enough data and 0 if not.
ssl.SOCK_STREAM
ssl.SOL_SOCKET
ssl.SO_TYPE
ssl.SSLCertVerificationError() [class] A certificate could not be verified.
ssl.SSLContext(protocol=<??>, *args, **kwargs) [class] An SSLContext holds various SSL-related configuration options and data, such as certificates
ssl.SSLEOFError() [class] SSL/TLS connection terminated abruptly.
ssl.SSLError() [class] An error occurred in the SSL implementation.
ssl.SSLErrorNumber(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
ssl.SSLObject(*args, **kwargs) [class] This class implements an interface on top of a low-level SSL object as implemented
ssl.SSLSession() [class]
ssl.SSLSocket(*args, **kwargs) [class] This class implements a subtype of socket.socket that wraps the underlying OS socket
ssl.SSLSyscallError() [class] System error when attempting SSL operation.
ssl.SSLWantReadError() [class] Non-blocking SSL socket needs to read more data before the requested operation can
ssl.SSLWantWriteError() [class] Non-blocking SSL socket needs to write more data before the requested operation can
ssl.SSLZeroReturnError() [class] SSL/TLS session closed cleanly.
ssl.SSL_ERROR_EOF
ssl.SSL_ERROR_INVALID_ERROR_CODE
ssl.SSL_ERROR_SSL
ssl.SSL_ERROR_SYSCALL
ssl.SSL_ERROR_WANT_CONNECT
ssl.SSL_ERROR_WANT_READ
ssl.SSL_ERROR_WANT_WRITE
ssl.SSL_ERROR_WANT_X509_LOOKUP
ssl.SSL_ERROR_ZERO_RETURN
ssl.TLSVersion(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
ssl.VERIFY_CRL_CHECK_CHAIN
ssl.VERIFY_CRL_CHECK_LEAF
ssl.VERIFY_DEFAULT
ssl.VERIFY_X509_STRICT
ssl.VERIFY_X509_TRUSTED_FIRST
ssl.VerifyFlags(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
ssl.VerifyMode(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
ssl.cert_time_to_seconds(cert_time) [function] Return the time in seconds since the Epoch, given the timestring representing the
ssl.create_connection(address, timeout=<??>, source_address=None) [function] Connect to *address* and return the socket object.
ssl.create_default_context(purpose=<??>, *, cafile=None, capath=None, cadata=None) [function] Create a SSLContext object with default settings.
ssl.enum_certificates(store_name) Retrieve certificates from Windows' cert store.
ssl.enum_crls(store_name) Retrieve CRLs from Windows' cert store.
ssl.get_default_verify_paths() [function] Return paths to default cafile and capath.
ssl.get_protocol_name(protocol_code) [function]
ssl.get_server_certificate(addr, ssl_version=<??>, ca_certs=None) [function] Retrieve the certificate from the server at the specified address, and return it
ssl.match_hostname(cert, hostname) [function] Verify that *cert* (in decoded format as returned by SSLSocket.getpeercert()) matches
ssl.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None) [function] Returns a new subclass of tuple with named fields.
ssl.socket(family=-1, type=-1, proto=-1, fileno=None) [class] A subclass of _socket.socket adding the makefile() method.
ssl.socket_error() [class] Base class for I/O related errors.
ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=<??>, ssl_version=<??>, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None) [function]
stat
stat.FILE_ATTRIBUTE_ARCHIVE
stat.FILE_ATTRIBUTE_COMPRESSED
stat.FILE_ATTRIBUTE_DEVICE
stat.FILE_ATTRIBUTE_DIRECTORY
stat.FILE_ATTRIBUTE_ENCRYPTED
stat.FILE_ATTRIBUTE_HIDDEN
stat.FILE_ATTRIBUTE_INTEGRITY_STREAM
stat.FILE_ATTRIBUTE_NORMAL
stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
stat.FILE_ATTRIBUTE_NO_SCRUB_DATA
stat.FILE_ATTRIBUTE_OFFLINE
stat.FILE_ATTRIBUTE_READONLY
stat.FILE_ATTRIBUTE_REPARSE_POINT
stat.FILE_ATTRIBUTE_SPARSE_FILE
stat.FILE_ATTRIBUTE_SYSTEM
stat.FILE_ATTRIBUTE_TEMPORARY
stat.FILE_ATTRIBUTE_VIRTUAL
stat.SF_APPEND
stat.SF_ARCHIVED
stat.SF_IMMUTABLE
stat.SF_NOUNLINK
stat.SF_SNAPSHOT
stat.ST_ATIME
stat.ST_CTIME
stat.ST_DEV
stat.ST_GID
stat.ST_INO
stat.ST_MODE
stat.ST_MTIME
stat.ST_NLINK
stat.ST_SIZE
stat.ST_UID
stat.S_ENFMT
stat.S_IEXEC
stat.S_IFBLK
stat.S_IFCHR
stat.S_IFDIR
stat.S_IFDOOR
stat.S_IFIFO
stat.S_IFLNK
stat.S_IFMT(mode) Return the portion of the file's mode that describes the file type.
stat.S_IFPORT
stat.S_IFREG
stat.S_IFSOCK
stat.S_IFWHT
stat.S_IMODE(mode) Return the portion of the file's mode that can be set by os.chmod().
stat.S_IREAD
stat.S_IRGRP
stat.S_IROTH
stat.S_IRUSR
stat.S_IRWXG
stat.S_IRWXO
stat.S_IRWXU
stat.S_ISBLK(mode) S_ISBLK(mode) -> bool Return True if mode is from a block special device file.
stat.S_ISCHR(mode) S_ISCHR(mode) -> bool Return True if mode is from a character special device file.
stat.S_ISDIR(mode) S_ISDIR(mode) -> bool Return True if mode is from a directory.
stat.S_ISDOOR(mode) S_ISDOOR(mode) -> bool Return True if mode is from a door.
stat.S_ISFIFO(mode) S_ISFIFO(mode) -> bool Return True if mode is from a FIFO (named pipe).
stat.S_ISGID
stat.S_ISLNK(mode) S_ISLNK(mode) -> bool Return True if mode is from a symbolic link.
stat.S_ISPORT(mode) S_ISPORT(mode) -> bool Return True if mode is from an event port.
stat.S_ISREG(mode) S_ISREG(mode) -> bool Return True if mode is from a regular file.
stat.S_ISSOCK(mode) S_ISSOCK(mode) -> bool Return True if mode is from a socket.
stat.S_ISUID
stat.S_ISVTX
stat.S_ISWHT(mode) S_ISWHT(mode) -> bool Return True if mode is from a whiteout.
stat.S_IWGRP
stat.S_IWOTH
stat.S_IWRITE
stat.S_IWUSR
stat.S_IXGRP
stat.S_IXOTH
stat.S_IXUSR
stat.UF_APPEND
stat.UF_COMPRESSED
stat.UF_HIDDEN
stat.UF_IMMUTABLE
stat.UF_NODUMP
stat.UF_NOUNLINK
stat.UF_OPAQUE
stat.filemode(mode) Convert a file's mode to a string of the form '-rwxrwxrwx'
staticmethod(function) [class] staticmethod(function) -> method Convert a function to be a static method.
statistics
statistics.StatisticsError() [class] Inappropriate argument value (of correct type).
statistics.harmonic_mean(data) [function] Return the harmonic mean of data.
statistics.mean(data) [function] Return the sample arithmetic mean of data.
statistics.median(data) [function] Return the median (middle value) of numeric data.
statistics.median_grouped(data, interval=1) [function] Return the 50th percentile (median) of grouped continuous data.
statistics.median_high(data) [function] Return the high median of data.
statistics.median_low(data) [function] Return the low median of numeric data.
statistics.mode(data) [function] Return the most common data point from discrete or nominal data.
statistics.pstdev(data, mu=None) [function] Return the square root of the population variance.
statistics.pvariance(data, mu=None) [function] Return the population variance of ``data``.
statistics.stdev(data, xbar=None) [function] Return the square root of the sample variance.
statistics.variance(data, xbar=None) [function] Return the sample variance of data.
str(object='') [class] str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a
str(object=b'', encoding='utf-8', errors='strict') [class] str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a
string
string.Formatter() [class]
string.Template(template) [class] A string class for supporting $-substitutions.
string.ascii_letters
string.ascii_lowercase
string.ascii_uppercase
string.capwords(s, sep=None) [function] capwords(s [,sep]) -> string Split the argument into words using split, capitalize
string.digits
string.hexdigits
string.octdigits
string.printable
string.punctuation
string.whitespace
stringprep
stringprep.b1_set
stringprep.b3_exceptions
stringprep.c22_specials
stringprep.c6_set
stringprep.c7_set
stringprep.c8_set
stringprep.c9_set
stringprep.in_table_a1(code) [function]
stringprep.in_table_b1(code) [function]
stringprep.in_table_c11(code) [function]
stringprep.in_table_c11_c12(code) [function]
stringprep.in_table_c12(code) [function]
stringprep.in_table_c21(code) [function]
stringprep.in_table_c21_c22(code) [function]
stringprep.in_table_c22(code) [function]
stringprep.in_table_c3(code) [function]
stringprep.in_table_c4(code) [function]
stringprep.in_table_c5(code) [function]
stringprep.in_table_c6(code) [function]
stringprep.in_table_c7(code) [function]
stringprep.in_table_c8(code) [function]
stringprep.in_table_c9(code) [function]
stringprep.in_table_d1(code) [function]
stringprep.in_table_d2(code) [function]
stringprep.map_table_b2(a) [function]
stringprep.map_table_b3(code) [function]
stringprep.unicodedata
struct
struct.Struct(format) [class] Create a compiled struct object.
struct.calcsize(format) Return size in bytes of the struct described by the format string.
struct.error() [class] Common base class for all non-exit exceptions.
struct.iter_unpack(format, buffer) Return an iterator yielding tuples unpacked from the given bytes.
struct.pack(format, v1, v2, ...) pack(format, v1, v2, ...) -> bytes Return a bytes object containing the values v1,
struct.pack_into(format, buffer, offset, v1, v2, ...) pack_into(format, buffer, offset, v1, v2, ...) Pack the values v1, v2, ...
struct.unpack(format, buffer) Return a tuple containing values unpacked according to the format string.
struct.unpack_from(format, /, buffer, offset=0) Return a tuple containing values unpacked according to the format string.
subprocess
subprocess.ABOVE_NORMAL_PRIORITY_CLASS
subprocess.BELOW_NORMAL_PRIORITY_CLASS
subprocess.CREATE_BREAKAWAY_FROM_JOB
subprocess.CREATE_DEFAULT_ERROR_MODE
subprocess.CREATE_NEW_CONSOLE
subprocess.CREATE_NEW_PROCESS_GROUP
subprocess.CREATE_NO_WINDOW
subprocess.CalledProcessError(returncode, cmd, output=None, stderr=None) [class] Raised when run() is called with check=True and the process returns a non-zero exit
subprocess.CompletedProcess(args, returncode, stdout=None, stderr=None) [class] A process that has finished running.
subprocess.DETACHED_PROCESS
subprocess.DEVNULL
subprocess.HIGH_PRIORITY_CLASS
subprocess.IDLE_PRIORITY_CLASS
subprocess.NORMAL_PRIORITY_CLASS
subprocess.PIPE
subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None, text=None) [class] Execute a child program in a new process.
subprocess.REALTIME_PRIORITY_CLASS
subprocess.STARTF_USESHOWWINDOW
subprocess.STARTF_USESTDHANDLES
subprocess.STARTUPINFO(*, dwFlags=0, hStdInput=None, hStdOutput=None, hStdError=None, wShowWindow=0, lpAttributeList=None) [class]
subprocess.STDOUT
subprocess.STD_ERROR_HANDLE
subprocess.STD_INPUT_HANDLE
subprocess.STD_OUTPUT_HANDLE
subprocess.SW_HIDE
subprocess.SubprocessError() [class] Common base class for all non-exit exceptions.
subprocess.TimeoutExpired(cmd, timeout, output=None, stderr=None) [class] This exception is raised when the timeout expires while waiting for a child process.
subprocess.call(*popenargs, *, timeout=None, **kwargs) [function] Run command with arguments.
subprocess.check_call(*popenargs, **kwargs) [function] Run command with arguments.
subprocess.check_output(*popenargs, *, timeout=None, **kwargs) [function] Run command with arguments and return its output.
subprocess.getoutput(cmd) [function] Return output (stdout or stderr) of executing cmd in a shell.
subprocess.getstatusoutput(cmd) [function] Return (exitcode, output) of executing cmd in a shell.
subprocess.run(*popenargs, *, input=None, capture_output=False, timeout=None, check=False, **kwargs) [function] Run command with arguments and return a CompletedProcess instance.
sum(iterable, start=0) Return the sum of a 'start' value (default: 0) plus an iterable of numbers When the
sunau
sunau.AUDIO_FILE_ENCODING_ADPCM_G721
sunau.AUDIO_FILE_ENCODING_ADPCM_G722
sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3
sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5
sunau.AUDIO_FILE_ENCODING_ALAW_8
sunau.AUDIO_FILE_ENCODING_DOUBLE
sunau.AUDIO_FILE_ENCODING_FLOAT
sunau.AUDIO_FILE_ENCODING_LINEAR_16
sunau.AUDIO_FILE_ENCODING_LINEAR_24
sunau.AUDIO_FILE_ENCODING_LINEAR_32
sunau.AUDIO_FILE_ENCODING_LINEAR_8
sunau.AUDIO_FILE_ENCODING_MULAW_8
sunau.AUDIO_FILE_MAGIC
sunau.AUDIO_UNKNOWN_SIZE
sunau.Au_read(f) [class]
sunau.Au_write(f) [class]
sunau.Error() [class] Common base class for all non-exit exceptions.
sunau.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None) [function] Returns a new subclass of tuple with named fields.
sunau.open(f, mode=None) [function]
sunau.openfp(f, mode=None) [function]
super([type[, object-or-type]]) [class] super() -> same as super(__class__, <first argument>) super(type) -> unbound super
symbol
symbol.and_expr
symbol.and_test
symbol.annassign
symbol.arglist
symbol.argument
symbol.arith_expr
symbol.assert_stmt
symbol.async_funcdef
symbol.async_stmt
symbol.atom
symbol.atom_expr
symbol.augassign
symbol.break_stmt
symbol.classdef
symbol.comp_for
symbol.comp_if
symbol.comp_iter
symbol.comp_op
symbol.comparison
symbol.compound_stmt
symbol.continue_stmt
symbol.decorated
symbol.decorator
symbol.decorators
symbol.del_stmt
symbol.dictorsetmaker
symbol.dotted_as_name
symbol.dotted_as_names
symbol.dotted_name
symbol.encoding_decl
symbol.eval_input
symbol.except_clause
symbol.expr
symbol.expr_stmt
symbol.exprlist
symbol.factor
symbol.file_input
symbol.flow_stmt
symbol.for_stmt
symbol.funcdef
symbol.global_stmt
symbol.if_stmt
symbol.import_as_name
symbol.import_as_names
symbol.import_from
symbol.import_name
symbol.import_stmt
symbol.lambdef
symbol.lambdef_nocond
symbol.nonlocal_stmt
symbol.not_test
symbol.or_test
symbol.parameters
symbol.pass_stmt
symbol.power
symbol.raise_stmt
symbol.return_stmt
symbol.shift_expr
symbol.simple_stmt
symbol.single_input
symbol.sliceop
symbol.small_stmt
symbol.star_expr
symbol.stmt
symbol.subscript
symbol.subscriptlist
symbol.suite
symbol.sym_name
symbol.sync_comp_for
symbol.term
symbol.test
symbol.test_nocond
symbol.testlist
symbol.testlist_comp
symbol.testlist_star_expr
symbol.tfpdef
symbol.trailer
symbol.try_stmt
symbol.typedargslist
symbol.varargslist
symbol.vfpdef
symbol.while_stmt
symbol.with_item
symbol.with_stmt
symbol.xor_expr
symbol.yield_arg
symbol.yield_expr
symbol.yield_stmt
symtable
symtable.Class(raw_table, filename) [class]
symtable.Function(raw_table, filename) [class]
symtable.Symbol(name, flags, namespaces=None) [class]
symtable.SymbolTable(raw_table, filename) [class]
symtable.symtable(code, filename, compile_type) [function]
sys
sys._clear_type_cache() _clear_type_cache() -> None Clear the internal type lookup cache.
sys._current_frames() _current_frames() -> dictionary Return a dictionary mapping each current thread T's
sys._debugmallocstats() _debugmallocstats() Print summary info to stderr about the state of pymalloc's structures.
sys._enablelegacywindowsfsencoding() _enablelegacywindowsfsencoding() Changes the default filesystem encoding to mbcs:replace
sys._framework
sys._getframe() _getframe([depth]) -> frameobject Return a frame object from the call stack.
sys._git
sys._home
sys._xoptions
sys.api_version
sys.argv
sys.base_exec_prefix
sys.base_prefix
sys.breakpointhook(*args, **kws) breakpointhook(*args, **kws) This hook function is called by built-in breakpoint().
sys.builtin_module_names
sys.byteorder
sys.call_tracing() call_tracing(func, args) -> object Call func(*args), while tracing is enabled.
sys.callstats() callstats() -> tuple of integers Return a tuple of function call statistics, if CALL_PROFILE
sys.copyright
sys.displayhook() displayhook(object) -> None Print an object to sys.stdout and also save it in builtins._
sys.dllhandle
sys.dont_write_bytecode
sys.exc_info() exc_info() -> (type, value, traceback) Return information about the most recent exception
sys.excepthook() excepthook(exctype, value, traceback) -> None Handle an exception by displaying it
sys.exec_prefix
sys.executable
sys.exit() exit([status]) Exit the interpreter by raising SystemExit(status).
sys.flags
sys.float_info
sys.float_repr_style
sys.get_asyncgen_hooks() get_asyncgen_hooks() Return a namedtuple of installed asynchronous generators hooks
sys.get_coroutine_origin_tracking_depth() Check status of origin tracking for coroutine objects in this thread.
sys.get_coroutine_wrapper() get_coroutine_wrapper() Return the wrapper for coroutine objects set by sys.set_coroutine_wrapper.
sys.getallocatedblocks() getallocatedblocks() -> integer Return the number of memory blocks currently allocated,
sys.getcheckinterval() getcheckinterval() -> current check interval; see setcheckinterval().
sys.getdefaultencoding() getdefaultencoding() -> string Return the current default string encoding used by
sys.getfilesystemencodeerrors() getfilesystemencodeerrors() -> string Return the error mode used to convert Unicode
sys.getfilesystemencoding() getfilesystemencoding() -> string Return the encoding used to convert Unicode filenames
sys.getprofile() getprofile() Return the profiling function set with sys.setprofile.
sys.getrecursionlimit() getrecursionlimit() Return the current value of the recursion limit, the maximum
sys.getrefcount() getrefcount(object) -> integer Return the reference count of object.
sys.getsizeof(object[, default]) getsizeof(object, default) -> int Return the size of object in bytes.
sys.getswitchinterval() getswitchinterval() -> current thread switch interval; see setswitchinterval().
sys.gettrace() gettrace() Return the global debug tracing function set with sys.settrace.
sys.getwindowsversion() getwindowsversion() Return information about the running version of Windows as a
sys.hash_info
sys.hexversion
sys.implementation
sys.int_info
sys.intern() intern(string) -> string ``Intern'' the given string.
sys.is_finalizing() is_finalizing() Return True if Python is exiting.
sys.maxsize
sys.maxunicode
sys.meta_path
sys.modules
sys.path
sys.path_hooks
sys.path_importer_cache
sys.platform
sys.prefix
sys.set_asyncgen_hooks(firstiter, finalizer) set_asyncgen_hooks(*, firstiter=None, finalizer=None) Set a finalizer for async generators
sys.set_coroutine_origin_tracking_depth(depth) Enable or disable origin tracking for coroutine objects in this thread.
sys.set_coroutine_wrapper() set_coroutine_wrapper(wrapper) Set a wrapper for coroutine objects.
sys.setcheckinterval() setcheckinterval(n) Tell the Python interpreter to check for asynchronous events
sys.setprofile(profilefunc) setprofile(function) Set the profiling function.
sys.setrecursionlimit() setrecursionlimit(n) Set the maximum depth of the Python interpreter stack to n.
sys.setswitchinterval() setswitchinterval(n) Set the ideal thread switching delay inside the Python interpreter
sys.settrace(tracefunc) settrace(function) Set the global debug tracing function.
sys.stderr
sys.stdin
sys.stdout
sys.thread_info
sys.version
sys.version_info
sys.warnoptions
sys.winver
sysconfig
sysconfig.get_config_h_filename() [function] Return the path of pyconfig.h.
sysconfig.get_config_var(name) [function] Return the value of a single variable using the dictionary returned by 'get_config_vars()'.
sysconfig.get_config_vars(*args) [function] With no arguments, return a dictionary of all configuration variables relevant for
sysconfig.get_makefile_filename() [function] Return the path of the Makefile.
sysconfig.get_path(name, scheme='nt', vars=None, expand=True) [function] Return a path corresponding to the scheme. ``scheme`` is the install scheme name.
sysconfig.get_path_names() [function] Return a tuple containing the paths names.
sysconfig.get_paths(scheme='nt', vars=None, expand=True) [function] Return a mapping containing an install scheme. ``scheme`` is the install scheme name.
sysconfig.get_platform() [function] Return a string that identifies the current platform.
sysconfig.get_python_version() [function]
sysconfig.get_scheme_names() [function] Return a tuple containing the schemes names.
sysconfig.parse_config_h(fp, vars=None) [function] Parse a config.h-style file. A dictionary containing name/value pairs is returned.
tabnanny
tabnanny.NannyNag(lineno, msg, line) [class] Raised by process_tokens() if detecting an ambiguous indent.
tabnanny.check(file) [function] check(file_or_dir) If file_or_dir is a directory and not a symbolic link, then recursively
tabnanny.process_tokens(tokens) [function]
tarfile
tarfile.CompressionError() [class] Exception for unavailable compression methods.
tarfile.DEFAULT_FORMAT
tarfile.ENCODING
tarfile.ExtractError() [class] General exception for extract errors.
tarfile.GNU_FORMAT
tarfile.HeaderError() [class] Base exception for header errors.
tarfile.PAX_FORMAT
tarfile.ReadError() [class] Exception for unreadable tar archives.
tarfile.StreamError() [class] Exception for unsupported operations on stream-like TarFiles.
tarfile.TarError() [class] Base exception.
tarfile.TarFile(name=None, mode='r', fileobj=None, format=None, tarinfo=None, dereference=None, ignore_zeros=None, encoding=None, errors='surrogateescape', pax_headers=None, debug=None, errorlevel=None, copybufsize=None) [class] The TarFile Class provides an interface to tar archives.
tarfile.TarInfo(name='') [class] Informational class which holds the details about an archive member given by a tar
tarfile.USTAR_FORMAT
tarfile.is_tarfile(name) [function] Return True if name points to a tar archive that we are able to handle, else return
tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs) [method] Open a tar archive for reading, writing or appending.
telnetlib
telnetlib.Telnet(host=None, port=0, timeout=<??>) [class] Telnet interface class.
tempfile
tempfile.NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True) [function] Create and return a temporary file.
tempfile.SpooledTemporaryFile(max_size=0, mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None) [class] Temporary file wrapper, specialized to switch from BytesIO or StringIO to a real
tempfile.TMP_MAX
tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None) [class] Create and return a temporary directory.
tempfile.TemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True) [function] Create and return a temporary file.
tempfile.gettempdir() [function] Accessor for tempfile.tempdir.
tempfile.gettempdirb() [function] A bytes version of tempfile.gettempdir().
tempfile.gettempprefix() [function] The default prefix for temporary directories.
tempfile.gettempprefixb() [function] The default prefix for temporary directories as bytes.
tempfile.mkdtemp(suffix=None, prefix=None, dir=None) [function] User-callable function to create and return a unique temporary directory.
tempfile.mkstemp(suffix=None, prefix=None, dir=None, text=False) [function] User-callable function to create and return a unique temporary file.
tempfile.mktemp(suffix='', prefix='tmp', dir=None) [function] User-callable function to return a unique temporary file name. The file is not created.
tempfile.tempdir
textwrap
textwrap.TextWrapper(width=70, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, *, max_lines=None, placeholder=' [...]') [class] Object for wrapping/filling text.
textwrap.dedent(text) [function] Remove any common leading whitespace from every line in `text`.
textwrap.fill(text, width=70, **kwargs) [function] Fill a single paragraph of text, returning a new string.
textwrap.indent(text, prefix, predicate=None) [function] Adds 'prefix' to the beginning of selected lines in 'text'.
textwrap.shorten(text, width, **kwargs) [function] Collapse and truncate the given text to fit in the given width.
textwrap.wrap(text, width=70, **kwargs) [function] Wrap a single paragraph of text, returning a list of wrapped lines.
threading
threading.Barrier(parties, action=None, timeout=None) [class] Implements a Barrier.
threading.BoundedSemaphore(value=1) [class] Implements a bounded semaphore.
threading.BrokenBarrierError() [class] Unspecified run-time error.
threading.Condition(lock=None) [class] Class that implements a condition variable.
threading.Event() [class] Class implementing event objects.
threading.Lock() allocate_lock() -> lock object (allocate() is an obsolete synonym) Create a new lock
threading.RLock(*args, **kwargs) [function] Factory function that returns a new reentrant lock.
threading.Semaphore(value=1) [class] This class implements semaphore objects.
threading.TIMEOUT_MAX
threading.Thread(group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None) [class] A class that represents a thread of control.
threading.ThreadError() [class] Unspecified run-time error.
threading.Timer(interval, function, args=None, kwargs=None) [class] Call a function after a specified number of seconds: t = Timer(30.0, f, args=None,
threading.active_count() [function] Return the number of Thread objects currently alive.
threading.current_thread() [function] Return the current Thread object, corresponding to the caller's thread of control.
threading.enumerate() [function] Return a list of all Thread objects currently alive.
threading.get_ident() get_ident() -> integer Return a non-zero integer that uniquely identifies the current
threading.local() [class] Thread-local data
threading.main_thread() [function] Return the main thread object.
threading.setprofile(func) [function] Set a profile function for all threads started from the threading module.
threading.settrace(func) [function] Set a trace function for all threads started from the threading module.
threading.stack_size([size]) stack_size([size]) -> size Return the thread stack size used when creating new threads.
time
time.altzone
time.asctime([t]) asctime([tuple]) -> string Convert a time tuple to a string, e.g.
time.clock() clock() -> floating point number Return the CPU time or real time since the start
time.ctime([secs]) ctime(seconds) -> string Convert a time in seconds since the Epoch to a string in
time.daylight
time.get_clock_info(name) get_clock_info(name: str) -> dict Get information of the specified clock.
time.gmtime([secs]) gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec, tm_wday,
time.localtime([secs]) localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min, tm_sec,tm_wday,tm_yday,tm_isdst)
time.mktime(t) mktime(tuple) -> floating point number Convert a time tuple in local time to seconds
time.monotonic() monotonic() -> float Monotonic clock, cannot go backward.
time.monotonic_ns() monotonic_ns() -> int Monotonic clock, cannot go backward, as nanoseconds.
time.perf_counter() perf_counter() -> float Performance counter for benchmarking.
time.perf_counter_ns() perf_counter_ns() -> int Performance counter for benchmarking as nanoseconds.
time.process_time() process_time() -> float Process time for profiling: sum of the kernel and user-space
time.process_time_ns() process_time() -> int Process time for profiling as nanoseconds: sum of the kernel
time.sleep(secs) sleep(seconds) Delay execution for a given number of seconds.
time.strftime(format[, t]) strftime(format[, tuple]) -> string Convert a time tuple to a string according to
time.strptime(string[, format]) strptime(string, format) -> struct_time Parse a string to a time tuple according
time.struct_time(iterable=()) [class] The time value as returned by gmtime(), localtime(), and strptime(), and accepted
time.thread_time() thread_time() -> float Thread time for profiling: sum of the kernel and user-space
time.thread_time_ns() thread_time() -> int Thread time for profiling as nanoseconds: sum of the kernel
time.time() time() -> floating point number Return the current time in seconds since the Epoch.
time.time_ns() time_ns() -> int Return the current time in nanoseconds since the Epoch.
time.timezone
time.tzname
timeit
timeit.Timer(stmt='pass', setup='pass', timer=<??>, globals=None) [class] Class for timing execution speed of small code snippets.
timeit.default_timer() perf_counter() -> float Performance counter for benchmarking.
timeit.repeat(stmt='pass', setup='pass', timer=<??>, repeat=5, number=1000000, globals=None) [function] Convenience function to create Timer object and call repeat method.
timeit.timeit(stmt='pass', setup='pass', timer=<??>, number=1000000, globals=None) [function] Convenience function to create Timer object and call timeit method.
tkinter
tkinter.ACTIVE
tkinter.ALL
tkinter.ANCHOR
tkinter.ARC
tkinter.BASELINE
tkinter.BEVEL
tkinter.BOTH
tkinter.BOTTOM
tkinter.BROWSE
tkinter.BUTT
tkinter.BaseWidget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.BitmapImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in XBM format.
tkinter.BooleanVar(master=None, value=None, name=None) [class] Value holder for boolean variables.
tkinter.Button(master=None, cnf={}, **kw) [class] Button widget.
tkinter.CASCADE
tkinter.CENTER
tkinter.CHAR
tkinter.CHECKBUTTON
tkinter.CHORD
tkinter.COMMAND
tkinter.CURRENT
tkinter.CallWrapper(func, subst, widget) [class] Internal class.
tkinter.Canvas(master=None, cnf={}, **kw) [class] Canvas widget to display graphical elements like lines or text.
tkinter.Checkbutton(master=None, cnf={}, **kw) [class] Checkbutton widget which is either in on- or off-state.
tkinter.DISABLED
tkinter.DOTBOX
tkinter.DoubleVar(master=None, value=None, name=None) [class] Value holder for float variables.
tkinter.E
tkinter.END
tkinter.EW
tkinter.EXCEPTION
tkinter.EXTENDED
tkinter.Entry(master=None, cnf={}, **kw) [class] Entry widget which allows displaying simple text.
tkinter.Event() [class] Container for the properties of an event.
tkinter.EventType(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
tkinter.FALSE
tkinter.FIRST
tkinter.FLAT
tkinter.Frame(master=None, cnf={}, **kw) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.GROOVE
tkinter.Grid() [class] Geometry manager Grid. Base class to use the methods grid_* in every widget.
tkinter.HIDDEN
tkinter.HORIZONTAL
tkinter.INSERT
tkinter.INSIDE
tkinter.Image(imgtype, name=None, cnf={}, master=None, **kw) [class] Base class for images.
tkinter.IntVar(master=None, value=None, name=None) [class] Value holder for integer variables.
tkinter.LAST
tkinter.LEFT
tkinter.Label(master=None, cnf={}, **kw) [class] Label widget which can display text and bitmaps.
tkinter.LabelFrame(master=None, cnf={}, **kw) [class] labelframe widget.
tkinter.Listbox(master=None, cnf={}, **kw) [class] Listbox widget which can display a list of strings.
tkinter.MITER
tkinter.MOVETO
tkinter.MULTIPLE
tkinter.Menu(master=None, cnf={}, **kw) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.Menubutton(master=None, cnf={}, **kw) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.Message(master=None, cnf={}, **kw) [class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.Misc() [class] Internal class. Base class which defines methods common for interior widgets.
tkinter.N
tkinter.NE
tkinter.NO
tkinter.NONE
tkinter.NORMAL
tkinter.NS
tkinter.NSEW
tkinter.NUMERIC
tkinter.NW
tkinter.NoDefaultRoot() [function] Inhibit setting of default root window.
tkinter.OFF
tkinter.ON
tkinter.OUTSIDE
tkinter.OptionMenu(master, variable, value, *values, **kwargs) [class] OptionMenu which allows the user to select a value from a menu.
tkinter.PAGES
tkinter.PIESLICE
tkinter.PROJECTING
tkinter.Pack() [class] Geometry manager Pack. Base class to use the methods pack_* in every widget.
tkinter.PanedWindow(master=None, cnf={}, **kw) [class] panedwindow widget.
tkinter.PhotoImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.Place() [class] Geometry manager Place. Base class to use the methods place_* in every widget.
tkinter.RADIOBUTTON
tkinter.RAISED
tkinter.READABLE
tkinter.RIDGE
tkinter.RIGHT
tkinter.ROUND
tkinter.Radiobutton(master=None, cnf={}, **kw) [class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.S
tkinter.SCROLL
tkinter.SE
tkinter.SEL
tkinter.SEL_FIRST
tkinter.SEL_LAST
tkinter.SEPARATOR
tkinter.SINGLE
tkinter.SOLID
tkinter.SUNKEN
tkinter.SW
tkinter.Scale(master=None, cnf={}, **kw) [class] Scale widget which can display a numerical scale.
tkinter.Scrollbar(master=None, cnf={}, **kw) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.Spinbox(master=None, cnf={}, **kw) [class] spinbox widget.
tkinter.StringVar(master=None, value=None, name=None) [class] Value holder for strings variables.
tkinter.TOP
tkinter.TRUE
tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=0) [function]
tkinter.TclError() [class] Common base class for all non-exit exceptions.
tkinter.TclVersion
tkinter.Text(master=None, cnf={}, **kw) [class] Text widget which can display text in various forms.
tkinter.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None) [class] Toplevel widget of Tk which represents mostly the main window of an application.
tkinter.TkVersion
tkinter.Toplevel(master=None, cnf={}, **kw) [class] Toplevel widget, e.g. for dialogs.
tkinter.UNDERLINE
tkinter.UNITS
tkinter.VERTICAL
tkinter.Variable(master=None, value=None, name=None) [class] Class to define value holders for e.g.
tkinter.W
tkinter.WORD
tkinter.WRITABLE
tkinter.Widget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.Wm() [class] Provides functions for the communication with the window manager.
tkinter.X
tkinter.XView() [class] Mix-in class for querying and changing the horizontal position of a widget's window.
tkinter.Y
tkinter.YES
tkinter.YView() [class] Mix-in class for querying and changing the vertical position of a widget's window.
tkinter.colorchooser
tkinter.colorchooser.Chooser(master=None, **options) [class] Ask for a color
tkinter.colorchooser.Dialog(master=None, **options) [class]
tkinter.colorchooser.askcolor(color=None, **options) [function] Ask for a color
tkinter.commondialog
tkinter.commondialog.ACTIVE
tkinter.commondialog.ALL
tkinter.commondialog.ANCHOR
tkinter.commondialog.ARC
tkinter.commondialog.BASELINE
tkinter.commondialog.BEVEL
tkinter.commondialog.BOTH
tkinter.commondialog.BOTTOM
tkinter.commondialog.BROWSE
tkinter.commondialog.BUTT
tkinter.commondialog.BaseWidget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.commondialog.BitmapImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in XBM format.
tkinter.commondialog.BooleanVar(master=None, value=None, name=None) [class] Value holder for boolean variables.
tkinter.commondialog.Button(master=None, cnf={}, **kw) [class] Button widget.
tkinter.commondialog.CASCADE
tkinter.commondialog.CENTER
tkinter.commondialog.CHAR
tkinter.commondialog.CHECKBUTTON
tkinter.commondialog.CHORD
tkinter.commondialog.COMMAND
tkinter.commondialog.CURRENT
tkinter.commondialog.CallWrapper(func, subst, widget) [class] Internal class.
tkinter.commondialog.Canvas(master=None, cnf={}, **kw) [class] Canvas widget to display graphical elements like lines or text.
tkinter.commondialog.Checkbutton(master=None, cnf={}, **kw) [class] Checkbutton widget which is either in on- or off-state.
tkinter.commondialog.DISABLED
tkinter.commondialog.DOTBOX
tkinter.commondialog.Dialog(master=None, **options) [class]
tkinter.commondialog.DoubleVar(master=None, value=None, name=None) [class] Value holder for float variables.
tkinter.commondialog.E
tkinter.commondialog.END
tkinter.commondialog.EW
tkinter.commondialog.EXCEPTION
tkinter.commondialog.EXTENDED
tkinter.commondialog.Entry(master=None, cnf={}, **kw) [class] Entry widget which allows displaying simple text.
tkinter.commondialog.Event() [class] Container for the properties of an event.
tkinter.commondialog.EventType(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
tkinter.commondialog.FALSE
tkinter.commondialog.FIRST
tkinter.commondialog.FLAT
tkinter.commondialog.Frame(master=None, cnf={}, **kw) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.commondialog.GROOVE
tkinter.commondialog.Grid() [class] Geometry manager Grid. Base class to use the methods grid_* in every widget.
tkinter.commondialog.HIDDEN
tkinter.commondialog.HORIZONTAL
tkinter.commondialog.INSERT
tkinter.commondialog.INSIDE
tkinter.commondialog.Image(imgtype, name=None, cnf={}, master=None, **kw) [class] Base class for images.
tkinter.commondialog.IntVar(master=None, value=None, name=None) [class] Value holder for integer variables.
tkinter.commondialog.LAST
tkinter.commondialog.LEFT
tkinter.commondialog.Label(master=None, cnf={}, **kw) [class] Label widget which can display text and bitmaps.
tkinter.commondialog.LabelFrame(master=None, cnf={}, **kw) [class] labelframe widget.
tkinter.commondialog.Listbox(master=None, cnf={}, **kw) [class] Listbox widget which can display a list of strings.
tkinter.commondialog.MITER
tkinter.commondialog.MOVETO
tkinter.commondialog.MULTIPLE
tkinter.commondialog.Menu(master=None, cnf={}, **kw) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.commondialog.Menubutton(master=None, cnf={}, **kw) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.commondialog.Message(master=None, cnf={}, **kw) [class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.commondialog.Misc() [class] Internal class. Base class which defines methods common for interior widgets.
tkinter.commondialog.N
tkinter.commondialog.NE
tkinter.commondialog.NO
tkinter.commondialog.NONE
tkinter.commondialog.NORMAL
tkinter.commondialog.NS
tkinter.commondialog.NSEW
tkinter.commondialog.NUMERIC
tkinter.commondialog.NW
tkinter.commondialog.NoDefaultRoot() [function] Inhibit setting of default root window.
tkinter.commondialog.OFF
tkinter.commondialog.ON
tkinter.commondialog.OUTSIDE
tkinter.commondialog.OptionMenu(master, variable, value, *values, **kwargs) [class] OptionMenu which allows the user to select a value from a menu.
tkinter.commondialog.PAGES
tkinter.commondialog.PIESLICE
tkinter.commondialog.PROJECTING
tkinter.commondialog.Pack() [class] Geometry manager Pack. Base class to use the methods pack_* in every widget.
tkinter.commondialog.PanedWindow(master=None, cnf={}, **kw) [class] panedwindow widget.
tkinter.commondialog.PhotoImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.commondialog.Place() [class] Geometry manager Place. Base class to use the methods place_* in every widget.
tkinter.commondialog.RADIOBUTTON
tkinter.commondialog.RAISED
tkinter.commondialog.READABLE
tkinter.commondialog.RIDGE
tkinter.commondialog.RIGHT
tkinter.commondialog.ROUND
tkinter.commondialog.Radiobutton(master=None, cnf={}, **kw) [class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.commondialog.S
tkinter.commondialog.SCROLL
tkinter.commondialog.SE
tkinter.commondialog.SEL
tkinter.commondialog.SEL_FIRST
tkinter.commondialog.SEL_LAST
tkinter.commondialog.SEPARATOR
tkinter.commondialog.SINGLE
tkinter.commondialog.SOLID
tkinter.commondialog.SUNKEN
tkinter.commondialog.SW
tkinter.commondialog.Scale(master=None, cnf={}, **kw) [class] Scale widget which can display a numerical scale.
tkinter.commondialog.Scrollbar(master=None, cnf={}, **kw) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.commondialog.Spinbox(master=None, cnf={}, **kw) [class] spinbox widget.
tkinter.commondialog.StringVar(master=None, value=None, name=None) [class] Value holder for strings variables.
tkinter.commondialog.TOP
tkinter.commondialog.TRUE
tkinter.commondialog.Tcl(screenName=None, baseName=None, className='Tk', useTk=0) [function]
tkinter.commondialog.TclError() [class] Common base class for all non-exit exceptions.
tkinter.commondialog.TclVersion
tkinter.commondialog.Text(master=None, cnf={}, **kw) [class] Text widget which can display text in various forms.
tkinter.commondialog.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None) [class] Toplevel widget of Tk which represents mostly the main window of an application.
tkinter.commondialog.TkVersion
tkinter.commondialog.Toplevel(master=None, cnf={}, **kw) [class] Toplevel widget, e.g. for dialogs.
tkinter.commondialog.UNDERLINE
tkinter.commondialog.UNITS
tkinter.commondialog.VERTICAL
tkinter.commondialog.Variable(master=None, value=None, name=None) [class] Class to define value holders for e.g.
tkinter.commondialog.W
tkinter.commondialog.WORD
tkinter.commondialog.WRITABLE
tkinter.commondialog.Widget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.commondialog.Wm() [class] Provides functions for the communication with the window manager.
tkinter.commondialog.X
tkinter.commondialog.XView() [class] Mix-in class for querying and changing the horizontal position of a widget's window.
tkinter.commondialog.Y
tkinter.commondialog.YES
tkinter.commondialog.YView() [class] Mix-in class for querying and changing the vertical position of a widget's window.
tkinter.commondialog.getboolean(s) [function] Convert true and false to integer values 1 and 0.
tkinter.commondialog.getdouble(x=0) [class] Convert a string or number to a floating point number, if possible.
tkinter.commondialog.getint([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.commondialog.getint(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.commondialog.image_names() [function]
tkinter.commondialog.image_types() [function]
tkinter.commondialog.mainloop(n=0) [function] Run the main loop of Tcl.
tkinter.commondialog.wantobjects
tkinter.constants
tkinter.constants.ACTIVE
tkinter.constants.ALL
tkinter.constants.ANCHOR
tkinter.constants.ARC
tkinter.constants.BASELINE
tkinter.constants.BEVEL
tkinter.constants.BOTH
tkinter.constants.BOTTOM
tkinter.constants.BROWSE
tkinter.constants.BUTT
tkinter.constants.CASCADE
tkinter.constants.CENTER
tkinter.constants.CHAR
tkinter.constants.CHECKBUTTON
tkinter.constants.CHORD
tkinter.constants.COMMAND
tkinter.constants.CURRENT
tkinter.constants.DISABLED
tkinter.constants.DOTBOX
tkinter.constants.E
tkinter.constants.END
tkinter.constants.EW
tkinter.constants.EXTENDED
tkinter.constants.FALSE
tkinter.constants.FIRST
tkinter.constants.FLAT
tkinter.constants.GROOVE
tkinter.constants.HIDDEN
tkinter.constants.HORIZONTAL
tkinter.constants.INSERT
tkinter.constants.INSIDE
tkinter.constants.LAST
tkinter.constants.LEFT
tkinter.constants.MITER
tkinter.constants.MOVETO
tkinter.constants.MULTIPLE
tkinter.constants.N
tkinter.constants.NE
tkinter.constants.NO
tkinter.constants.NONE
tkinter.constants.NORMAL
tkinter.constants.NS
tkinter.constants.NSEW
tkinter.constants.NUMERIC
tkinter.constants.NW
tkinter.constants.OFF
tkinter.constants.ON
tkinter.constants.OUTSIDE
tkinter.constants.PAGES
tkinter.constants.PIESLICE
tkinter.constants.PROJECTING
tkinter.constants.RADIOBUTTON
tkinter.constants.RAISED
tkinter.constants.RIDGE
tkinter.constants.RIGHT
tkinter.constants.ROUND
tkinter.constants.S
tkinter.constants.SCROLL
tkinter.constants.SE
tkinter.constants.SEL
tkinter.constants.SEL_FIRST
tkinter.constants.SEL_LAST
tkinter.constants.SEPARATOR
tkinter.constants.SINGLE
tkinter.constants.SOLID
tkinter.constants.SUNKEN
tkinter.constants.SW
tkinter.constants.TOP
tkinter.constants.TRUE
tkinter.constants.UNDERLINE
tkinter.constants.UNITS
tkinter.constants.VERTICAL
tkinter.constants.W
tkinter.constants.WORD
tkinter.constants.X
tkinter.constants.Y
tkinter.constants.YES
tkinter.dialog
tkinter.dialog.ACTIVE
tkinter.dialog.ALL
tkinter.dialog.ANCHOR
tkinter.dialog.ARC
tkinter.dialog.BASELINE
tkinter.dialog.BEVEL
tkinter.dialog.BOTH
tkinter.dialog.BOTTOM
tkinter.dialog.BROWSE
tkinter.dialog.BUTT
tkinter.dialog.BaseWidget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.dialog.BitmapImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in XBM format.
tkinter.dialog.BooleanVar(master=None, value=None, name=None) [class] Value holder for boolean variables.
tkinter.dialog.Button(master=None, cnf={}, **kw) [class] Button widget.
tkinter.dialog.CASCADE
tkinter.dialog.CENTER
tkinter.dialog.CHAR
tkinter.dialog.CHECKBUTTON
tkinter.dialog.CHORD
tkinter.dialog.COMMAND
tkinter.dialog.CURRENT
tkinter.dialog.CallWrapper(func, subst, widget) [class] Internal class.
tkinter.dialog.Canvas(master=None, cnf={}, **kw) [class] Canvas widget to display graphical elements like lines or text.
tkinter.dialog.Checkbutton(master=None, cnf={}, **kw) [class] Checkbutton widget which is either in on- or off-state.
tkinter.dialog.DIALOG_ICON
tkinter.dialog.DISABLED
tkinter.dialog.DOTBOX
tkinter.dialog.Dialog(master=None, cnf={}, **kw) [class] Internal class.
tkinter.dialog.DoubleVar(master=None, value=None, name=None) [class] Value holder for float variables.
tkinter.dialog.E
tkinter.dialog.END
tkinter.dialog.EW
tkinter.dialog.EXCEPTION
tkinter.dialog.EXTENDED
tkinter.dialog.Entry(master=None, cnf={}, **kw) [class] Entry widget which allows displaying simple text.
tkinter.dialog.Event() [class] Container for the properties of an event.
tkinter.dialog.EventType(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
tkinter.dialog.FALSE
tkinter.dialog.FIRST
tkinter.dialog.FLAT
tkinter.dialog.Frame(master=None, cnf={}, **kw) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.dialog.GROOVE
tkinter.dialog.Grid() [class] Geometry manager Grid. Base class to use the methods grid_* in every widget.
tkinter.dialog.HIDDEN
tkinter.dialog.HORIZONTAL
tkinter.dialog.INSERT
tkinter.dialog.INSIDE
tkinter.dialog.Image(imgtype, name=None, cnf={}, master=None, **kw) [class] Base class for images.
tkinter.dialog.IntVar(master=None, value=None, name=None) [class] Value holder for integer variables.
tkinter.dialog.LAST
tkinter.dialog.LEFT
tkinter.dialog.Label(master=None, cnf={}, **kw) [class] Label widget which can display text and bitmaps.
tkinter.dialog.LabelFrame(master=None, cnf={}, **kw) [class] labelframe widget.
tkinter.dialog.Listbox(master=None, cnf={}, **kw) [class] Listbox widget which can display a list of strings.
tkinter.dialog.MITER
tkinter.dialog.MOVETO
tkinter.dialog.MULTIPLE
tkinter.dialog.Menu(master=None, cnf={}, **kw) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.dialog.Menubutton(master=None, cnf={}, **kw) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.dialog.Message(master=None, cnf={}, **kw) [class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.dialog.Misc() [class] Internal class. Base class which defines methods common for interior widgets.
tkinter.dialog.N
tkinter.dialog.NE
tkinter.dialog.NO
tkinter.dialog.NONE
tkinter.dialog.NORMAL
tkinter.dialog.NS
tkinter.dialog.NSEW
tkinter.dialog.NUMERIC
tkinter.dialog.NW
tkinter.dialog.NoDefaultRoot() [function] Inhibit setting of default root window.
tkinter.dialog.OFF
tkinter.dialog.ON
tkinter.dialog.OUTSIDE
tkinter.dialog.OptionMenu(master, variable, value, *values, **kwargs) [class] OptionMenu which allows the user to select a value from a menu.
tkinter.dialog.PAGES
tkinter.dialog.PIESLICE
tkinter.dialog.PROJECTING
tkinter.dialog.Pack() [class] Geometry manager Pack. Base class to use the methods pack_* in every widget.
tkinter.dialog.PanedWindow(master=None, cnf={}, **kw) [class] panedwindow widget.
tkinter.dialog.PhotoImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.dialog.Place() [class] Geometry manager Place. Base class to use the methods place_* in every widget.
tkinter.dialog.RADIOBUTTON
tkinter.dialog.RAISED
tkinter.dialog.READABLE
tkinter.dialog.RIDGE
tkinter.dialog.RIGHT
tkinter.dialog.ROUND
tkinter.dialog.Radiobutton(master=None, cnf={}, **kw) [class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.dialog.S
tkinter.dialog.SCROLL
tkinter.dialog.SE
tkinter.dialog.SEL
tkinter.dialog.SEL_FIRST
tkinter.dialog.SEL_LAST
tkinter.dialog.SEPARATOR
tkinter.dialog.SINGLE
tkinter.dialog.SOLID
tkinter.dialog.SUNKEN
tkinter.dialog.SW
tkinter.dialog.Scale(master=None, cnf={}, **kw) [class] Scale widget which can display a numerical scale.
tkinter.dialog.Scrollbar(master=None, cnf={}, **kw) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.dialog.Spinbox(master=None, cnf={}, **kw) [class] spinbox widget.
tkinter.dialog.StringVar(master=None, value=None, name=None) [class] Value holder for strings variables.
tkinter.dialog.TOP
tkinter.dialog.TRUE
tkinter.dialog.Tcl(screenName=None, baseName=None, className='Tk', useTk=0) [function]
tkinter.dialog.TclError() [class] Common base class for all non-exit exceptions.
tkinter.dialog.TclVersion
tkinter.dialog.Text(master=None, cnf={}, **kw) [class] Text widget which can display text in various forms.
tkinter.dialog.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None) [class] Toplevel widget of Tk which represents mostly the main window of an application.
tkinter.dialog.TkVersion
tkinter.dialog.Toplevel(master=None, cnf={}, **kw) [class] Toplevel widget, e.g. for dialogs.
tkinter.dialog.UNDERLINE
tkinter.dialog.UNITS
tkinter.dialog.VERTICAL
tkinter.dialog.Variable(master=None, value=None, name=None) [class] Class to define value holders for e.g.
tkinter.dialog.W
tkinter.dialog.WORD
tkinter.dialog.WRITABLE
tkinter.dialog.Widget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.dialog.Wm() [class] Provides functions for the communication with the window manager.
tkinter.dialog.X
tkinter.dialog.XView() [class] Mix-in class for querying and changing the horizontal position of a widget's window.
tkinter.dialog.Y
tkinter.dialog.YES
tkinter.dialog.YView() [class] Mix-in class for querying and changing the vertical position of a widget's window.
tkinter.dialog._cnfmerge(cnfs) [function] Internal function.
tkinter.dialog._test() [function]
tkinter.dialog.getboolean(s) [function] Convert true and false to integer values 1 and 0.
tkinter.dialog.getdouble(x=0) [class] Convert a string or number to a floating point number, if possible.
tkinter.dialog.getint([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.dialog.getint(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.dialog.image_names() [function]
tkinter.dialog.image_types() [function]
tkinter.dialog.mainloop(n=0) [function] Run the main loop of Tcl.
tkinter.dialog.wantobjects
tkinter.dnd
tkinter.dnd.DndHandler(source, event) [class]
tkinter.dnd.Icon(name) [class]
tkinter.dnd.Tester(root) [class]
tkinter.dnd.dnd_start(source, event) [function]
tkinter.dnd.test() [function]
tkinter.filedialog
tkinter.filedialog.ACTIVE
tkinter.filedialog.ALL
tkinter.filedialog.ANCHOR
tkinter.filedialog.ARC
tkinter.filedialog.BASELINE
tkinter.filedialog.BEVEL
tkinter.filedialog.BOTH
tkinter.filedialog.BOTTOM
tkinter.filedialog.BROWSE
tkinter.filedialog.BUTT
tkinter.filedialog.BaseWidget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.filedialog.BitmapImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in XBM format.
tkinter.filedialog.BooleanVar(master=None, value=None, name=None) [class] Value holder for boolean variables.
tkinter.filedialog.Button(master=None, cnf={}, **kw) [class] Button widget.
tkinter.filedialog.CASCADE
tkinter.filedialog.CENTER
tkinter.filedialog.CHAR
tkinter.filedialog.CHECKBUTTON
tkinter.filedialog.CHORD
tkinter.filedialog.COMMAND
tkinter.filedialog.CURRENT
tkinter.filedialog.CallWrapper(func, subst, widget) [class] Internal class.
tkinter.filedialog.Canvas(master=None, cnf={}, **kw) [class] Canvas widget to display graphical elements like lines or text.
tkinter.filedialog.Checkbutton(master=None, cnf={}, **kw) [class] Checkbutton widget which is either in on- or off-state.
tkinter.filedialog.DISABLED
tkinter.filedialog.DOTBOX
tkinter.filedialog.Dialog(master=None, cnf={}, **kw) [class] Internal class.
tkinter.filedialog.Directory(master=None, **options) [class] Ask for a directory
tkinter.filedialog.DoubleVar(master=None, value=None, name=None) [class] Value holder for float variables.
tkinter.filedialog.E
tkinter.filedialog.END
tkinter.filedialog.EW
tkinter.filedialog.EXCEPTION
tkinter.filedialog.EXTENDED
tkinter.filedialog.Entry(master=None, cnf={}, **kw) [class] Entry widget which allows displaying simple text.
tkinter.filedialog.Event() [class] Container for the properties of an event.
tkinter.filedialog.EventType(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
tkinter.filedialog.FALSE
tkinter.filedialog.FIRST
tkinter.filedialog.FLAT
tkinter.filedialog.FileDialog(master, title=None) [class] Standard file selection dialog -- no checks on selected file.
tkinter.filedialog.Frame(master=None, cnf={}, **kw) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.filedialog.GROOVE
tkinter.filedialog.Grid() [class] Geometry manager Grid. Base class to use the methods grid_* in every widget.
tkinter.filedialog.HIDDEN
tkinter.filedialog.HORIZONTAL
tkinter.filedialog.INSERT
tkinter.filedialog.INSIDE
tkinter.filedialog.Image(imgtype, name=None, cnf={}, master=None, **kw) [class] Base class for images.
tkinter.filedialog.IntVar(master=None, value=None, name=None) [class] Value holder for integer variables.
tkinter.filedialog.LAST
tkinter.filedialog.LEFT
tkinter.filedialog.Label(master=None, cnf={}, **kw) [class] Label widget which can display text and bitmaps.
tkinter.filedialog.LabelFrame(master=None, cnf={}, **kw) [class] labelframe widget.
tkinter.filedialog.Listbox(master=None, cnf={}, **kw) [class] Listbox widget which can display a list of strings.
tkinter.filedialog.LoadFileDialog(master, title=None) [class] File selection dialog which checks that the file exists.
tkinter.filedialog.MITER
tkinter.filedialog.MOVETO
tkinter.filedialog.MULTIPLE
tkinter.filedialog.Menu(master=None, cnf={}, **kw) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.filedialog.Menubutton(master=None, cnf={}, **kw) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.filedialog.Message(master=None, cnf={}, **kw) [class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.filedialog.Misc() [class] Internal class. Base class which defines methods common for interior widgets.
tkinter.filedialog.N
tkinter.filedialog.NE
tkinter.filedialog.NO
tkinter.filedialog.NONE
tkinter.filedialog.NORMAL
tkinter.filedialog.NS
tkinter.filedialog.NSEW
tkinter.filedialog.NUMERIC
tkinter.filedialog.NW
tkinter.filedialog.NoDefaultRoot() [function] Inhibit setting of default root window.
tkinter.filedialog.OFF
tkinter.filedialog.ON
tkinter.filedialog.OUTSIDE
tkinter.filedialog.Open(master=None, **options) [class] Ask for a filename to open
tkinter.filedialog.OptionMenu(master, variable, value, *values, **kwargs) [class] OptionMenu which allows the user to select a value from a menu.
tkinter.filedialog.PAGES
tkinter.filedialog.PIESLICE
tkinter.filedialog.PROJECTING
tkinter.filedialog.Pack() [class] Geometry manager Pack. Base class to use the methods pack_* in every widget.
tkinter.filedialog.PanedWindow(master=None, cnf={}, **kw) [class] panedwindow widget.
tkinter.filedialog.PhotoImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.filedialog.Place() [class] Geometry manager Place. Base class to use the methods place_* in every widget.
tkinter.filedialog.RADIOBUTTON
tkinter.filedialog.RAISED
tkinter.filedialog.READABLE
tkinter.filedialog.RIDGE
tkinter.filedialog.RIGHT
tkinter.filedialog.ROUND
tkinter.filedialog.Radiobutton(master=None, cnf={}, **kw) [class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.filedialog.S
tkinter.filedialog.SCROLL
tkinter.filedialog.SE
tkinter.filedialog.SEL
tkinter.filedialog.SEL_FIRST
tkinter.filedialog.SEL_LAST
tkinter.filedialog.SEPARATOR
tkinter.filedialog.SINGLE
tkinter.filedialog.SOLID
tkinter.filedialog.SUNKEN
tkinter.filedialog.SW
tkinter.filedialog.SaveAs(master=None, **options) [class] Ask for a filename to save as
tkinter.filedialog.SaveFileDialog(master, title=None) [class] File selection dialog which checks that the file may be created.
tkinter.filedialog.Scale(master=None, cnf={}, **kw) [class] Scale widget which can display a numerical scale.
tkinter.filedialog.Scrollbar(master=None, cnf={}, **kw) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.filedialog.Spinbox(master=None, cnf={}, **kw) [class] spinbox widget.
tkinter.filedialog.StringVar(master=None, value=None, name=None) [class] Value holder for strings variables.
tkinter.filedialog.TOP
tkinter.filedialog.TRUE
tkinter.filedialog.Tcl(screenName=None, baseName=None, className='Tk', useTk=0) [function]
tkinter.filedialog.TclError() [class] Common base class for all non-exit exceptions.
tkinter.filedialog.TclVersion
tkinter.filedialog.Text(master=None, cnf={}, **kw) [class] Text widget which can display text in various forms.
tkinter.filedialog.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None) [class] Toplevel widget of Tk which represents mostly the main window of an application.
tkinter.filedialog.TkVersion
tkinter.filedialog.Toplevel(master=None, cnf={}, **kw) [class] Toplevel widget, e.g. for dialogs.
tkinter.filedialog.UNDERLINE
tkinter.filedialog.UNITS
tkinter.filedialog.VERTICAL
tkinter.filedialog.Variable(master=None, value=None, name=None) [class] Class to define value holders for e.g.
tkinter.filedialog.W
tkinter.filedialog.WORD
tkinter.filedialog.WRITABLE
tkinter.filedialog.Widget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.filedialog.Wm() [class] Provides functions for the communication with the window manager.
tkinter.filedialog.X
tkinter.filedialog.XView() [class] Mix-in class for querying and changing the horizontal position of a widget's window.
tkinter.filedialog.Y
tkinter.filedialog.YES
tkinter.filedialog.YView() [class] Mix-in class for querying and changing the vertical position of a widget's window.
tkinter.filedialog._Dialog(master=None, **options) [class]
tkinter.filedialog.askdirectory(**options) [function] Ask for a directory, and return the file name
tkinter.filedialog.askopenfile(mode='r', **options) [function] Ask for a filename to open, and returned the opened file
tkinter.filedialog.askopenfilename(**options) [function] Ask for a filename to open
tkinter.filedialog.askopenfilenames(**options) [function] Ask for multiple filenames to open Returns a list of filenames or empty list if cancel
tkinter.filedialog.askopenfiles(mode='r', **options) [function] Ask for multiple filenames and return the open file objects returns a list of open
tkinter.filedialog.asksaveasfile(mode='w', **options) [function] Ask for a filename to save as, and returned the opened file
tkinter.filedialog.asksaveasfilename(**options) [function] Ask for a filename to save as
tkinter.filedialog.dialogstates
tkinter.filedialog.getboolean(s) [function] Convert true and false to integer values 1 and 0.
tkinter.filedialog.getdouble(x=0) [class] Convert a string or number to a floating point number, if possible.
tkinter.filedialog.getint([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.filedialog.getint(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.filedialog.image_names() [function]
tkinter.filedialog.image_types() [function]
tkinter.filedialog.mainloop(n=0) [function] Run the main loop of Tcl.
tkinter.filedialog.test() [function] Simple test program.
tkinter.filedialog.wantobjects
tkinter.font
tkinter.font.BOLD
tkinter.font.Font(root=None, font=None, name=None, exists=False, **options) [class] Represents a named font.
tkinter.font.ITALIC
tkinter.font.NORMAL
tkinter.font.ROMAN
tkinter.font.families(root=None, displayof=None) [function] Get font families (as a tuple)
tkinter.font.names(root=None) [function] Get names of defined fonts (as a tuple)
tkinter.font.nametofont(name) [function] Given the name of a tk named font, returns a Font representation.
tkinter.getboolean(s) [function] Convert true and false to integer values 1 and 0.
tkinter.getdouble(x=0) [class] Convert a string or number to a floating point number, if possible.
tkinter.getint([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.getint(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.image_names() [function]
tkinter.image_types() [function]
tkinter.mainloop(n=0) [function] Run the main loop of Tcl.
tkinter.messagebox
tkinter.messagebox.ABORT
tkinter.messagebox.ABORTRETRYIGNORE
tkinter.messagebox.CANCEL
tkinter.messagebox.Dialog(master=None, **options) [class]
tkinter.messagebox.ERROR
tkinter.messagebox.IGNORE
tkinter.messagebox.INFO
tkinter.messagebox.Message(master=None, **options) [class] A message box
tkinter.messagebox.NO
tkinter.messagebox.OK
tkinter.messagebox.OKCANCEL
tkinter.messagebox.QUESTION
tkinter.messagebox.RETRY
tkinter.messagebox.RETRYCANCEL
tkinter.messagebox.WARNING
tkinter.messagebox.YES
tkinter.messagebox.YESNO
tkinter.messagebox.YESNOCANCEL
tkinter.messagebox._show(title=None, message=None, _icon=None, _type=None, **options) [function]
tkinter.messagebox.askokcancel(title=None, message=None, **options) [function] Ask if operation should proceed; return true if the answer is ok
tkinter.messagebox.askquestion(title=None, message=None, **options) [function] Ask a question
tkinter.messagebox.askretrycancel(title=None, message=None, **options) [function] Ask if operation should be retried; return true if the answer is yes
tkinter.messagebox.askyesno(title=None, message=None, **options) [function] Ask a question; return true if the answer is yes
tkinter.messagebox.askyesnocancel(title=None, message=None, **options) [function] Ask a question; return true if the answer is yes, None if cancelled.
tkinter.messagebox.showerror(title=None, message=None, **options) [function] Show an error message
tkinter.messagebox.showinfo(title=None, message=None, **options) [function] Show an info message
tkinter.messagebox.showwarning(title=None, message=None, **options) [function] Show a warning message
tkinter.scrolledtext
tkinter.scrolledtext.ScrolledText(master=None, **kw) [class] Text widget which can display text in various forms.
tkinter.simpledialog
tkinter.simpledialog.ACTIVE
tkinter.simpledialog.ALL
tkinter.simpledialog.ANCHOR
tkinter.simpledialog.ARC
tkinter.simpledialog.BASELINE
tkinter.simpledialog.BEVEL
tkinter.simpledialog.BOTH
tkinter.simpledialog.BOTTOM
tkinter.simpledialog.BROWSE
tkinter.simpledialog.BUTT
tkinter.simpledialog.BaseWidget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.simpledialog.BitmapImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in XBM format.
tkinter.simpledialog.BooleanVar(master=None, value=None, name=None) [class] Value holder for boolean variables.
tkinter.simpledialog.Button(master=None, cnf={}, **kw) [class] Button widget.
tkinter.simpledialog.CASCADE
tkinter.simpledialog.CENTER
tkinter.simpledialog.CHAR
tkinter.simpledialog.CHECKBUTTON
tkinter.simpledialog.CHORD
tkinter.simpledialog.COMMAND
tkinter.simpledialog.CURRENT
tkinter.simpledialog.CallWrapper(func, subst, widget) [class] Internal class.
tkinter.simpledialog.Canvas(master=None, cnf={}, **kw) [class] Canvas widget to display graphical elements like lines or text.
tkinter.simpledialog.Checkbutton(master=None, cnf={}, **kw) [class] Checkbutton widget which is either in on- or off-state.
tkinter.simpledialog.DISABLED
tkinter.simpledialog.DOTBOX
tkinter.simpledialog.Dialog(parent, title=None) [class] Class to open dialogs.
tkinter.simpledialog.DoubleVar(master=None, value=None, name=None) [class] Value holder for float variables.
tkinter.simpledialog.E
tkinter.simpledialog.END
tkinter.simpledialog.EW
tkinter.simpledialog.EXCEPTION
tkinter.simpledialog.EXTENDED
tkinter.simpledialog.Entry(master=None, cnf={}, **kw) [class] Entry widget which allows displaying simple text.
tkinter.simpledialog.Event() [class] Container for the properties of an event.
tkinter.simpledialog.EventType(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
tkinter.simpledialog.FALSE
tkinter.simpledialog.FIRST
tkinter.simpledialog.FLAT
tkinter.simpledialog.Frame(master=None, cnf={}, **kw) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.simpledialog.GROOVE
tkinter.simpledialog.Grid() [class] Geometry manager Grid. Base class to use the methods grid_* in every widget.
tkinter.simpledialog.HIDDEN
tkinter.simpledialog.HORIZONTAL
tkinter.simpledialog.INSERT
tkinter.simpledialog.INSIDE
tkinter.simpledialog.Image(imgtype, name=None, cnf={}, master=None, **kw) [class] Base class for images.
tkinter.simpledialog.IntVar(master=None, value=None, name=None) [class] Value holder for integer variables.
tkinter.simpledialog.LAST
tkinter.simpledialog.LEFT
tkinter.simpledialog.Label(master=None, cnf={}, **kw) [class] Label widget which can display text and bitmaps.
tkinter.simpledialog.LabelFrame(master=None, cnf={}, **kw) [class] labelframe widget.
tkinter.simpledialog.Listbox(master=None, cnf={}, **kw) [class] Listbox widget which can display a list of strings.
tkinter.simpledialog.MITER
tkinter.simpledialog.MOVETO
tkinter.simpledialog.MULTIPLE
tkinter.simpledialog.Menu(master=None, cnf={}, **kw) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.simpledialog.Menubutton(master=None, cnf={}, **kw) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.simpledialog.Message(master=None, cnf={}, **kw) [class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.simpledialog.Misc() [class] Internal class. Base class which defines methods common for interior widgets.
tkinter.simpledialog.N
tkinter.simpledialog.NE
tkinter.simpledialog.NO
tkinter.simpledialog.NONE
tkinter.simpledialog.NORMAL
tkinter.simpledialog.NS
tkinter.simpledialog.NSEW
tkinter.simpledialog.NUMERIC
tkinter.simpledialog.NW
tkinter.simpledialog.NoDefaultRoot() [function] Inhibit setting of default root window.
tkinter.simpledialog.OFF
tkinter.simpledialog.ON
tkinter.simpledialog.OUTSIDE
tkinter.simpledialog.OptionMenu(master, variable, value, *values, **kwargs) [class] OptionMenu which allows the user to select a value from a menu.
tkinter.simpledialog.PAGES
tkinter.simpledialog.PIESLICE
tkinter.simpledialog.PROJECTING
tkinter.simpledialog.Pack() [class] Geometry manager Pack. Base class to use the methods pack_* in every widget.
tkinter.simpledialog.PanedWindow(master=None, cnf={}, **kw) [class] panedwindow widget.
tkinter.simpledialog.PhotoImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.simpledialog.Place() [class] Geometry manager Place. Base class to use the methods place_* in every widget.
tkinter.simpledialog.RADIOBUTTON
tkinter.simpledialog.RAISED
tkinter.simpledialog.READABLE
tkinter.simpledialog.RIDGE
tkinter.simpledialog.RIGHT
tkinter.simpledialog.ROUND
tkinter.simpledialog.Radiobutton(master=None, cnf={}, **kw) [class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.simpledialog.S
tkinter.simpledialog.SCROLL
tkinter.simpledialog.SE
tkinter.simpledialog.SEL
tkinter.simpledialog.SEL_FIRST
tkinter.simpledialog.SEL_LAST
tkinter.simpledialog.SEPARATOR
tkinter.simpledialog.SINGLE
tkinter.simpledialog.SOLID
tkinter.simpledialog.SUNKEN
tkinter.simpledialog.SW
tkinter.simpledialog.Scale(master=None, cnf={}, **kw) [class] Scale widget which can display a numerical scale.
tkinter.simpledialog.Scrollbar(master=None, cnf={}, **kw) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.simpledialog.SimpleDialog(master, text='', buttons=[], default=None, cancel=None, title=None, class_=None) [class]
tkinter.simpledialog.Spinbox(master=None, cnf={}, **kw) [class] spinbox widget.
tkinter.simpledialog.StringVar(master=None, value=None, name=None) [class] Value holder for strings variables.
tkinter.simpledialog.TOP
tkinter.simpledialog.TRUE
tkinter.simpledialog.Tcl(screenName=None, baseName=None, className='Tk', useTk=0) [function]
tkinter.simpledialog.TclError() [class] Common base class for all non-exit exceptions.
tkinter.simpledialog.TclVersion
tkinter.simpledialog.Text(master=None, cnf={}, **kw) [class] Text widget which can display text in various forms.
tkinter.simpledialog.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None) [class] Toplevel widget of Tk which represents mostly the main window of an application.
tkinter.simpledialog.TkVersion
tkinter.simpledialog.Toplevel(master=None, cnf={}, **kw) [class] Toplevel widget, e.g. for dialogs.
tkinter.simpledialog.UNDERLINE
tkinter.simpledialog.UNITS
tkinter.simpledialog.VERTICAL
tkinter.simpledialog.Variable(master=None, value=None, name=None) [class] Class to define value holders for e.g.
tkinter.simpledialog.W
tkinter.simpledialog.WORD
tkinter.simpledialog.WRITABLE
tkinter.simpledialog.Widget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.simpledialog.Wm() [class] Provides functions for the communication with the window manager.
tkinter.simpledialog.X
tkinter.simpledialog.XView() [class] Mix-in class for querying and changing the horizontal position of a widget's window.
tkinter.simpledialog.Y
tkinter.simpledialog.YES
tkinter.simpledialog.YView() [class] Mix-in class for querying and changing the vertical position of a widget's window.
tkinter.simpledialog._QueryDialog(title, prompt, initialvalue=None, minvalue=None, maxvalue=None, parent=None) [class] Class to open dialogs.
tkinter.simpledialog._QueryFloat(title, prompt, initialvalue=None, minvalue=None, maxvalue=None, parent=None) [class] Class to open dialogs.
tkinter.simpledialog._QueryInteger(title, prompt, initialvalue=None, minvalue=None, maxvalue=None, parent=None) [class] Class to open dialogs.
tkinter.simpledialog._QueryString(*args, **kw) [class] Class to open dialogs.
tkinter.simpledialog.askfloat(title, prompt, **kw) [function] get a float from the user Arguments: title -- the dialog title prompt -- the label
tkinter.simpledialog.askinteger(title, prompt, **kw) [function] get an integer from the user Arguments: title -- the dialog title prompt -- the label
tkinter.simpledialog.askstring(title, prompt, **kw) [function] get a string from the user Arguments: title -- the dialog title prompt -- the label
tkinter.simpledialog.getboolean(s) [function] Convert true and false to integer values 1 and 0.
tkinter.simpledialog.getdouble(x=0) [class] Convert a string or number to a floating point number, if possible.
tkinter.simpledialog.getint([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.simpledialog.getint(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.simpledialog.image_names() [function]
tkinter.simpledialog.image_types() [function]
tkinter.simpledialog.mainloop(n=0) [function] Run the main loop of Tcl.
tkinter.simpledialog.wantobjects
tkinter.tix
tkinter.tix.ACROSSTOP
tkinter.tix.ACTIVE
tkinter.tix.ALL
tkinter.tix.ANCHOR
tkinter.tix.ARC
tkinter.tix.ASCII
tkinter.tix.AUTO
tkinter.tix.BALLOON
tkinter.tix.BASELINE
tkinter.tix.BEVEL
tkinter.tix.BOTH
tkinter.tix.BOTTOM
tkinter.tix.BROWSE
tkinter.tix.BUTT
tkinter.tix.Balloon(master=None, cnf={}, **kw) [class] Balloon help widget.
tkinter.tix.BaseWidget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.tix.BitmapImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in XBM format.
tkinter.tix.BooleanVar(master=None, value=None, name=None) [class] Value holder for boolean variables.
tkinter.tix.Button(master=None, cnf={}, **kw) [class] Button widget.
tkinter.tix.ButtonBox(master=None, cnf={}, **kw) [class] ButtonBox - A container for pushbuttons.
tkinter.tix.CASCADE
tkinter.tix.CELL
tkinter.tix.CENTER
tkinter.tix.CHAR
tkinter.tix.CHECKBUTTON
tkinter.tix.CHORD
tkinter.tix.COLUMN
tkinter.tix.COMMAND
tkinter.tix.CObjView(master=None, widgetName=None, static_options=None, cnf={}, kw={}) [class] This file implements the Canvas Object View widget. This is a base class of IconView.
tkinter.tix.CURRENT
tkinter.tix.CallWrapper(func, subst, widget) [class] Internal class.
tkinter.tix.Canvas(master=None, cnf={}, **kw) [class] Canvas widget to display graphical elements like lines or text.
tkinter.tix.CheckList(master=None, cnf={}, **kw) [class] The CheckList widget displays a list of items to be selected by the user.
tkinter.tix.Checkbutton(master=None, cnf={}, **kw) [class] Checkbutton widget which is either in on- or off-state.
tkinter.tix.ComboBox(master=None, cnf={}, **kw) [class] ComboBox - an Entry field with a dropdown menu.
tkinter.tix.Control(master=None, cnf={}, **kw) [class] Control - An entry field with value change arrows.
tkinter.tix.DECREASING
tkinter.tix.DISABLED
tkinter.tix.DOTBOX
tkinter.tix.DialogShell(master=None, cnf={}, **kw) [class] Toplevel window, with popup popdown and center methods.
tkinter.tix.DirList(master, cnf={}, **kw) [class] DirList - displays a list view of a directory, its previous directories and its sub-directories.
tkinter.tix.DirSelectBox(master, cnf={}, **kw) [class] DirSelectBox - Motif style file select box.
tkinter.tix.DirSelectDialog(master, cnf={}, **kw) [class] The DirSelectDialog widget presents the directories in the file system in a dialog
tkinter.tix.DirTree(master, cnf={}, **kw) [class] DirTree - Directory Listing in a hierarchical view.
tkinter.tix.DisplayStyle(itemtype, cnf={}, *, master=None, **kw) [class] DisplayStyle - handle configuration options shared by (multiple) Display Items
tkinter.tix.DoubleVar(master=None, value=None, name=None) [class] Value holder for float variables.
tkinter.tix.E
tkinter.tix.END
tkinter.tix.EW
tkinter.tix.EXCEPTION
tkinter.tix.EXTENDED
tkinter.tix.Entry(master=None, cnf={}, **kw) [class] Entry widget which allows displaying simple text.
tkinter.tix.Event() [class] Container for the properties of an event.
tkinter.tix.EventType(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
tkinter.tix.ExFileSelectBox(master, cnf={}, **kw) [class] ExFileSelectBox - MS Windows style file select box.
tkinter.tix.ExFileSelectDialog(master, cnf={}, **kw) [class] ExFileSelectDialog - MS Windows style file select dialog.
tkinter.tix.FALSE
tkinter.tix.FIRST
tkinter.tix.FLAT
tkinter.tix.FileEntry(master, cnf={}, **kw) [class] FileEntry - Entry field with button that invokes a FileSelectDialog.
tkinter.tix.FileSelectBox(master, cnf={}, **kw) [class] ExFileSelectBox - Motif style file select box.
tkinter.tix.FileSelectDialog(master, cnf={}, **kw) [class] FileSelectDialog - Motif style file select dialog.
tkinter.tix.FileTypeList(dict) [function]
tkinter.tix.Form() [class] The Tix Form geometry manager Widgets can be arranged by specifying attachments to
tkinter.tix.Frame(master=None, cnf={}, **kw) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.tix.GROOVE
tkinter.tix.Grid(master=None, cnf={}, **kw) [class] The Tix Grid command creates a new window and makes it into a tixGrid widget.
tkinter.tix.HIDDEN
tkinter.tix.HList(master=None, cnf={}, **kw) [class] HList - Hierarchy display widget can be used to display any data that have a hierarchical
tkinter.tix.HORIZONTAL
tkinter.tix.IMAGE
tkinter.tix.IMAGETEXT
tkinter.tix.IMMEDIATE
tkinter.tix.INCREASING
tkinter.tix.INSERT
tkinter.tix.INSIDE
tkinter.tix.INTEGER
tkinter.tix.Image(imgtype, name=None, cnf={}, master=None, **kw) [class] Base class for images.
tkinter.tix.InputOnly(master=None, cnf={}, **kw) [class] InputOnly - Invisible widget.
tkinter.tix.IntVar(master=None, value=None, name=None) [class] Value holder for integer variables.
tkinter.tix.LAST
tkinter.tix.LEFT
tkinter.tix.Label(master=None, cnf={}, **kw) [class] Label widget which can display text and bitmaps.
tkinter.tix.LabelEntry(master=None, cnf={}, **kw) [class] LabelEntry - Entry field with label.
tkinter.tix.LabelFrame(master=None, cnf={}, **kw) [class] LabelFrame - Labelled Frame container.
tkinter.tix.ListNoteBook(master, cnf={}, **kw) [class] A ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to
tkinter.tix.Listbox(master=None, cnf={}, **kw) [class] Listbox widget which can display a list of strings.
tkinter.tix.MAIN
tkinter.tix.MAX
tkinter.tix.MITER
tkinter.tix.MOVETO
tkinter.tix.MULTIPLE
tkinter.tix.Menu(master=None, cnf={}, **kw) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.tix.Menubutton(master=None, cnf={}, **kw) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.tix.Message(master=None, cnf={}, **kw) [class] Message widget to display multiline text. Obsolete since Label does it too.
tkinter.tix.Meter(master=None, cnf={}, **kw) [class] The Meter widget can be used to show the progress of a background job which may take
tkinter.tix.Misc() [class] Internal class. Base class which defines methods common for interior widgets.
tkinter.tix.N
tkinter.tix.NE
tkinter.tix.NO
tkinter.tix.NONE
tkinter.tix.NORMAL
tkinter.tix.NS
tkinter.tix.NSEW
tkinter.tix.NUMERIC
tkinter.tix.NW
tkinter.tix.NoDefaultRoot() [function] Inhibit setting of default root window.
tkinter.tix.NoteBook(master=None, cnf={}, **kw) [class] NoteBook - Multi-page container widget (tabbed notebook metaphor).
tkinter.tix.NoteBookFrame(master=None, widgetName=None, static_options=None, cnf={}, kw={}) [class] A TixWidget class is used to package all (or most) Tix widgets.
tkinter.tix.OFF
tkinter.tix.ON
tkinter.tix.OUTSIDE
tkinter.tix.OptionMenu(master, cnf={}, **kw) [class] OptionMenu - creates a menu button of options.
tkinter.tix.OptionName(widget) [function] Returns the qualified path name for the widget.
tkinter.tix.PAGES
tkinter.tix.PIESLICE
tkinter.tix.PROJECTING
tkinter.tix.Pack() [class] Geometry manager Pack. Base class to use the methods pack_* in every widget.
tkinter.tix.PanedWindow(master, cnf={}, **kw) [class] PanedWindow - Multi-pane container widget allows the user to interactively manipulate
tkinter.tix.PhotoImage(name=None, cnf={}, master=None, **kw) [class] Widget which can display images in PGM, PPM, GIF, PNG format.
tkinter.tix.Place() [class] Geometry manager Place. Base class to use the methods place_* in every widget.
tkinter.tix.PopupMenu(master, cnf={}, **kw) [class] PopupMenu widget can be used as a replacement of the tk_popup command.
tkinter.tix.RADIOBUTTON
tkinter.tix.RAISED
tkinter.tix.READABLE
tkinter.tix.REAL
tkinter.tix.RIDGE
tkinter.tix.RIGHT
tkinter.tix.ROUND
tkinter.tix.ROW
tkinter.tix.Radiobutton(master=None, cnf={}, **kw) [class] Radiobutton widget which shows only one of several buttons in on-state.
tkinter.tix.ResizeHandle(master, cnf={}, **kw) [class] Internal widget to draw resize handles on Scrolled widgets.
tkinter.tix.S
tkinter.tix.SCROLL
tkinter.tix.SE
tkinter.tix.SEL
tkinter.tix.SEL_FIRST
tkinter.tix.SEL_LAST
tkinter.tix.SEPARATOR
tkinter.tix.SINGLE
tkinter.tix.SOLID
tkinter.tix.STATUS
tkinter.tix.SUNKEN
tkinter.tix.SW
tkinter.tix.S_REGION
tkinter.tix.Scale(master=None, cnf={}, **kw) [class] Scale widget which can display a numerical scale.
tkinter.tix.Scrollbar(master=None, cnf={}, **kw) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.tix.ScrolledGrid(master=None, cnf={}, **kw) [class] Scrolled Grid widgets
tkinter.tix.ScrolledHList(master, cnf={}, **kw) [class] ScrolledHList - HList with automatic scrollbars.
tkinter.tix.ScrolledListBox(master, cnf={}, **kw) [class] ScrolledListBox - Listbox with automatic scrollbars.
tkinter.tix.ScrolledTList(master, cnf={}, **kw) [class] ScrolledTList - TList with automatic scrollbars.
tkinter.tix.ScrolledText(master, cnf={}, **kw) [class] ScrolledText - Text with automatic scrollbars.
tkinter.tix.ScrolledWindow(master, cnf={}, **kw) [class] ScrolledWindow - Window with automatic scrollbars.
tkinter.tix.Select(master, cnf={}, **kw) [class] Select - Container of button subwidgets.
tkinter.tix.Shell(master=None, cnf={}, **kw) [class] Toplevel window.
tkinter.tix.Spinbox(master=None, cnf={}, **kw) [class] spinbox widget.
tkinter.tix.StdButtonBox(master=None, cnf={}, **kw) [class] StdButtonBox - Standard Button Box (OK, Apply, Cancel and Help)
tkinter.tix.StringVar(master=None, value=None, name=None) [class] Value holder for strings variables.
tkinter.tix.TCL_ALL_EVENTS
tkinter.tix.TCL_DONT_WAIT
tkinter.tix.TCL_FILE_EVENTS
tkinter.tix.TCL_IDLE_EVENTS
tkinter.tix.TCL_TIMER_EVENTS
tkinter.tix.TCL_WINDOW_EVENTS
tkinter.tix.TEXT
tkinter.tix.TList(master=None, cnf={}, **kw) [class] TList - Hierarchy display widget which can be used to display data in a tabular format.
tkinter.tix.TOP
tkinter.tix.TRUE
tkinter.tix.Tcl(screenName=None, baseName=None, className='Tk', useTk=0) [function]
tkinter.tix.TclError() [class] Common base class for all non-exit exceptions.
tkinter.tix.TclVersion
tkinter.tix.Text(master=None, cnf={}, **kw) [class] Text widget which can display text in various forms.
tkinter.tix.TixSubWidget(master, name, destroy_physically=1, check_intermediate=1) [class] Subwidget class.
tkinter.tix.TixWidget(master=None, widgetName=None, static_options=None, cnf={}, kw={}) [class] A TixWidget class is used to package all (or most) Tix widgets.
tkinter.tix.Tk(screenName=None, baseName=None, className='Tix') [class] Toplevel widget of Tix which represents mostly the main window of an application.
tkinter.tix.TkVersion
tkinter.tix.Toplevel(master=None, cnf={}, **kw) [class] Toplevel widget, e.g. for dialogs.
tkinter.tix.Tree(master=None, cnf={}, **kw) [class] Tree - The tixTree widget can be used to display hierarchical data in a tree form.
tkinter.tix.UNDERLINE
tkinter.tix.UNITS
tkinter.tix.VERTICAL
tkinter.tix.Variable(master=None, value=None, name=None) [class] Class to define value holders for e.g.
tkinter.tix.W
tkinter.tix.WINDOW
tkinter.tix.WORD
tkinter.tix.WRITABLE
tkinter.tix.Widget(master, widgetName, cnf={}, kw={}, extra=()) [class] Internal class.
tkinter.tix.Wm() [class] Provides functions for the communication with the window manager.
tkinter.tix.X
tkinter.tix.XView() [class] Mix-in class for querying and changing the horizontal position of a widget's window.
tkinter.tix.X_REGION
tkinter.tix.Y
tkinter.tix.YES
tkinter.tix.YView() [class] Mix-in class for querying and changing the vertical position of a widget's window.
tkinter.tix.Y_REGION
tkinter.tix._cnfmerge(cnfs) [function] Internal function.
tkinter.tix._dummyButton(master, name, destroy_physically=1) [class] Button widget.
tkinter.tix._dummyCheckbutton(master, name, destroy_physically=1) [class] Checkbutton widget which is either in on- or off-state.
tkinter.tix._dummyComboBox(master, name, destroy_physically=1) [class] ComboBox - an Entry field with a dropdown menu.
tkinter.tix._dummyDirList(master, name, destroy_physically=1) [class] DirList - displays a list view of a directory, its previous directories and its sub-directories.
tkinter.tix._dummyDirSelectBox(master, name, destroy_physically=1) [class] DirSelectBox - Motif style file select box.
tkinter.tix._dummyEntry(master, name, destroy_physically=1) [class] Entry widget which allows displaying simple text.
tkinter.tix._dummyExFileSelectBox(master, name, destroy_physically=1) [class] ExFileSelectBox - MS Windows style file select box.
tkinter.tix._dummyFileComboBox(master, name, destroy_physically=1) [class] ComboBox - an Entry field with a dropdown menu.
tkinter.tix._dummyFileSelectBox(master, name, destroy_physically=1) [class] ExFileSelectBox - Motif style file select box.
tkinter.tix._dummyFrame(master, name, destroy_physically=1) [class] Frame widget which may contain other widgets and can have a 3D border.
tkinter.tix._dummyHList(master, name, destroy_physically=1) [class] HList - Hierarchy display widget can be used to display any data that have a hierarchical
tkinter.tix._dummyLabel(master, name, destroy_physically=1) [class] Label widget which can display text and bitmaps.
tkinter.tix._dummyListbox(master, name, destroy_physically=1) [class] Listbox widget which can display a list of strings.
tkinter.tix._dummyMenu(master, name, destroy_physically=1) [class] Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.
tkinter.tix._dummyMenubutton(master, name, destroy_physically=1) [class] Menubutton widget, obsolete since Tk8.0.
tkinter.tix._dummyNoteBookFrame(master, name, destroy_physically=0) [class] Subwidget class.
tkinter.tix._dummyPanedWindow(master, name, destroy_physically=1) [class] PanedWindow - Multi-pane container widget allows the user to interactively manipulate
tkinter.tix._dummyScrollbar(master, name, destroy_physically=1) [class] Scrollbar widget which displays a slider at a certain position.
tkinter.tix._dummyScrolledHList(master, name, destroy_physically=1) [class] ScrolledHList - HList with automatic scrollbars.
tkinter.tix._dummyScrolledListBox(master, name, destroy_physically=1) [class] ScrolledListBox - Listbox with automatic scrollbars.
tkinter.tix._dummyStdButtonBox(master, name, destroy_physically=1) [class] StdButtonBox - Standard Button Box (OK, Apply, Cancel and Help)
tkinter.tix._dummyTList(master, name, destroy_physically=1) [class] TList - Hierarchy display widget which can be used to display data in a tabular format.
tkinter.tix._dummyText(master, name, destroy_physically=1) [class] Text widget which can display text in various forms.
tkinter.tix.getboolean(s) [function] Convert true and false to integer values 1 and 0.
tkinter.tix.getdouble(x=0) [class] Convert a string or number to a floating point number, if possible.
tkinter.tix.getint([x]) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.tix.getint(x, base=10) [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
tkinter.tix.image_names() [function]
tkinter.tix.image_types() [function]
tkinter.tix.mainloop(n=0) [function] Run the main loop of Tcl.
tkinter.tix.tixCommand() [class] The tix commands provide access to miscellaneous elements of Tix's internal state
tkinter.tix.wantobjects
tkinter.ttk
tkinter.ttk.Button(master=None, **kw) [class] Ttk Button widget, displays a textual label and/or image, and evaluates a command
tkinter.ttk.Checkbutton(master=None, **kw) [class] Ttk Checkbutton widget which is either in on- or off-state.
tkinter.ttk.Combobox(master=None, **kw) [class] Ttk Combobox widget combines a text field with a pop-down list of values.
tkinter.ttk.Entry(master=None, widget=None, **kw) [class] Ttk Entry widget displays a one-line text string and allows that string to be edited
tkinter.ttk.Frame(master=None, **kw) [class] Ttk Frame widget is a container, used to group other widgets together.
tkinter.ttk.Label(master=None, **kw) [class] Ttk Label widget displays a textual label and/or image.
tkinter.ttk.LabelFrame(master=None, **kw) [class] Ttk Labelframe widget is a container used to group other widgets together.
tkinter.ttk.LabeledScale(master=None, variable=None, from_=0, to=10, **kw) [class] A Ttk Scale widget with a Ttk Label widget indicating its current value.
tkinter.ttk.Labelframe(master=None, **kw) [class] Ttk Labelframe widget is a container used to group other widgets together.
tkinter.ttk.Menubutton(master=None, **kw) [class] Ttk Menubutton widget displays a textual label and/or image, and displays a menu
tkinter.ttk.Notebook(master=None, **kw) [class] Ttk Notebook widget manages a collection of windows and displays a single one at
tkinter.ttk.OptionMenu(master, variable, default=None, *values, **kwargs) [class] Themed OptionMenu, based after tkinter's OptionMenu, which allows the user to select
tkinter.ttk.PanedWindow(master=None, **kw) [class] Ttk Panedwindow widget displays a number of subwindows, stacked either vertically
tkinter.ttk.Panedwindow(master=None, **kw) [class] Ttk Panedwindow widget displays a number of subwindows, stacked either vertically
tkinter.ttk.Progressbar(master=None, **kw) [class] Ttk Progressbar widget shows the status of a long-running operation.
tkinter.ttk.Radiobutton(master=None, **kw) [class] Ttk Radiobutton widgets are used in groups to show or change a set of mutually-exclusive
tkinter.ttk.Scale(master=None, **kw) [class] Ttk Scale widget is typically used to control the numeric value of a linked variable
tkinter.ttk.Scrollbar(master=None, **kw) [class] Ttk Scrollbar controls the viewport of a scrollable widget.
tkinter.ttk.Separator(master=None, **kw) [class] Ttk Separator widget displays a horizontal or vertical separator bar.
tkinter.ttk.Sizegrip(master=None, **kw) [class] Ttk Sizegrip allows the user to resize the containing toplevel window by pressing
tkinter.ttk.Spinbox(master=None, **kw) [class] Ttk Spinbox is an Entry with increment and decrement arrows It is commonly used for
tkinter.ttk.Style(master=None) [class] Manipulate style database.
tkinter.ttk.Treeview(master=None, **kw) [class] Ttk Treeview widget displays a hierarchical collection of items.
tkinter.ttk.setup_master(master=None) [function] If master is not None, itself is returned.
tkinter.ttk.tclobjs_to_py(adict) [function] Returns adict with its values converted from Tcl objects to Python objects.
tkinter.wantobjects
token
token.AMPER
token.AMPEREQUAL
token.AT
token.ATEQUAL
token.CIRCUMFLEX
token.CIRCUMFLEXEQUAL
token.COLON
token.COMMA
token.COMMENT
token.DEDENT
token.DOT
token.DOUBLESLASH
token.DOUBLESLASHEQUAL
token.DOUBLESTAR
token.DOUBLESTAREQUAL
token.ELLIPSIS
token.ENCODING
token.ENDMARKER
token.EQEQUAL
token.EQUAL
token.ERRORTOKEN
token.GREATER
token.GREATEREQUAL
token.INDENT
token.ISEOF(x) [function]
token.ISNONTERMINAL(x) [function]
token.ISTERMINAL(x) [function]
token.LBRACE
token.LEFTSHIFT
token.LEFTSHIFTEQUAL
token.LESS
token.LESSEQUAL
token.LPAR
token.LSQB
token.MINEQUAL
token.MINUS
token.NAME
token.NEWLINE
token.NL
token.NOTEQUAL
token.NT_OFFSET
token.NUMBER
token.N_TOKENS
token.OP
token.PERCENT
token.PERCENTEQUAL
token.PLUS
token.PLUSEQUAL
token.RARROW
token.RBRACE
token.RIGHTSHIFT
token.RIGHTSHIFTEQUAL
token.RPAR
token.RSQB
token.SEMI
token.SLASH
token.SLASHEQUAL
token.STAR
token.STAREQUAL
token.STRING
token.TILDE
token.VBAR
token.VBAREQUAL
token.tok_name
tokenize
tokenize.AMPER
tokenize.AMPEREQUAL
tokenize.AT
tokenize.ATEQUAL
tokenize.CIRCUMFLEX
tokenize.CIRCUMFLEXEQUAL
tokenize.COLON
tokenize.COMMA
tokenize.COMMENT
tokenize.DEDENT
tokenize.DOT
tokenize.DOUBLESLASH
tokenize.DOUBLESLASHEQUAL
tokenize.DOUBLESTAR
tokenize.DOUBLESTAREQUAL
tokenize.ELLIPSIS
tokenize.ENCODING
tokenize.ENDMARKER
tokenize.EQEQUAL
tokenize.EQUAL
tokenize.ERRORTOKEN
tokenize.GREATER
tokenize.GREATEREQUAL
tokenize.INDENT
tokenize.ISEOF(x) [function]
tokenize.ISNONTERMINAL(x) [function]
tokenize.ISTERMINAL(x) [function]
tokenize.LBRACE
tokenize.LEFTSHIFT
tokenize.LEFTSHIFTEQUAL
tokenize.LESS
tokenize.LESSEQUAL
tokenize.LPAR
tokenize.LSQB
tokenize.MINEQUAL
tokenize.MINUS
tokenize.NAME
tokenize.NEWLINE
tokenize.NL
tokenize.NOTEQUAL
tokenize.NT_OFFSET
tokenize.NUMBER
tokenize.N_TOKENS
tokenize.OP
tokenize.PERCENT
tokenize.PERCENTEQUAL
tokenize.PLUS
tokenize.PLUSEQUAL
tokenize.RARROW
tokenize.RBRACE
tokenize.RIGHTSHIFT
tokenize.RIGHTSHIFTEQUAL
tokenize.RPAR
tokenize.RSQB
tokenize.SEMI
tokenize.SLASH
tokenize.SLASHEQUAL
tokenize.STAR
tokenize.STAREQUAL
tokenize.STRING
tokenize.TILDE
tokenize.TokenInfo(type, string, start, end, line) [class] TokenInfo(type, string, start, end, line)
tokenize.VBAR
tokenize.VBAREQUAL
tokenize.detect_encoding(readline) [function] The detect_encoding() function is used to detect the encoding that should be used
tokenize.tok_name
tokenize.tokenize(readline) [function] The tokenize() generator requires one argument, readline, which must be a callable
tokenize.untokenize(iterable) [function] Transform tokens back into Python source code.
trace
trace.CoverageResults(counts=None, calledfuncs=None, infile=None, callers=None, outfile=None) [class]
trace.Trace(count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False) [class]
traceback
traceback.FrameSummary(filename, lineno, name, *, lookup_line=True, locals=None, line=None) [class] A single frame from a traceback.
traceback.StackSummary(iterable=()) [class] A stack of frames.
traceback.TracebackException(exc_type, exc_value, exc_traceback, *, limit=None, lookup_lines=True, capture_locals=False, _seen=None) [class] An exception ready for rendering.
traceback.clear_frames(tb) [function] Clear all references to local variables in the frames of a traceback.
traceback.extract_stack(f=None, limit=None) [function] Extract the raw traceback from the current stack frame.
traceback.extract_tb(tb, limit=None) [function] Return a StackSummary object representing a list of pre-processed entries from traceback.
traceback.format_exc(limit=None, chain=True) [function] Like print_exc() but return a string.
traceback.format_exception(etype, value, tb, limit=None, chain=True) [function] Format a stack trace and the exception information.
traceback.format_exception_only(etype, value) [function] Format the exception part of a traceback.
traceback.format_list(extracted_list) [function] Format a list of tuples or FrameSummary objects for printing.
traceback.format_stack(f=None, limit=None) [function] Shorthand for 'format_list(extract_stack(f, limit))'.
traceback.format_tb(tb, limit=None) [function] A shorthand for 'format_list(extract_tb(tb, limit))'.
traceback.print_exc(limit=None, file=None, chain=True) [function] Shorthand for 'print_exception(*sys.exc_info(), limit, file)'.
traceback.print_exception(etype, value, tb, limit=None, file=None, chain=True) [function] Print exception up to 'limit' stack trace entries from 'tb' to 'file'.
traceback.print_last(limit=None, file=None, chain=True) [function] This is a shorthand for 'print_exception(sys.last_type, sys.last_value, sys.last_traceback,
traceback.print_stack(f=None, limit=None, file=None) [function] Print a stack trace from its invocation point.
traceback.print_tb(tb, limit=None, file=None) [function] Print up to 'limit' stack trace entries from the traceback 'tb'.
traceback.walk_stack(f) [function] Walk a stack yielding the frame and line number for each frame.
traceback.walk_tb(tb) [function] Walk a traceback yielding the frame and line number for each frame.
tracemalloc
tracemalloc.BaseFilter(inclusive) [class]
tracemalloc.DomainFilter(inclusive, domain) [class]
tracemalloc.Filter(inclusive, filename_pattern, lineno=None, all_frames=False, domain=None) [class]
tracemalloc.Frame(frame) [class] Frame of a traceback.
tracemalloc.Iterable() [class]
tracemalloc.Sequence() [class] All the operations on a read-only sequence.
tracemalloc.Snapshot(traces, traceback_limit) [class] Snapshot of traces of memory blocks allocated by Python.
tracemalloc.Statistic(traceback, size, count) [class] Statistic difference on memory allocations between two Snapshot instance.
tracemalloc.StatisticDiff(traceback, size, size_diff, count, count_diff) [class] Statistic difference on memory allocations between an old and a new Snapshot instance.
tracemalloc.Trace(trace) [class] Trace of a memory block.
tracemalloc.Traceback(frames) [class] Sequence of Frame instances sorted from the oldest frame to the most recent frame.
tracemalloc.clear_traces() Clear traces of memory blocks allocated by Python.
tracemalloc.get_object_traceback(obj) [function] Get the traceback where the Python object *obj* was allocated.
tracemalloc.get_traceback_limit() Get the maximum number of frames stored in the traceback of a trace.
tracemalloc.get_traced_memory() Get the current size and peak size of memory blocks traced by tracemalloc.
tracemalloc.get_tracemalloc_memory() Get the memory usage in bytes of the tracemalloc module.
tracemalloc.is_tracing() Return True if the tracemalloc module is tracing Python memory allocations.
tracemalloc.start(nframe=1) Start tracing Python memory allocations.
tracemalloc.stop() Stop tracing Python memory allocations.
tracemalloc.take_snapshot() [function] Take a snapshot of traces of memory blocks allocated by Python.
tracemalloc.total_ordering(cls) [function] Class decorator that fills in missing ordering methods
try
tuple(iterable=()) [class] Built-in immutable sequence.
turtle
turtle.Pen(shape='classic', undobuffersize=1000, visible=True) [class] RawTurtle auto-creating (scrolled) canvas.
turtle.RawPen(canvas=None, shape='classic', undobuffersize=1000, visible=True) [class] Animation part of the RawTurtle.
turtle.RawTurtle(canvas=None, shape='classic', undobuffersize=1000, visible=True) [class] Animation part of the RawTurtle.
turtle.Screen() [function] Return the singleton screen object.
turtle.ScrolledCanvas(master, width=500, height=350, canvwidth=600, canvheight=500) [class] Modeled after the scrolled canvas class from Grayons's Tkinter book.
turtle.Shape(type_, data=None) [class] Data structure modeling shapes.
turtle.Terminator() [class] Will be raised in TurtleScreen.update, if _RUNNING becomes False.
turtle.Turtle(shape='classic', undobuffersize=1000, visible=True) [class] RawTurtle auto-creating (scrolled) canvas.
turtle.TurtleScreen(cv, mode='standard', colormode=1.0, delay=10) [class] Provides screen oriented methods like setbg etc.
turtle.Vec2D(x, y) [class] A 2 dimensional vector class, used as a helper class for implementing turtle graphics.
turtle.addshape(name, shape=None) [function] Adds a turtle shape to TurtleScreen's shapelist.
turtle.back(distance) [function] Move the turtle backward by distance.
turtle.backward(distance) [function] Move the turtle backward by distance.
turtle.begin_fill() [function] Called just before drawing a shape to be filled.
turtle.begin_poly() [function] Start recording the vertices of a polygon.
turtle.bgcolor(*args) [function] Set or return backgroundcolor of the TurtleScreen.
turtle.bgpic(picname=None) [function] Set background image or return name of current backgroundimage.
turtle.bk(distance) [function] Move the turtle backward by distance.
turtle.bye() [function] Shut the turtlegraphics window.
turtle.circle(radius, extent=None, steps=None) [function] Draw a circle with given radius.
turtle.clear() [function] Delete the turtle's drawings from the screen.
turtle.clearscreen() [function] Delete all drawings and all turtles from the TurtleScreen.
turtle.clearstamp(stampid) [function] Delete stamp with given stampid Argument: stampid - an integer, must be return value
turtle.clearstamps(n=None) [function] Delete all or first/last n of turtle's stamps.
turtle.clone() [function] Create and return a clone of the No argument.
turtle.color(*args) [function] Return or set the pencolor and fillcolor. Arguments: Several input formats are allowed.
turtle.colormode(cmode=None) [function] Return the colormode or set it to 1.0 or 255.
turtle.degrees(fullcircle=360.0) [function] Set angle measurement units to degrees.
turtle.delay(delay=None) [function] Return or set the drawing delay in milliseconds.
turtle.distance(x, y=None) [function] Return the distance from the turtle to (x,y) in turtle step units.
turtle.done() [function] Starts event loop - calling Tkinter's mainloop function.
turtle.dot(size=None, *color) [function] Draw a dot with diameter size, using color.
turtle.down() [function] Pull the pen down -- drawing when moving. Aliases: pendown | pd | down No argument.
turtle.end_fill() [function] Fill the shape drawn after the call begin_fill().
turtle.end_poly() [function] Stop recording the vertices of a polygon.
turtle.exitonclick() [function] Go into mainloop until the mouse is clicked.
turtle.fd(distance) [function] Move the turtle forward by the specified distance.
turtle.fillcolor(*args) [function] Return or set the fillcolor.
turtle.filling() [function] Return fillstate (True if filling, False else).
turtle.forward(distance) [function] Move the turtle forward by the specified distance.
turtle.get_poly() [function] Return the lastly recorded polygon.
turtle.get_shapepoly() [function] Return the current shape polygon as tuple of coordinate pairs.
turtle.getcanvas() [function] Return the Canvas of this TurtleScreen.
turtle.getpen() [function] Return the Turtleobject itself.
turtle.getscreen() [function] Return the TurtleScreen object, the turtle is drawing on.
turtle.getshapes() [function] Return a list of names of all currently available turtle shapes.
turtle.getturtle() [function] Return the Turtleobject itself.
turtle.goto(x, y=None) [function] Move turtle to an absolute position.
turtle.heading() [function] Return the turtle's current heading.
turtle.hideturtle() [function] Makes the turtle invisible.
turtle.home() [function] Move turtle to the origin - coordinates (0,0).
turtle.ht() [function] Makes the turtle invisible.
turtle.isdown() [function] Return True if pen is down, False if it's up.
turtle.isvisible() [function] Return True if the Turtle is shown, False if it's hidden.
turtle.left(angle) [function] Turn turtle left by angle units.
turtle.listen(xdummy=None, ydummy=None) [function] Set focus on TurtleScreen (in order to collect key-events) No arguments.
turtle.lt(angle) [function] Turn turtle left by angle units.
turtle.mainloop() [function] Starts event loop - calling Tkinter's mainloop function.
turtle.mode(mode=None) [function] Set turtle-mode ('standard', 'logo' or 'world') and perform reset.
turtle.numinput(title, prompt, default=None, minval=None, maxval=None) [function] Pop up a dialog window for input of a number.
turtle.onclick(fun, btn=1, add=None) [function] Bind fun to mouse-click event on this turtle on canvas.
turtle.ondrag(fun, btn=1, add=None) [function] Bind fun to mouse-move event on this turtle on canvas.
turtle.onkey(fun, key) [function] Bind fun to key-release event of key.
turtle.onkeypress(fun, key=None) [function] Bind fun to key-press event of key if key is given, or to any key-press-event if
turtle.onkeyrelease(fun, key) [function] Bind fun to key-release event of key.
turtle.onrelease(fun, btn=1, add=None) [function] Bind fun to mouse-button-release event on this turtle on canvas.
turtle.onscreenclick(fun, btn=1, add=None) [function] Bind fun to mouse-click event on canvas.
turtle.ontimer(fun, t=0) [function] Install a timer, which calls fun after t milliseconds.
turtle.pd() [function] Pull the pen down -- drawing when moving. Aliases: pendown | pd | down No argument.
turtle.pen(pen=None, **pendict) [function] Return or set the pen's attributes.
turtle.pencolor(*args) [function] Return or set the pencolor.
turtle.pendown() [function] Pull the pen down -- drawing when moving. Aliases: pendown | pd | down No argument.
turtle.pensize(width=None) [function] Set or return the line thickness.
turtle.penup() [function] Pull the pen up -- no drawing when moving.
turtle.pos() [function] Return the turtle's current location (x,y), as a Vec2D-vector.
turtle.position() [function] Return the turtle's current location (x,y), as a Vec2D-vector.
turtle.pu() [function] Pull the pen up -- no drawing when moving.
turtle.radians() [function] Set the angle measurement units to radians.
turtle.register_shape(name, shape=None) [function] Adds a turtle shape to TurtleScreen's shapelist.
turtle.reset() [function] Delete the turtle's drawings and restore its default values.
turtle.resetscreen() [function] Reset all Turtles on the Screen to their initial state.
turtle.resizemode(rmode=None) [function] Set resizemode to one of the values: "auto", "user", "noresize".
turtle.right(angle) [function] Turn turtle right by angle units.
turtle.rt(angle) [function] Turn turtle right by angle units.
turtle.screensize(canvwidth=None, canvheight=None, bg=None) [function] Resize the canvas the turtles are drawing on.
turtle.seth(to_angle) [function] Set the orientation of the turtle to to_angle.
turtle.setheading(to_angle) [function] Set the orientation of the turtle to to_angle.
turtle.setpos(x, y=None) [function] Move turtle to an absolute position.
turtle.setposition(x, y=None) [function] Move turtle to an absolute position.
turtle.settiltangle(angle) [function] Rotate the turtleshape to point in the specified direction Argument: angle -- number
turtle.setundobuffer(size) [function] Set or disable undobuffer.
turtle.setup(width=0.5, height=0.75, startx=None, starty=None) [function] Set the size and position of the main window.
turtle.setworldcoordinates(llx, lly, urx, ury) [function] Set up a user defined coordinate-system.
turtle.setx(x) [function] Set the turtle's first coordinate to x Argument: x -- a number (integer or float)
turtle.sety(y) [function] Set the turtle's second coordinate to y Argument: y -- a number (integer or float)
turtle.shape(name=None) [function] Set turtle shape to shape with given name / return current shapename.
turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None) [function] Set/return turtle's stretchfactors/outline.
turtle.shapetransform(t11=None, t12=None, t21=None, t22=None) [function] Set or return the current transformation matrix of the turtle shape.
turtle.shearfactor(shear=None) [function] Set or return the current shearfactor.
turtle.showturtle() [function] Makes the turtle visible.
turtle.speed(speed=None) [function] Return or set the turtle's speed.
turtle.st() [function] Makes the turtle visible.
turtle.stamp() [function] Stamp a copy of the turtleshape onto the canvas and return its id.
turtle.textinput(title, prompt) [function] Pop up a dialog window for input of a string.
turtle.tilt(angle) [function] Rotate the turtleshape by angle.
turtle.tiltangle(angle=None) [function] Set or return the current tilt-angle.
turtle.title(titlestring) [function] Set title of turtle-window Argument: titlestring -- a string, to appear in the titlebar
turtle.towards(x, y=None) [function] Return the angle of the line from the turtle's position to (x, y).
turtle.tracer(n=None, delay=None) [function] Turns turtle animation on/off and set delay for update drawings.
turtle.turtles() [function] Return the list of turtles on the Example: >>> turtles() [<turtle.Turtle object at
turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None) [function] Set/return turtle's stretchfactors/outline.
turtle.undo() [function] undo (repeatedly) the last turtle action.
turtle.undobufferentries() [function] Return count of entries in the undobuffer.
turtle.up() [function] Pull the pen up -- no drawing when moving.
turtle.update() [function] Perform a TurtleScreen update.
turtle.width(width=None) [function] Set or return the line thickness.
turtle.window_height() [function] Return the height of the turtle window.
turtle.window_width() [function] Return the width of the turtle window.
turtle.write(arg, move=False, align='left', font=('Arial', 8, 'normal')) [function] Write text at the current turtle position.
turtle.write_docstringdict(filename='turtle_docstringdict') [function] Create and write docstring-dictionary to file.
turtle.xcor() [function] Return the turtle's x coordinate.
turtle.ycor() [function] Return the turtle's y coordinate --- No arguments.
turtledemo
type(name, bases, dict) [class] type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases,
type(object) [class] type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases,
types
types.AsyncGeneratorType() [class]
types.BuiltinFunctionType() [class]
types.BuiltinMethodType() [class]
types.ClassMethodDescriptorType() [class]
types.CodeType() [class] code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring, constants,
types.CoroutineType() [class]
types.DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None) [class] Route attribute access on a class to __getattr__.
types.FrameType() [class]
types.FunctionType(code, globals, name=None, argdefs=None, closure=None) [class] Create a function object.
types.GeneratorType() [class]
types.GetSetDescriptorType() [class]
types.LambdaType(code, globals, name=None, argdefs=None, closure=None) [class] Create a function object.
types.MappingProxyType(mapping) [class]
types.MemberDescriptorType() [class]
types.MethodDescriptorType() [class]
types.MethodType() [class] method(function, instance) Create a bound instance method object.
types.MethodWrapperType() [class]
types.ModuleType(name, doc=None) [class] Create a module object.
types.SimpleNamespace() [class] A simple attribute-based namespace.
types.TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno) [class] TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno) -- Create a new traceback object.
types.WrapperDescriptorType() [class]
types.coroutine(func) [function] Convert regular generator function to a coroutine.
types.new_class(name, bases=(), kwds=None, exec_body=None) [function] Create a class object dynamically using the appropriate metaclass.
types.prepare_class(name, bases=(), kwds=None) [function] Call the __prepare__ method of the appropriate metaclass.
types.resolve_bases(bases) [function] Resolve MRO entries dynamically as specified by PEP 560.
typing
typing.AbstractSet(*args, **kwargs)
typing.Any(*args, **kwds) Internal indicator of special typing constructs.
typing.AnyStr
typing.AsyncContextManager(*args, **kwargs)
typing.AsyncGenerator(*args, **kwargs)
typing.AsyncIterable(*args, **kwargs)
typing.AsyncIterator(*args, **kwargs)
typing.Awaitable(*args, **kwargs)
typing.ByteString(*args, **kwargs)
typing.Callable(*args, **kwargs) Callable type; Callable[[int], str] is a function of (int) -> str.
typing.ClassVar(*args, **kwds) Internal indicator of special typing constructs.
typing.Collection(*args, **kwargs)
typing.Container(*args, **kwargs)
typing.ContextManager(*args, **kwargs)
typing.Coroutine(*args, **kwargs)
typing.Counter(*args, **kwargs)
typing.DefaultDict(*args, **kwargs)
typing.Deque(*args, **kwargs)
typing.Dict(*args, **kwargs)
typing.FrozenSet(*args, **kwargs)
typing.Generator(*args, **kwargs)
typing.Generic(*args, **kwds) [class] Abstract base class for generic types.
typing.Hashable(*args, **kwargs)
typing.ItemsView(*args, **kwargs)
typing.Iterable(*args, **kwargs)
typing.Iterator(*args, **kwargs)
typing.KeysView(*args, **kwargs)
typing.List(*args, **kwargs)
typing.Mapping(*args, **kwargs)
typing.MappingView(*args, **kwargs)
typing.MutableMapping(*args, **kwargs)
typing.MutableSequence(*args, **kwargs)
typing.MutableSet(*args, **kwargs)
typing.NamedTuple(typename, fields=None, **kwargs) [class] Typed version of namedtuple.
typing.NewType(name, tp) [function] NewType creates simple unique types with almost zero runtime overhead.
typing.NoReturn(*args, **kwds) Internal indicator of special typing constructs.
typing.Optional(*args, **kwds) Internal indicator of special typing constructs.
typing.Reversible(*args, **kwargs)
typing.Sequence(*args, **kwargs)
typing.Set(*args, **kwargs)
typing.Sized(*args, **kwargs)
typing.SupportsAbs(*args, **kwds) [class] Internal base class for protocol classes.
typing.SupportsBytes(*args, **kwds) [class] Internal base class for protocol classes.
typing.SupportsComplex(*args, **kwds) [class] Internal base class for protocol classes.
typing.SupportsFloat(*args, **kwds) [class] Internal base class for protocol classes.
typing.SupportsInt(*args, **kwds) [class] Internal base class for protocol classes.
typing.SupportsRound(*args, **kwds) [class] Internal base class for protocol classes.
typing.TYPE_CHECKING
typing.Text() [class] str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a
typing.Tuple(*args, **kwargs) Tuple type; Tuple[X, Y] is the cross-product type of X and Y.
typing.Type(*args, **kwargs) A special construct usable to annotate class objects.
typing.TypeVar(name, *constraints, *, bound=None, covariant=False, contravariant=False) [class] Type variable.
typing.Union(*args, **kwds) Internal indicator of special typing constructs.
typing.ValuesView(*args, **kwargs)
typing.cast(typ, val) [function] Cast a value to a type.
typing.get_type_hints(obj, globalns=None, localns=None) [function] Return type hints for an object.
typing.no_type_check(arg) [function] Decorator to indicate that annotations are not type hints.
typing.no_type_check_decorator(decorator) [function] Decorator to give another decorator the @no_type_check effect.
typing.overload(func) [function] Decorator for overloaded functions/methods.
unicodedata
unicodedata.UCD() [class]
unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string.
unicodedata.category(chr) Returns the general category assigned to the character chr as string.
unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer.
unicodedata.decimal(chr, default=None) Converts a Unicode character into its equivalent decimal value.
unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string.
unicodedata.digit(chr, default=None) Converts a Unicode character into its equivalent digit value.
unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string.
unicodedata.lookup(name) Look up character by name.
unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer.
unicodedata.name(chr, default=None) Returns the name assigned to the character chr as a string.
unicodedata.normalize(form, unistr) Return the normal form 'form' for the Unicode string unistr.
unicodedata.numeric(chr, default=None) Converts a Unicode character into its equivalent numeric value.
unicodedata.ucd_3_2_0
unicodedata.ucnhash_CAPI
unicodedata.unidata_version
unittest
unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None, description=None) [class] A test case that wraps a test function.
unittest.SkipTest() [class] Raise this exception in a test to skip it.
unittest.TestCase(methodName='runTest') [class] A class whose instances are single test cases.
unittest.TestLoader() [class] This class is responsible for loading tests according to various criteria and returning
unittest.TestResult(stream=None, descriptions=None, verbosity=None) [class] Holder for test result information.
unittest.TestSuite(tests=()) [class] A test suite is a composite test consisting of a number of TestCases.
unittest.TextTestResult(stream, descriptions, verbosity) [class] A test result class that can print formatted text results to a stream. Used by TextTestRunner.
unittest.TextTestRunner(stream=None, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False) [class] A test runner class that displays results in textual form.
unittest.defaultTestLoader
unittest.expectedFailure(test_item) [function]
unittest.findTestCases(module, prefix='test', sortUsing=<??>, suiteClass=<??>) [function]
unittest.getTestCaseNames(testCaseClass, prefix, sortUsing=<??>, testNamePatterns=None) [function]
unittest.installHandler() [function]
unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=<??>, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None, *, tb_locals=False) [class] A command-line program that runs a set of tests; this is primarily for making test
unittest.makeSuite(testCaseClass, prefix='test', sortUsing=<??>, suiteClass=<??>) [function]
unittest.mock
unittest.mock.ANY
unittest.mock.DEFAULT
unittest.mock.FILTER_DIR
unittest.mock.MagicMock(*args, **kw) [class] MagicMock is a subclass of Mock with default implementations of most of the magic
unittest.mock.Mock(*args, **kw) [class] Create a new `Mock` object.
unittest.mock.NonCallableMagicMock(*args, **kw) [class] A version of `MagicMock` that isn't callable.
unittest.mock.NonCallableMock(*args, **kw) [class] A non-callable version of `Mock`
unittest.mock.PropertyMock(*args, **kw) [class] A mock intended to be used as a property, or other descriptor, on a class.
unittest.mock.call(*args, **kwargs) A tuple for holding the results of a call to a mock, either in the form `(args, kwargs)`
unittest.mock.create_autospec(spec, spec_set=False, instance=False, _parent=None, _name=None, **kwargs) [function] Create a mock object using another object as a spec.
unittest.mock.mock_open(mock=None, read_data='') [function] A helper function to create a mock to replace the use of `open`.
unittest.mock.patch(target, new=sentinel.DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs) [function] `patch` acts as a function decorator, class decorator or a context manager.
unittest.mock.seal(mock) [function] Disable the automatic generation of child mocks.
unittest.mock.sentinel
unittest.registerResult(result) [function]
unittest.removeHandler(method=None) [function]
unittest.removeResult(result) [function]
unittest.skip(reason) [function] Unconditionally skip a test.
unittest.skipIf(condition, reason) [function] Skip a test if the condition is true.
unittest.skipUnless(condition, reason) [function] Skip a test unless the condition is true.
urllib
urllib.error
urllib.error.ContentTooShortError(message, content) [class] Exception raised when downloaded size does not match content-length.
urllib.error.HTTPError(url, code, msg, hdrs, fp) [class] Raised when HTTP error occurs, but also acts like non-error return
urllib.error.URLError(reason, filename=None) [class] Base class for I/O related errors.
urllib.parse
urllib.parse.DefragResult(url, fragment) [class] DefragResult(url, fragment) A 2-tuple that contains the url without fragment identifier
urllib.parse.DefragResultBytes(url, fragment) [class] DefragResult(url, fragment) A 2-tuple that contains the url without fragment identifier
urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment) [class] ParseResult(scheme, netloc, path, params, query, fragment) A 6-tuple that contains
urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment) [class] ParseResult(scheme, netloc, path, params, query, fragment) A 6-tuple that contains
urllib.parse.SplitResult(scheme, netloc, path, query, fragment) [class] SplitResult(scheme, netloc, path, query, fragment) A 5-tuple that contains the different
urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment) [class] SplitResult(scheme, netloc, path, query, fragment) A 5-tuple that contains the different
urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None) [function] Parse a query given as a string argument.
urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None) [function] Parse a query given as a string argument.
urllib.parse.quote(string, safe='/', encoding=None, errors=None) [function] quote('abc def') -> 'abc%20def' Each part of a URL, e.g.
urllib.parse.quote_from_bytes(bs, safe='/') [function] Like quote(), but accepts a bytes object rather than a str, and does not perform
urllib.parse.quote_plus(string, safe='', encoding=None, errors=None) [function] Like quote(), but also replace ' ' with '+', as required for quoting HTML form values.
urllib.parse.unquote(string, encoding='utf-8', errors='replace') [function] Replace %xx escapes by their single-character equivalent.
urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace') [function] Like unquote(), but also replace plus signs by spaces, as required for unquoting
urllib.parse.unquote_to_bytes(string) [function] unquote_to_bytes('abc%20def') -> b'abc def'.
urllib.parse.urldefrag(url) [function] Removes any existing fragment from URL.
urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=<??>) [function] Encode a dict or sequence of two-element tuples into a URL query string.
urllib.parse.urljoin(base, url, allow_fragments=True) [function] Join a base URL and a possibly relative URL to form an absolute interpretation of
urllib.parse.urlparse(url, scheme='', allow_fragments=True) [function] Parse a URL into 6 components: <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
urllib.parse.urlsplit(url, scheme='', allow_fragments=True) [function] Parse a URL into 5 components: <scheme>://<netloc>/<path>?<query>#<fragment> Return
urllib.parse.urlunparse(components) [function] Put a parsed URL back together again.
urllib.parse.urlunsplit(components) [function] Combine the elements of a tuple as returned by urlsplit() into a complete URL as
urllib.request
urllib.request.AbstractBasicAuthHandler(password_mgr=None) [class]
urllib.request.AbstractDigestAuthHandler(passwd=None) [class]
urllib.request.BaseHandler() [class]
urllib.request.CacheFTPHandler() [class]
urllib.request.DataHandler() [class]
urllib.request.FTPHandler() [class]
urllib.request.FancyURLopener(*args, **kwargs) [class] Derived class with handlers for errors we can handle (perhaps).
urllib.request.FileHandler() [class]
urllib.request.HTTPBasicAuthHandler(password_mgr=None) [class]
urllib.request.HTTPCookieProcessor(cookiejar=None) [class]
urllib.request.HTTPDefaultErrorHandler() [class]
urllib.request.HTTPDigestAuthHandler(passwd=None) [class] An authentication protocol defined by RFC 2069 Digest authentication improves on
urllib.request.HTTPErrorProcessor() [class] Process HTTP error responses.
urllib.request.HTTPHandler(debuglevel=0) [class]
urllib.request.HTTPPasswordMgr() [class]
urllib.request.HTTPPasswordMgrWithDefaultRealm() [class]
urllib.request.HTTPPasswordMgrWithPriorAuth(*args, **kwargs) [class]
urllib.request.HTTPRedirectHandler() [class]
urllib.request.HTTPSHandler(debuglevel=0, context=None, check_hostname=None) [class]
urllib.request.OpenerDirector() [class]
urllib.request.ProxyBasicAuthHandler(password_mgr=None) [class]
urllib.request.ProxyDigestAuthHandler(passwd=None) [class]
urllib.request.ProxyHandler(proxies=None) [class]
urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None) [class]
urllib.request.URLopener(proxies=None, **x509) [class] Class to open URLs.
urllib.request.UnknownHandler() [class]
urllib.request.build_opener(*handlers) [function] Create an opener object from a list of handlers.
urllib.request.getproxies() [function] Return a dictionary of scheme -> proxy server URL mappings.
urllib.request.install_opener(opener) [function]
urllib.request.pathname2url(p) [function] OS-specific conversion from a file system path to a relative URL of the 'file' scheme;
urllib.request.url2pathname(url) [function] OS-specific conversion from a relative URL of the 'file' scheme to a file system
urllib.request.urlcleanup() [function] Clean up temporary files from urlretrieve calls.
urllib.request.urlopen(url, data=None, timeout=<??>, *, cafile=None, capath=None, cadefault=False, context=None) [function] Open the URL url, which can be either a string or a Request object.
urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None) [function] Retrieve a URL into a temporary location on disk.
urllib.robotparser
urllib.robotparser.RobotFileParser(url='') [class] This class provides a set of methods to read, parse and answer questions about a
uu
uu.Error() [class] Common base class for all non-exit exceptions.
uu.decode(in_file, out_file=None, mode=None, quiet=False) [function] Decode uuencoded file
uu.encode(in_file, out_file, name=None, mode=None, *, backtick=False) [function] Uuencode file
uuid
uuid.Enum(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] Generic enumeration. Derive from this class to define new enumerations.
uuid.NAMESPACE_DNS
uuid.NAMESPACE_OID
uuid.NAMESPACE_URL
uuid.NAMESPACE_X500
uuid.RESERVED_FUTURE
uuid.RESERVED_MICROSOFT
uuid.RESERVED_NCS
uuid.RFC_4122
uuid.SafeUUID(value, names=None, *, module=None, qualname=None, type=None, start=1) [class] An enumeration.
uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None, *, is_safe=<??>) [class] Instances of the UUID class represent UUIDs as specified in RFC 4122.
uuid.bytes_() [class] bytes(iterable_of_ints) -> bytes bytes(string, encoding[, errors]) -> bytes bytes(bytes_or_buffer)
uuid.getnode(*, getters=None) [function] Get the hardware address as a 48-bit positive integer.
uuid.int_() [class] int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer,
uuid.uuid1(node=None, clock_seq=None) [function] Generate a UUID from a host ID, sequence number, and the current time.
uuid.uuid3(namespace, name) [function] Generate a UUID from the MD5 hash of a namespace UUID and a name.
uuid.uuid4() [function] Generate a random UUID.
uuid.uuid5(namespace, name) [function] Generate a UUID from the SHA-1 hash of a namespace UUID and a name.
vars([object]) vars([object]) -> dictionary Without arguments, equivalent to locals().
venv
venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None) [class] This class exists to allow virtual environment creation to be customized.
venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False, prompt=None) [function] Create a virtual environment in a directory.
venv.logger
venv.main(args=None) [function]
warnings
warnings.catch_warnings(*, record=False, module=None) [class] A context manager that copies and restores the warnings filter upon exiting the context.
warnings.filterwarnings(action, message='', category=<??>, module='', lineno=0, append=False) [function] Insert an entry into the list of warnings filters (at the front).
warnings.formatwarning(message, category, filename, lineno, line=None) [function] Function to format a warning the standard way.
warnings.resetwarnings() [function] Clear the list of warning filters, so that no filters are active.
warnings.showwarning(message, category, filename, lineno, file=None, line=None) [function] Hook to write a warning to a file; replace if you like.
warnings.simplefilter(action, category=<??>, lineno=0, append=False) [function] Insert a simple entry into the list of warnings filters (at the front).
warnings.warn(message, category=None, stacklevel=1, source=None) Issue a warning, or maybe ignore it or raise an exception.
warnings.warn_explicit(message, category, filename, lineno, module=None, registry=None, module_globals=None, source=None) Low-level inferface to warnings functionality.
wave
wave.Error() [class] Common base class for all non-exit exceptions.
wave.Wave_read(f) [class] Variables used in this class: These variables are available to the user though appropriate
wave.Wave_write(f) [class] Variables used in this class: These variables are user settable through appropriate
wave.open(f, mode=None) [function]
wave.openfp(f, mode=None) [function]
weakref
weakref.CallableProxyType() [class]
weakref.ProxyType() [class]
weakref.ProxyTypes
weakref.ReferenceType() [class]
weakref.WeakKeyDictionary(dict=None) [class] Mapping class that references keys weakly.
weakref.WeakMethod(meth, callback=None) [class] A custom `weakref.ref` subclass which simulates a weak reference to a bound method,
weakref.WeakSet(data=None) [class]
weakref.WeakValueDictionary(*args, **kw) [class] Mapping class that references values weakly.
weakref.finalize(obj, func, *args, **kwargs) [class] Class for finalization of weakrefable objects finalize(obj, func, *args, **kwargs)
weakref.getweakrefcount(object) Return the number of weak references to 'object'.
weakref.getweakrefs(object) getweakrefs(object) -- return a list of all weak reference objects that point to
weakref.proxy(object[, callback]) proxy(object[, callback]) -- create a proxy object that weakly references 'object'.
weakref.ref(object[, callback]) [class]
webbrowser
webbrowser.Error() [class] Common base class for all non-exit exceptions.
webbrowser.get(using=None) [function] Return a browser launcher instance appropriate for the environment.
webbrowser.open(url, new=0, autoraise=True) [function]
webbrowser.open_new(url) [function]
webbrowser.open_new_tab(url) [function]
webbrowser.register(name, klass, instance=None, *, preferred=False) [function] Register a browser connector.
while
winreg
winreg.CloseKey(hkey) Closes a previously opened registry key.
winreg.ConnectRegistry(computer_name, key) Establishes a connection to the registry on another computer.
winreg.CreateKey(key, sub_key) Creates or opens the specified key.
winreg.CreateKeyEx(key, sub_key, reserved=0, access=131078) Creates or opens the specified key.
winreg.DeleteKey(key, sub_key) Deletes the specified key.
winreg.DeleteKeyEx(key, sub_key, access=256, reserved=0) Deletes the specified key (64-bit OS only).
winreg.DeleteValue(key, value) Removes a named value from a registry key.
winreg.DisableReflectionKey(key) Disables registry reflection for 32bit processes running on a 64bit OS.
winreg.EnableReflectionKey(key) Restores registry reflection for the specified disabled key.
winreg.EnumKey(key, index) Enumerates subkeys of an open registry key.
winreg.EnumValue(key, index) Enumerates values of an open registry key.
winreg.ExpandEnvironmentStrings(string) Expand environment vars.
winreg.FlushKey(key) Writes all the attributes of a key to the registry.
winreg.HKEYType() [class] PyHKEY Object - A Python object, representing a win32 registry key.
winreg.HKEY_CLASSES_ROOT
winreg.HKEY_CURRENT_CONFIG
winreg.HKEY_CURRENT_USER
winreg.HKEY_DYN_DATA
winreg.HKEY_LOCAL_MACHINE
winreg.HKEY_PERFORMANCE_DATA
winreg.HKEY_USERS
winreg.KEY_ALL_ACCESS
winreg.KEY_CREATE_LINK
winreg.KEY_CREATE_SUB_KEY
winreg.KEY_ENUMERATE_SUB_KEYS
winreg.KEY_EXECUTE
winreg.KEY_NOTIFY
winreg.KEY_QUERY_VALUE
winreg.KEY_READ
winreg.KEY_SET_VALUE
winreg.KEY_WOW64_32KEY
winreg.KEY_WOW64_64KEY
winreg.KEY_WRITE
winreg.LoadKey(key, sub_key, file_name) Insert data into the registry from a file.
winreg.OpenKey(key, sub_key, reserved=0, access=131097) Opens the specified key.
winreg.OpenKeyEx(key, sub_key, reserved=0, access=131097) Opens the specified key.
winreg.QueryInfoKey(key) Returns information about a key.
winreg.QueryReflectionKey(key) Returns the reflection state for the specified key as a bool.
winreg.QueryValue(key, sub_key) Retrieves the unnamed value for a key.
winreg.QueryValueEx(key, name) Retrieves the type and value of a specified sub-key.
winreg.REG_BINARY
winreg.REG_CREATED_NEW_KEY
winreg.REG_DWORD
winreg.REG_DWORD_BIG_ENDIAN
winreg.REG_DWORD_LITTLE_ENDIAN
winreg.REG_EXPAND_SZ
winreg.REG_FULL_RESOURCE_DESCRIPTOR
winreg.REG_LEGAL_CHANGE_FILTER
winreg.REG_LEGAL_OPTION
winreg.REG_LINK
winreg.REG_MULTI_SZ
winreg.REG_NONE
winreg.REG_NOTIFY_CHANGE_ATTRIBUTES
winreg.REG_NOTIFY_CHANGE_LAST_SET
winreg.REG_NOTIFY_CHANGE_NAME
winreg.REG_NOTIFY_CHANGE_SECURITY
winreg.REG_NO_LAZY_FLUSH
winreg.REG_OPENED_EXISTING_KEY
winreg.REG_OPTION_BACKUP_RESTORE
winreg.REG_OPTION_CREATE_LINK
winreg.REG_OPTION_NON_VOLATILE
winreg.REG_OPTION_OPEN_LINK
winreg.REG_OPTION_RESERVED
winreg.REG_OPTION_VOLATILE
winreg.REG_QWORD
winreg.REG_QWORD_LITTLE_ENDIAN
winreg.REG_REFRESH_HIVE
winreg.REG_RESOURCE_LIST
winreg.REG_RESOURCE_REQUIREMENTS_LIST
winreg.REG_SZ
winreg.REG_WHOLE_HIVE_VOLATILE
winreg.SaveKey(key, file_name) Saves the specified key, and all its subkeys to the specified file.
winreg.SetValue(key, sub_key, type, value) Associates a value with a specified key.
winreg.SetValueEx(key, value_name, reserved, type, value) Stores data in the value field of an open registry key.
winreg.error() [class] Base class for I/O related errors.
winsound
winsound.Beep(frequency, duration) A wrapper around the Windows Beep API. frequency Frequency of the sound in hertz.
winsound.MB_ICONASTERISK
winsound.MB_ICONEXCLAMATION
winsound.MB_ICONHAND
winsound.MB_ICONQUESTION
winsound.MB_OK
winsound.MessageBeep(type=0) Call Windows MessageBeep(x). x defaults to MB_OK.
winsound.PlaySound(sound, flags) A wrapper around the Windows PlaySound API.
winsound.SND_ALIAS
winsound.SND_APPLICATION
winsound.SND_ASYNC
winsound.SND_FILENAME
winsound.SND_LOOP
winsound.SND_MEMORY
winsound.SND_NODEFAULT
winsound.SND_NOSTOP
winsound.SND_NOWAIT
winsound.SND_PURGE
with
wsgiref
wsgiref.handlers
wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False) [class] CGI-like systems using input/output/error streams and environ mapping Usage:: handler
wsgiref.handlers.BaseHandler() [class] Manage the invocation of a WSGI application
wsgiref.handlers.CGIHandler() [class] CGI-based invocation via sys.stdin/stdout/stderr and os.environ Usage:: CGIHandler().run(app)
wsgiref.handlers.IISCGIHandler() [class] CGI-based invocation with workaround for IIS path bug This handler should be used
wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False) [class] Handler that's just initialized with streams, environment, etc.
wsgiref.handlers.read_environ() [function] Read environment, fixing HTTP variables
wsgiref.headers
wsgiref.headers.Headers(headers=None) [class] Manage a collection of HTTP response headers
wsgiref.headers._formatparam(param, value=None, quote=1) [function] Convenience function to format and return a key=value pair.
wsgiref.headers.tspecials
wsgiref.simple_server
wsgiref.simple_server.WSGIRequestHandler(request, client_address, server) [class] HTTP request handler base class.
wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass, bind_and_activate=True) [class] BaseHTTPServer that implements the Python WSGI protocol
wsgiref.simple_server.demo_app(environ, start_response) [function]
wsgiref.simple_server.make_server(host, port, app, server_class=<??>, handler_class=<??>) [function] Create a new WSGI server listening on `host` and `port` for `app`
wsgiref.util
wsgiref.util.FileWrapper(filelike, blksize=8192) [class] Wrapper to convert file-like objects to iterables
wsgiref.util.application_uri(environ) [function] Return the application's base URI (no PATH_INFO or QUERY_STRING)
wsgiref.util.guess_scheme(environ) [function] Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'
wsgiref.util.request_uri(environ, include_query=True) [function] Return the full request URI, optionally including the query string
wsgiref.util.setup_testing_defaults(environ) [function] Update 'environ' with trivial defaults for testing purposes This adds various parameters
wsgiref.util.shift_path_info(environ) [function] Shift a name from PATH_INFO to SCRIPT_NAME, returning it If there are no remaining
wsgiref.validate
wsgiref.validate.validator(application) [function] When applied between a WSGI server and a WSGI application, this middleware will check
xdrlib
xdrlib.ConversionError(msg) [class] Exception class for this module.
xdrlib.Error(msg) [class] Exception class for this module.
xdrlib.Packer() [class] Pack various data representations into a buffer.
xdrlib.Unpacker(data) [class] Unpacks various data representations from the given buffer.
xml
xml.dom
xml.dom.DOMException(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.DOMSTRING_SIZE_ERR
xml.dom.DomstringSizeErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.EMPTY_NAMESPACE
xml.dom.EMPTY_PREFIX
xml.dom.HIERARCHY_REQUEST_ERR
xml.dom.HierarchyRequestErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.INDEX_SIZE_ERR
xml.dom.INUSE_ATTRIBUTE_ERR
xml.dom.INVALID_ACCESS_ERR
xml.dom.INVALID_CHARACTER_ERR
xml.dom.INVALID_MODIFICATION_ERR
xml.dom.INVALID_STATE_ERR
xml.dom.IndexSizeErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.InuseAttributeErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.InvalidAccessErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.InvalidCharacterErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.InvalidModificationErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.InvalidStateErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.NAMESPACE_ERR
xml.dom.NOT_FOUND_ERR
xml.dom.NOT_SUPPORTED_ERR
xml.dom.NO_DATA_ALLOWED_ERR
xml.dom.NO_MODIFICATION_ALLOWED_ERR
xml.dom.NamespaceErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.NoDataAllowedErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.NoModificationAllowedErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.Node() [class] Class giving the NodeType constants.
xml.dom.NotFoundErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.NotSupportedErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.SYNTAX_ERR
xml.dom.SyntaxErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.UserDataHandler() [class] Class giving the operation constants for UserDataHandler.handle().
xml.dom.VALIDATION_ERR
xml.dom.ValidationErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.WRONG_DOCUMENT_ERR
xml.dom.WrongDocumentErr(*args, **kw) [class] Abstract base class for DOM exceptions.
xml.dom.XHTML_NAMESPACE
xml.dom.XMLNS_NAMESPACE
xml.dom.XML_NAMESPACE
xml.dom.getDOMImplementation(name=None, features=()) [function] getDOMImplementation(name = None, features = ()) -> DOM implementation.
xml.dom.minidom
xml.dom.minidom.Attr(qName, namespaceURI=None, localName=None, prefix=None) [class] Class giving the NodeType constants.
xml.dom.minidom.AttributeList(attrs, attrsNS, ownerElement) [class] The attribute list is a transient interface to the underlying dictionaries.
xml.dom.minidom.CDATASection() [class] Mixin that makes childless-ness easy to implement and avoids the complexity of the
xml.dom.minidom.CharacterData() [class] Mixin that makes childless-ness easy to implement and avoids the complexity of the
xml.dom.minidom.Childless() [class] Mixin that makes childless-ness easy to implement and avoids the complexity of the
xml.dom.minidom.Comment(data) [class] Mixin that makes childless-ness easy to implement and avoids the complexity of the
xml.dom.minidom.DOMImplementation() [class]
xml.dom.minidom.DOMImplementationLS() [class]
xml.dom.minidom.Document() [class] Class giving the NodeType constants.
xml.dom.minidom.DocumentFragment() [class] Class giving the NodeType constants.
xml.dom.minidom.DocumentLS() [class] Mixin to create documents that conform to the load/save spec.
xml.dom.minidom.DocumentType(qualifiedName) [class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.EMPTY_NAMESPACE
xml.dom.minidom.EMPTY_PREFIX
xml.dom.minidom.Element(tagName, namespaceURI=None, prefix=None, localName=None) [class] Class giving the NodeType constants.
xml.dom.minidom.ElementInfo(name) [class] Object that represents content-model information for an element.
xml.dom.minidom.EmptyNodeList(iterable=()) [class] Built-in immutable sequence.
xml.dom.minidom.Entity(name, publicId, systemId, notation) [class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.Identified() [class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.NamedNodeMap(attrs, attrsNS, ownerElement) [class] The attribute list is a transient interface to the underlying dictionaries.
xml.dom.minidom.Node() [class] Class giving the NodeType constants.
xml.dom.minidom.NodeList(iterable=()) [class] Built-in mutable sequence.
xml.dom.minidom.Notation(name, publicId, systemId) [class] Mix-in class that supports the publicId and systemId attributes.
xml.dom.minidom.ProcessingInstruction(target, data) [class] Mixin that makes childless-ness easy to implement and avoids the complexity of the
xml.dom.minidom.ReadOnlySequentialNamedNodeMap(seq=()) [class]
xml.dom.minidom.StringTypes
xml.dom.minidom.Text() [class] Mixin that makes childless-ness easy to implement and avoids the complexity of the
xml.dom.minidom.TypeInfo(namespace, name) [class]
xml.dom.minidom.XMLNS_NAMESPACE
xml.dom.minidom._append_child(self, node) [function]
xml.dom.minidom._clear_id_cache(node) [function]
xml.dom.minidom._clone_node(node, deep, newOwnerDocument) [function] Clone a node and give it the new owner document.
xml.dom.minidom._do_pulldom_parse(func, args, kwargs) [function]
xml.dom.minidom._get_containing_element(node) [function]
xml.dom.minidom._get_containing_entref(node) [function]
xml.dom.minidom._get_elements_by_tagName_helper(parent, name, rc) [function]
xml.dom.minidom._get_elements_by_tagName_ns_helper(parent, nsURI, localName, rc) [function]
xml.dom.minidom._in_document(node) [function]
xml.dom.minidom._no_type
xml.dom.minidom._nodeTypes_with_children
xml.dom.minidom._nssplit(qualifiedName) [function]
xml.dom.minidom._set_attribute_node(element, attr) [function]
xml.dom.minidom._write_data(writer, data) [function] Writes datachars to writer.
xml.dom.minidom.defproperty(klass, name, doc) [function]
xml.dom.minidom.getDOMImplementation(features=None) [function]
xml.dom.minidom.parse(file, parser=None, bufsize=None) [function] Parse a file into a DOM by filename or file object.
xml.dom.minidom.parseString(string, parser=None) [function] Parse a file into a DOM from a string.
xml.dom.pulldom
xml.dom.pulldom.CHARACTERS
xml.dom.pulldom.COMMENT
xml.dom.pulldom.DOMEventStream(stream, parser, bufsize) [class]
xml.dom.pulldom.END_DOCUMENT
xml.dom.pulldom.END_ELEMENT
xml.dom.pulldom.ErrorHandler() [class]
xml.dom.pulldom.IGNORABLE_WHITESPACE
xml.dom.pulldom.PROCESSING_INSTRUCTION
xml.dom.pulldom.PullDOM(documentFactory=None) [class] Interface for receiving logical document content events.
xml.dom.pulldom.SAX2DOM(documentFactory=None) [class] Interface for receiving logical document content events.
xml.dom.pulldom.START_DOCUMENT
xml.dom.pulldom.START_ELEMENT
xml.dom.pulldom.default_bufsize
xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None) [function]
xml.dom.pulldom.parseString(string, parser=None) [function]
xml.dom.registerDOMImplementation(name, factory) [function] registerDOMImplementation(name, factory) Register the factory function with the name.
xml.etree.ElementTree
xml.etree.ElementTree.Comment(text=None) [function] Comment element factory.
xml.etree.ElementTree.Element(tag, attrib={}, **extra) [class]
xml.etree.ElementTree.ElementTree(element=None, file=None) [class] An XML element hierarchy.
xml.etree.ElementTree.PI(target, text=None) [function] Processing Instruction element factory.
xml.etree.ElementTree.ParseError() [class] Invalid syntax.
xml.etree.ElementTree.ProcessingInstruction(target, text=None) [function] Processing Instruction element factory.
xml.etree.ElementTree.QName(text_or_uri, tag=None) [class] Qualified name wrapper.
xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)
xml.etree.ElementTree.TreeBuilder(element_factory=None) [class]
xml.etree.ElementTree.VERSION
xml.etree.ElementTree.XML(text, parser=None) [function] Parse XML document from string constant.
xml.etree.ElementTree.XMLID(text, parser=None) [function] Parse XML document from string constant for its IDs.
xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None) [class]
xml.etree.ElementTree.XMLPullParser(events=None, *, _parser=None) [class]
xml.etree.ElementTree.dump(elem) [function] Write element tree or element structure to sys.stdout.
xml.etree.ElementTree.fromstring(text, parser=None) [function] Parse XML document from string constant.
xml.etree.ElementTree.fromstringlist(sequence, parser=None) [function] Parse XML document from sequence of string fragments.
xml.etree.ElementTree.iselement(element) [function] Return True if *element* appears to be an Element.
xml.etree.ElementTree.iterparse(source, events=None, parser=None) [function] Incrementally parse XML document into ElementTree.
xml.etree.ElementTree.parse(source, parser=None) [function] Parse XML document into element tree.
xml.etree.ElementTree.register_namespace(prefix, uri) [function] Register a namespace prefix.
xml.etree.ElementTree.tostring(element, encoding=None, method=None, *, short_empty_elements=True) [function] Generate string representation of XML element.
xml.etree.ElementTree.tostringlist(element, encoding=None, method=None, *, short_empty_elements=True) [function]
xml.parsers.expat
xml.parsers.expat.EXPAT_VERSION
xml.parsers.expat.ErrorString(code) Returns string error for given number.
xml.parsers.expat.ExpatError() [class] Common base class for all non-exit exceptions.
xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None, intern=None) Return a new XML parser object.
xml.parsers.expat.XMLParserType() [class] XML parser
xml.parsers.expat.XML_PARAM_ENTITY_PARSING_ALWAYS
xml.parsers.expat.XML_PARAM_ENTITY_PARSING_NEVER
xml.parsers.expat.XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
xml.parsers.expat.error() [class] Common base class for all non-exit exceptions.
xml.parsers.expat.errors
xml.parsers.expat.errors.XML_ERROR_ABORTED
xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY
xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF
xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING
xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE
xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE
xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING
xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD
xml.parsers.expat.errors.XML_ERROR_FINISHED
xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE
xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING
xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN
xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT
xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI
xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE
xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED
xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS
xml.parsers.expat.errors.XML_ERROR_NO_MEMORY
xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR
xml.parsers.expat.errors.XML_ERROR_PUBLICID
xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF
xml.parsers.expat.errors.XML_ERROR_SUSPENDED
xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE
xml.parsers.expat.errors.XML_ERROR_SYNTAX
xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH
xml.parsers.expat.errors.XML_ERROR_TEXT_DECL
xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX
xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION
xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN
xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX
xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY
xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE
xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING
xml.parsers.expat.errors.XML_ERROR_XML_DECL
xml.parsers.expat.errors.codes
xml.parsers.expat.errors.messages
xml.parsers.expat.expat_CAPI
xml.parsers.expat.features
xml.parsers.expat.model
xml.parsers.expat.model.XML_CQUANT_NONE
xml.parsers.expat.model.XML_CQUANT_OPT
xml.parsers.expat.model.XML_CQUANT_PLUS
xml.parsers.expat.model.XML_CQUANT_REP
xml.parsers.expat.model.XML_CTYPE_ANY
xml.parsers.expat.model.XML_CTYPE_CHOICE
xml.parsers.expat.model.XML_CTYPE_EMPTY
xml.parsers.expat.model.XML_CTYPE_MIXED
xml.parsers.expat.model.XML_CTYPE_NAME
xml.parsers.expat.model.XML_CTYPE_SEQ
xml.parsers.expat.native_encoding
xml.parsers.expat.version_info
xml.sax
xml.sax.ContentHandler() [class] Interface for receiving logical document content events.
xml.sax.ErrorHandler() [class] Basic interface for SAX error handlers.
xml.sax.InputSource(system_id=None) [class] Encapsulation of the information needed by the XMLReader to read entities.
xml.sax.SAXException(msg, exception=None) [class] Encapsulate an XML error or warning.
xml.sax.SAXNotRecognizedException(msg, exception=None) [class] Exception class for an unrecognized identifier.
xml.sax.SAXNotSupportedException(msg, exception=None) [class] Exception class for an unsupported operation.
xml.sax.SAXParseException(msg, exception, locator) [class] Encapsulate an XML parse error or warning.
xml.sax.SAXReaderNotAvailable(msg, exception=None) [class] Exception class for a missing driver.
xml.sax._create_parser(parser_name) [function]
xml.sax._false
xml.sax._key
xml.sax.default_parser_list
xml.sax.handler
xml.sax.handler.ContentHandler() [class] Interface for receiving logical document content events.
xml.sax.handler.DTDHandler() [class] Handle DTD events.
xml.sax.handler.EntityResolver() [class] Basic interface for resolving entities.
xml.sax.handler.ErrorHandler() [class] Basic interface for SAX error handlers.
xml.sax.handler.all_features
xml.sax.handler.all_properties
xml.sax.handler.feature_external_ges
xml.sax.handler.feature_external_pes
xml.sax.handler.feature_namespace_prefixes
xml.sax.handler.feature_namespaces
xml.sax.handler.feature_string_interning
xml.sax.handler.feature_validation
xml.sax.handler.property_declaration_handler
xml.sax.handler.property_dom_node
xml.sax.handler.property_encoding
xml.sax.handler.property_interning_dict
xml.sax.handler.property_lexical_handler
xml.sax.handler.property_xml_string
xml.sax.handler.version
xml.sax.make_parser(parser_list=[]) [function] Creates and returns a SAX parser.
xml.sax.parse(source, handler, errorHandler=<??>) [function]
xml.sax.parseString(string, handler, errorHandler=<??>) [function]
xml.sax.saxutils
xml.sax.saxutils.XMLFilterBase(parent=None) [class] This class is designed to sit between an XMLReader and the client application's event
xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False) [class] Interface for receiving logical document content events.
xml.sax.saxutils._gettextwriter(out, encoding) [function]
xml.sax.saxutils.escape(data, entities={}) [function] Escape &, <, and > in a string of data.
xml.sax.saxutils.prepare_input_source(source, base='') [function] This function takes an InputSource and an optional base URL and returns a fully resolved
xml.sax.saxutils.quoteattr(data, entities={}) [function] Escape and quote an attribute value.
xml.sax.saxutils.unescape(data, entities={}) [function] Unescape &amp;, &lt;, and &gt; in a string of data.
xml.sax.xmlreader
xml.sax.xmlreader.AttributesImpl(attrs) [class]
xml.sax.xmlreader.AttributesNSImpl(attrs, qnames) [class]
xml.sax.xmlreader.IncrementalParser(bufsize=65536) [class] This interface adds three extra methods to the XMLReader interface that allow XML
xml.sax.xmlreader.InputSource(system_id=None) [class] Encapsulation of the information needed by the XMLReader to read entities.
xml.sax.xmlreader.Locator() [class] Interface for associating a SAX event with a document location.
xml.sax.xmlreader.SAXNotRecognizedException(msg, exception=None) [class] Exception class for an unrecognized identifier.
xml.sax.xmlreader.SAXNotSupportedException(msg, exception=None) [class] Exception class for an unsupported operation.
xml.sax.xmlreader.XMLReader() [class] Interface for reading an XML document using callbacks.
xml.sax.xmlreader._test() [function]
xmlrpc
xmlrpc.client
xmlrpc.client.APPLICATION_ERROR
xmlrpc.client.Binary(data=None) [class] Wrapper for binary data.
xmlrpc.client.Boolean() [class] bool(x) -> bool Returns True when the argument x is true, False otherwise.
xmlrpc.client.BytesIO(initial_bytes=b'') [class] Buffered I/O implementation using an in-memory bytes buffer.
xmlrpc.client.DateTime(value=0) [class] DateTime wrapper for an ISO 8601 string or time tuple or localtime integer value
xmlrpc.client.Decimal(value='0', context=None) [class] Construct a new Decimal object.
xmlrpc.client.Error() [class] Base class for client errors.
xmlrpc.client.ExpatParser(target) [class]
xmlrpc.client.FastMarshaller
xmlrpc.client.FastParser
xmlrpc.client.FastUnmarshaller
xmlrpc.client.Fault(faultCode, faultString, **extra) [class] Indicates an XML-RPC fault package.
xmlrpc.client.GzipDecodedResponse(response) [class] a file-like object to decode a response encoded with the gzip method, as described
xmlrpc.client.INTERNAL_ERROR
xmlrpc.client.INVALID_ENCODING_CHAR
xmlrpc.client.INVALID_METHOD_PARAMS
xmlrpc.client.INVALID_XMLRPC
xmlrpc.client.MAXINT
xmlrpc.client.METHOD_NOT_FOUND
xmlrpc.client.MININT
xmlrpc.client.Marshaller(encoding=None, allow_none=False) [class] Generate an XML-RPC params chunk from a Python data structure.
xmlrpc.client.MultiCall(server) [class] server -> an object used to boxcar method calls server should be a ServerProxy object.
xmlrpc.client.MultiCallIterator(results) [class] Iterates over the results of a multicall.
xmlrpc.client.NOT_WELLFORMED_ERROR
xmlrpc.client.PARSE_ERROR
xmlrpc.client.ProtocolError(url, errcode, errmsg, headers) [class] Indicates an HTTP protocol error.
xmlrpc.client.ResponseError() [class] Indicates a broken response package.
xmlrpc.client.SERVER_ERROR
xmlrpc.client.SYSTEM_ERROR
xmlrpc.client.SafeTransport(use_datetime=False, use_builtin_types=False, *, context=None) [class] Handles an HTTPS transaction to an XML-RPC server.
xmlrpc.client.Server(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None) [class] uri [,options] -> a logical connection to an XML-RPC server uri is the connection
xmlrpc.client.ServerProxy(uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None) [class] uri [,options] -> a logical connection to an XML-RPC server uri is the connection
xmlrpc.client.TRANSPORT_ERROR
xmlrpc.client.Transport(use_datetime=False, use_builtin_types=False) [class] Handles an HTTP transaction to an XML-RPC server.
xmlrpc.client.UNSUPPORTED_ENCODING
xmlrpc.client.Unmarshaller(use_datetime=False, use_builtin_types=False) [class] Unmarshal an XML-RPC response, based on incoming XML event messages (start, data,
xmlrpc.client.WRAPPERS
xmlrpc.client._Method(send, name) [class]
xmlrpc.client._MultiCallMethod(call_list, name) [class]
xmlrpc.client._binary(data) [function]
xmlrpc.client._datetime(data) [function]
xmlrpc.client._datetime_type(data) [function]
xmlrpc.client._iso8601_format(value) [function]
xmlrpc.client._strftime(value) [function]
xmlrpc.client.boolean() [class] bool(x) -> bool Returns True when the argument x is true, False otherwise.
xmlrpc.client.datetime() [class] datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]]) The
xmlrpc.client.dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False) [function] data [,options] -> marshalled data Convert an argument tuple or a Fault instance
xmlrpc.client.escape(s) [function]
xmlrpc.client.getparser(use_datetime=False, use_builtin_types=False) [function] getparser() -> parser, unmarshaller Create an instance of the fastest available parser,
xmlrpc.client.gzip_decode(data, max_decode=20971520) [function] gzip encoded data -> unencoded data Decode data using the gzip content encoding as
xmlrpc.client.gzip_encode(data) [function] data -> gzip encoded data Encode data using the gzip content encoding as described
xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False) [function] data -> unmarshalled data, method name Convert an XML-RPC packet to unmarshalled
xmlrpc.server
xmlrpc.server.BaseHTTPRequestHandler(request, client_address, server) [class] HTTP request handler base class.
xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False, encoding=None, use_builtin_types=False) [class] Simple handler for XML-RPC data passed through CGI.
xmlrpc.server.DocCGIXMLRPCRequestHandler() [class] Handler for XML-RPC data and documentation requests passed through CGI
xmlrpc.server.DocXMLRPCRequestHandler(request, client_address, server) [class] XML-RPC and documentation request handler class.
xmlrpc.server.DocXMLRPCServer(addr, requestHandler=<??>, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False) [class] XML-RPC and HTML documentation server.
xmlrpc.server.Fault(faultCode, faultString, **extra) [class] Indicates an XML-RPC fault package.
xmlrpc.server.MultiPathXMLRPCServer(addr, requestHandler=<??>, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False) [class] Multipath XML-RPC Server This specialization of SimpleXMLRPCServer allows the user
xmlrpc.server.ServerHTMLDoc() [class] Class used to generate pydoc HTML document for a server
xmlrpc.server.SimpleXMLRPCDispatcher(allow_none=False, encoding=None, use_builtin_types=False) [class] Mix-in class that dispatches XML-RPC requests.
xmlrpc.server.SimpleXMLRPCRequestHandler(request, client_address, server) [class] Simple XML-RPC request handler class.
xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=<??>, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False) [class] Simple XML-RPC server.
xmlrpc.server.XMLRPCDocGenerator() [class] Generates documentation for an XML-RPC server.
xmlrpc.server.dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False) [function] data [,options] -> marshalled data Convert an argument tuple or a Fault instance
xmlrpc.server.fcntl
xmlrpc.server.gzip_decode(data, max_decode=20971520) [function] gzip encoded data -> unencoded data Decode data using the gzip content encoding as
xmlrpc.server.gzip_encode(data) [function] data -> gzip encoded data Encode data using the gzip content encoding as described
xmlrpc.server.list_public_methods(obj) [function] Returns a list of attribute strings, found in the specified object, which represent
xmlrpc.server.loads(data, use_datetime=False, use_builtin_types=False) [function] data -> unmarshalled data, method name Convert an XML-RPC packet to unmarshalled
xmlrpc.server.partial() [class] partial(func, *args, **keywords) - new function with partial application of the given
xmlrpc.server.resolve_dotted_attribute(obj, attr, allow_dotted_names=True) [function] resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d Resolves a dotted attribute name
xmlrpc.server.signature(obj, *, follow_wrapped=True) [function] Get a signature object for the passed callable.
xxsubtype
xxsubtype.bench()
xxsubtype.spamdict() [class] dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a
xxsubtype.spamlist(iterable=()) [class] Built-in mutable sequence.
yield
zip(*iterables) [class] zip(iter1 [,iter2 [...]]) --> zip object Return a zip object whose .__next__() method
zipapp
zipapp.ZipAppError() [class] Inappropriate argument value (of correct type).
zipapp.create_archive(source, target=None, interpreter=None, main=None, filter=None, compressed=False) [function] Create an application archive from SOURCE.
zipapp.get_interpreter(archive) [function]
zipfile
zipfile.BadZipFile() [class] Common base class for all non-exit exceptions.
zipfile.BadZipfile() [class] Common base class for all non-exit exceptions.
zipfile.LargeZipFile() [class] Raised when writing a zipfile, the zipfile requires ZIP64 extensions and those extensions
zipfile.PyZipFile(file, mode='r', compression=0, allowZip64=True, optimize=-1) [class] Class to create ZIP archives with Python library files and packages.
zipfile.ZIP_BZIP2
zipfile.ZIP_DEFLATED
zipfile.ZIP_LZMA
zipfile.ZIP_STORED
zipfile.ZipFile(file, mode='r', compression=0, allowZip64=True, compresslevel=None) [class] Class with methods to open, read, write, close, list zip files.
zipfile.ZipInfo(filename='NoName', date_time=(1980, 1, 1, 0, 0, 0)) [class] Class with attributes describing each file in the ZIP archive.
zipfile.error() [class] Common base class for all non-exit exceptions.
zipfile.is_zipfile(filename) [function] Quickly see if a file is a ZIP file by checking the magic number.
zipimport
zipimport.ZipImportError() [class] Import can't find module, or can't find name in module.
zipimport.zipimporter(archivepath) [class] Create a new zipimporter instance.
zlib
zlib.DEFLATED
zlib.DEF_BUF_SIZE
zlib.DEF_MEM_LEVEL
zlib.MAX_WBITS
zlib.ZLIB_RUNTIME_VERSION
zlib.ZLIB_VERSION
zlib.Z_BEST_COMPRESSION
zlib.Z_BEST_SPEED
zlib.Z_BLOCK
zlib.Z_DEFAULT_COMPRESSION
zlib.Z_DEFAULT_STRATEGY
zlib.Z_FILTERED
zlib.Z_FINISH
zlib.Z_FIXED
zlib.Z_FULL_FLUSH
zlib.Z_HUFFMAN_ONLY
zlib.Z_NO_COMPRESSION
zlib.Z_NO_FLUSH
zlib.Z_PARTIAL_FLUSH
zlib.Z_RLE
zlib.Z_SYNC_FLUSH
zlib.Z_TREES
zlib.adler32(data, value=1) Compute an Adler-32 checksum of data.
zlib.compress(data, /, level=-1) Returns a bytes object containing compressed data. data Binary data to be compressed.
zlib.compressobj(level=-1, method=8, wbits=15, memLevel=8, strategy=0, zdict=None) Return a compressor object.
zlib.crc32(data, value=0) Compute a CRC-32 checksum of data.
zlib.decompress(data, /, wbits=15, bufsize=16384) Returns a bytes object containing the uncompressed data.
zlib.decompressobj(wbits=15, zdict=b'') Return a decompressor object. wbits The window buffer size and container format.
zlib.error() [class] Common base class for all non-exit exceptions.
